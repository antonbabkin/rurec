---
title: "connect_grant_examples"
format:
  html:
    self-contained: true
    page-layout: full
    code-fold: true
    code-tools: true
    code_download: yes
editor: visual
---

```{r packages and libraries, include = FALSE}
library(tidyr)
library(geosphere)
library(matlib)
library(rprojroot)

source(file.path(find_rstudio_root_file(), "nbs", "rural_typology_r_functions.R"))
```

::: panel-tabset
# Principle Setup

## Commodity/Industry economic sectors

```{r}
## Commodity/Industry economic sectors
Toy_Sectors <- c("Agriculture", 
                 "Mining",
                 "Manufacturing")
Toy_Sectors
```

## Supply Matrix (commodity-by-industry in Dollars): $\mathbf{V^{'}}$

Shows the value of the output of commodity i that is produced by industry j

The transpose of a Make matrix is the Supply matrix

In this example there is no secondary production, thus Supply == Make and commodity output == industry output but this may not always be true

```{r}
## Supply Matrix (commodity-by-industry in Dollars)
Toy_Supply_mat <- rbind(c(80, 0, 0),
                        c(0, 120, 0),
                        c(0, 0, 190))
rownames(Toy_Supply_mat) = colnames(Toy_Supply_mat) <- Toy_Sectors
Toy_Supply_mat
```

## Make Matrix (industry-by-commodity in Dollars): $\mathbf{V}$

Shows the industry i output value of commodity j

```{r}
## Make Matrix (industry-by-commodity in Dollars)
Toy_Make_mat <- t(Toy_Supply_mat)
Toy_Make_mat
```

## Total Commodity Output Vector: $\mathbf{q}$

The row sum of the Supply matrix and the transposed column sum of the Make matrix

```{r}
## Total Commodity Output Vector
i = as.matrix(rep(c(1), each=length(Toy_Sectors)))
Toy_Total_Commodity_Output <- Toy_Supply_mat %*% i
Toy_Total_Commodity_Output
```

## Total Industry Output Vector: $\mathbf{x}$

The transposed column sum of the Supply matrix and the row sum of the Make matrix

```{r}
## Total Industry Output Vector
i = as.matrix(rep(c(1), each=length(Toy_Sectors)))
Toy_Total_Industry_Output <- t(t(i) %*% Toy_Supply_mat)
Toy_Total_Industry_Output
```

## Use Matrix (commodity-by-industry in Dollars): $\mathbf{U}$

Shows the value of purchases of commodity i by industry j

Row sums represent the dollar value of a commodity used across all industries - Value of Aggregate (commodity) Factor Demand

Column sums represent the dollar value across all commodities used by an industry - Total (industry) Factor Cost

Cells are both intermediate sales of a commodity to an industry and intermediate purchases of a commodity by an industry

Sometimes called the input matrix

```{r}
## Use Matrix (commodity-by-industry in Dollars)
#Toy_Supply_mat %*% inv(diag(as.vector(Toy_Total_Industry_Output))) %*% Toy_Direct_mat %*% diag(as.vector(Toy_Total_Industry_Output))
Toy_Use_mat <- rbind(c(10, 0, 9),
                     c(11, 45, 20),
                     c(7, 15, 35))
rownames(Toy_Use_mat) = colnames(Toy_Use_mat) <- Toy_Sectors
Toy_Use_mat
```

## Value of Aggregate (commodity) Factor Demand Vector: $\mathbf{Ui}$

The row sum of the Use matrix

```{r}
## Value of Aggregate (commodity) Factor Demand Vector
i = as.matrix(rep(c(1), each=length(Toy_Sectors)))
Toy_Aggregate_Factor_Demand <- Toy_Use_mat %*% i
Toy_Aggregate_Factor_Demand
```

## Total (industry) Factor Cost Vector: $(\mathbf{i^{'}U})^{'}$

The transposed column sum of the Use matrix

```{r}
## Total (industry) Factor Cost Vector
i = as.matrix(rep(c(1), each=length(Toy_Sectors)))
Toy_Total_Factor_Cost <- t(t(i) %*% Toy_Use_mat)
Toy_Total_Factor_Cost
```

## Final Demand Vector: $\mathbf{e} = \mathbf{q} - \mathbf{Ui}$

Difference of Total Commodity Output and Value of Aggregate (commodity) Factor Demand

In motivating the theoretical framework Final Demand is exogenous to producers (i.e., industrial sectors)

Component parts of Final Demand: Personal consumption expenditures, Private fixed investment, Change in private inventories, Exports of goods and services, and Government consumption expenditures and gross investment

```{r}
## Final Demand Vector
Toy_Final_Demand <- Toy_Total_Commodity_Output - Toy_Aggregate_Factor_Demand
Toy_Final_Demand
```

## Value Added Vector: $\mathbf{v} = \mathbf{x} - (\mathbf{i^{'}U})^{'}$

Difference of Total Industry Output and Total (industry) Factor Cost

Component parts of Value Added: Employee compensation, Taxes on production, and Gross operating surplus; plus Imports of goods and services less subsidies

```{r}
## Value Added Vector
Toy_Value_Added <- Toy_Total_Industry_Output - Toy_Total_Factor_Cost
Toy_Value_Added
```

## B matrix: $\mathbf{B} = \mathbf{U\hat{x}^{-1}}$

The commodities-by-industries parallel to ordinary technical coefficients matrix, $\mathbf{A}$

Unlike $\mathbf{A}$, the $\mathbf{B}$ matrix cannot generate a total requirements matrix directly because Total Industry Output and Total Commodity Output cannot be combined directly to give the Final Demand Vector of commodities

column j represents the value of inputs of each commodity per dollar's worth of industry j's output

```{r}
## B matrix
Toy_B_mat <- Toy_Use_mat %*% inv(diag(as.vector(Toy_Total_Industry_Output))) 
rownames(Toy_B_mat) = colnames(Toy_B_mat)  <- Toy_Sectors
Toy_B_mat
```

## D matrix: $\mathbf{D} = \mathbf{V\hat{q}^{-1}}$

The Industry Source of Commodity Outputs

Denotes the fraction of total commodity j output that was produced by industry i

By definition, each column sum in $\mathbf{D}$ is unity

If the Supply matrix is diagonal, the $\mathbf{D}$ matrix is an Identity matrix

```{r}
## D matrix
Toy_D_mat <- t(Toy_Supply_mat) %*% inv(diag(as.vector(Toy_Total_Commodity_Output)), fractions=TRUE)
rownames(Toy_D_mat) = colnames(Toy_D_mat) <- Toy_Sectors
Toy_D_mat
```

## C matrix: $\mathbf{C} = \mathbf{V^{'}\hat{x}^{-1}}$

Commodity Composition of Industry Outputs

Denotes the fraction of total industry i output that is in the form of commodity j

By definition, each column sum in $\mathbf{C}$ is unity

If the Supply matrix is diagonal, the $\mathbf{C}$ matrix is an Identity matrix

```{r}
## C matrix
Toy_C_mat <- Toy_Supply_mat %*% inv(diag(as.vector(Toy_Total_Industry_Output)), fractions=TRUE)
rownames(Toy_C_mat) = colnames(Toy_C_mat) <- Toy_Sectors
Toy_C_mat
```

Total Requirements matrices

## Commodity-by-Commodity Total Requirements Matrix - Industry technology: $(\mathbf{I} - \mathbf{BD})^{-1}$

```{r}
## Commodity-by-Commodity Total Requirements
I <- diag(length(Toy_Sectors))
Toy_Total_ComByCom_IT_mat <- inv(I - Toy_B_mat %*% Toy_D_mat)
rownames(Toy_Total_ComByCom_IT_mat) = colnames(Toy_Total_ComByCom_IT_mat) <- Toy_Sectors
Toy_Total_ComByCom_IT_mat
```

## Industry-by-Commodity Total Requirements Matrix - Industry technology: $\mathbf{D}(\mathbf{I} - \mathbf{BD})^{-1}$

```{r}
## Industry-by-Commodity Total Requirements
I <- diag(length(Toy_Sectors))
Toy_Total_IndByCom_IT_mat <- Toy_D_mat %*% inv(I - Toy_B_mat %*% Toy_D_mat)
rownames(Toy_Total_IndByCom_IT_mat) = colnames(Toy_Total_IndByCom_IT_mat) <- Toy_Sectors
Toy_Total_IndByCom_IT_mat
```

## Industry-by-Industry Total Requirements Matrix - Industry technology: $(\mathbf{I} - \mathbf{DB})^{-1}$

```{r}
## Industry-by-Industry Total Requirements
I <- diag(length(Toy_Sectors))
Toy_Total_IndByInd_IT_mat <- inv(I - Toy_D_mat %*% Toy_B_mat)
rownames(Toy_Total_IndByInd_IT_mat) = colnames(Toy_Total_IndByInd_IT_mat) <- Toy_Sectors
Toy_Total_IndByInd_IT_mat
```

## Commodity-by-Industry Total Requirements Matrix - Industry technology: $\mathbf{D}^{-1}(\mathbf{I} - \mathbf{DB})^{-1}$

```{r}
## Commodity-by-Industry Total Requirements
I <- diag(length(Toy_Sectors))
Toy_Total_ComByInd_IT_mat <- inv(Toy_D_mat) %*% inv(I - Toy_D_mat %*% Toy_B_mat)
rownames(Toy_Total_ComByInd_IT_mat) = colnames(Toy_Total_ComByInd_IT_mat) <- Toy_Sectors
Toy_Total_ComByInd_IT_mat
```

## Commodity-by-Commodity Total Requirements Matrix - Commodity technology: $(\mathbf{I} - \mathbf{BC}^{-1})^{-1}$

```{r}
## Commodity-by-Commodity Total Requirements
I <- diag(length(Toy_Sectors))
Toy_Total_ComByCom_CT_mat <- inv(I - Toy_B_mat %*% inv(Toy_C_mat))
rownames(Toy_Total_ComByCom_CT_mat) = colnames(Toy_Total_ComByCom_CT_mat) <- Toy_Sectors
Toy_Total_ComByCom_CT_mat
```

## Industry-by-Commodity Total Requirements Matrix - Commodity technology: $\mathbf{C}^{-1}(\mathbf{I} - \mathbf{BC}^{-1})^{-1}$

```{r}
## Industry-by-Commodity Total Requirements
I <- diag(length(Toy_Sectors))
Toy_Total_IndByCom_CT_mat <- inv(Toy_C_mat) %*% inv(I - Toy_B_mat %*% inv(Toy_C_mat))
rownames(Toy_Total_IndByCom_CT_mat) = colnames(Toy_Total_IndByCom_CT_mat) <- Toy_Sectors
Toy_Total_IndByCom_CT_mat
```

## Industry-by-Industry Total Requirements Matrix - Commodity technology: $(\mathbf{I} - \mathbf{C}^{-1}\mathbf{B})^{-1}$

```{r}
## Industry-by-Industry Total Requirements
I <- diag(length(Toy_Sectors))
Toy_Total_IndByInd_CT_mat <- inv(I - inv(Toy_C_mat) %*% Toy_B_mat)
rownames(Toy_Total_IndByInd_CT_mat) = colnames(Toy_Total_IndByInd_CT_mat) <- Toy_Sectors
Toy_Total_IndByInd_CT_mat
```

## Commodity-by-Industry Total Requirements Matrix - Commodity technology: $\mathbf{C}(\mathbf{I} - \mathbf{C}^{-1}\mathbf{B})^{-1}$

```{r}
## Commodity-by-Industry Total Requirements
I <- diag(length(Toy_Sectors))
Toy_Total_ComByInd_CT_mat <- Toy_C_mat %*% inv(I - inv(Toy_C_mat) %*% Toy_B_mat)
rownames(Toy_Total_ComByInd_CT_mat) = colnames(Toy_Total_ComByInd_CT_mat) <- Toy_Sectors
Toy_Total_ComByInd_CT_mat
```

Direct Requirements matrices

## Commodity-by-Commodity Direct Requirements, Industry-Demand-Driven Model: $\mathbf{BD}$

```{r}
## Commodity-by-Commodity Direct Requirements, Industry-Demand-Driven Model
Toy_Direct_ComByCom_IT_mat <- Toy_B_mat %*% Toy_D_mat
rownames(Toy_Direct_ComByCom_IT_mat) = colnames(Toy_Direct_ComByCom_IT_mat) <- Toy_Sectors
Toy_Direct_ComByCom_IT_mat
```

## Commodity-by-Commodity Direct Requirements, Commodity-Demand-Driven Model: $\mathbf{B}\mathbf{C}^{-1}$

```{r}
## Commodity-by-Commodity Direct Requirements, Commodity-Demand-Driven Model
Toy_Direct_ComByCom_CT_mat <- Toy_B_mat %*% inv(Toy_C_mat)
rownames(Toy_Direct_ComByCom_CT_mat) = colnames(Toy_Direct_ComByCom_CT_mat) <- Toy_Sectors
Toy_Direct_ComByCom_CT_mat
```

## Industry-by-Industry Direct Requirements, Industry-Demand-Driven Model: $\mathbf{DB}$

```{r}
## Industry-by-Industry Direct Requirements, Industry-Demand-Driven Model
Toy_Direct_IndByInd_IT_mat <- Toy_D_mat %*% Toy_B_mat
rownames(Toy_Direct_IndByInd_IT_mat) = colnames(Toy_Direct_IndByInd_IT_mat) <- Toy_Sectors
Toy_Direct_IndByInd_IT_mat
```

## Industry-by-Industry Direct Requirements, Commodity-Demand-Driven Model: $\mathbf{C}^{-1}\mathbf{B}$

```{r}
## Industry-by-Industry Direct Requirements, Commodity-Demand-Driven Model
Toy_Direct_IndByInd_CT_mat <- inv(Toy_C_mat) %*% Toy_B_mat
rownames(Toy_Direct_IndByInd_CT_mat) = colnames(Toy_Direct_IndByInd_CT_mat) <- Toy_Sectors
Toy_Direct_IndByInd_CT_mat
```

# National Example

Given a Use matrix and Supply matrix can we recover the direct and total requirements matrices?

## Use matrix (commodity by industry)

```{r}
Toy_Use_mat
```

## Supply matrix (commodity by industry)

```{r}
Toy_Supply_mat
```

## Total_Commodity_Output

```{r}
i = as.matrix(rep(c(1), each=length(Toy_Sectors)))
Toy_Total_Commodity_Output <- Toy_Supply_mat %*% i
Toy_Total_Commodity_Output
```

## Total_Industry_Output

```{r}
i = as.matrix(rep(c(1), each=length(Toy_Sectors)))
Toy_Total_Industry_Output <- t(t(i) %*% Toy_Supply_mat)
Toy_Total_Industry_Output
```

## B_Matrix

The commodity/industry framework parallel to the ordinary technical coefficients (Direct Requirements) matrix

```{r}
Toy_B_mat <- Toy_Use_mat %*% inv(diag(as.vector(Toy_Total_Industry_Output))) 
colnames(Toy_B_mat) <- Toy_Sectors
Toy_B_mat
```

## D_Matrix

commodity output proportions

```{r}
Toy_D_mat <- t(Toy_Supply_mat) %*% inv(diag(as.vector(Toy_Total_Commodity_Output)), fractions=TRUE)
colnames(Toy_D_mat) <- Toy_Sectors
Toy_D_mat
```

## C_Matrix

industry output proportions

```{r}
Toy_C_mat <- Toy_Supply_mat %*% inv(diag(as.vector(Toy_Total_Industry_Output)), fractions=TRUE)
colnames(Toy_C_mat) <- Toy_Sectors
Toy_C_mat
```

```{r}
# Direct 
Toy_Direct_IndByInd_IT_mat <- Toy_D_mat %*% Toy_B_mat
Toy_Direct_IndByInd_CT_mat <- inv(Toy_C_mat) %*% Toy_B_mat
rownames(Toy_Direct_IndByInd_CT_mat) <- Toy_Sectors
Toy_Direct_ComByCom_IT_mat <- Toy_B_mat %*% Toy_D_mat
Toy_Direct_ComByCom_CT_mat <- Toy_B_mat %*% inv(Toy_C_mat)
colnames(Toy_Direct_ComByCom_CT_mat) <- Toy_Sectors
```

## Direct Requirements family

```{r}
Toy_Direct_IndByInd_IT_mat
Toy_Direct_IndByInd_CT_mat
Toy_Direct_ComByCom_IT_mat
Toy_Direct_ComByCom_CT_mat
```

```{r}
# Total 
I <- diag(length(Toy_Sectors))
Toy_Total_ComByCom_IT_mat <- inv(I - Toy_B_mat %*% Toy_D_mat)
rownames(Toy_Total_ComByCom_IT_mat) = colnames(Toy_Total_ComByCom_IT_mat) <- Toy_Sectors
Toy_Total_IndByCom_IT_mat <- Toy_D_mat %*% inv(I - Toy_B_mat %*% Toy_D_mat)
rownames(Toy_Total_IndByCom_IT_mat) = colnames(Toy_Total_IndByCom_IT_mat) <- Toy_Sectors
Toy_Total_IndByInd_IT_mat <- inv(I - Toy_D_mat %*% Toy_B_mat)
rownames(Toy_Total_IndByInd_IT_mat) = colnames(Toy_Total_IndByInd_IT_mat) <- Toy_Sectors
Toy_Total_ComByInd_IT_mat <- inv(Toy_D_mat) %*% inv(I - Toy_D_mat %*% Toy_B_mat)
rownames(Toy_Total_ComByInd_IT_mat) = colnames(Toy_Total_ComByInd_IT_mat) <- Toy_Sectors
  
Toy_Total_ComByCom_CT_mat <- inv(I - Toy_B_mat %*% inv(Toy_C_mat))
rownames(Toy_Total_ComByCom_CT_mat) = colnames(Toy_Total_ComByCom_CT_mat) <- Toy_Sectors
Toy_Total_IndByCom_CT_mat <- inv(Toy_C_mat) %*% inv(I - Toy_B_mat %*% inv(Toy_C_mat))
rownames(Toy_Total_IndByCom_CT_mat) = colnames(Toy_Total_IndByCom_CT_mat) <- Toy_Sectors
Toy_Total_IndByInd_CT_mat <- inv(I - inv(Toy_C_mat) %*% Toy_B_mat)
rownames(Toy_Total_IndByInd_CT_mat) = colnames(Toy_Total_IndByInd_CT_mat) <- Toy_Sectors
Toy_Total_ComByInd_CT_mat <- Toy_C_mat %*% inv(I - inv(Toy_C_mat) %*% Toy_B_mat)
rownames(Toy_Total_ComByInd_CT_mat) = colnames(Toy_Total_ComByInd_CT_mat) <- Toy_Sectors

```

## Total Requirements family

```{r}
Toy_Total_ComByCom_IT_mat
Toy_Total_IndByCom_IT_mat
Toy_Total_IndByInd_IT_mat
Toy_Total_ComByInd_IT_mat
Toy_Total_ComByCom_CT_mat
Toy_Total_IndByCom_CT_mat
Toy_Total_IndByInd_CT_mat
Toy_Total_ComByInd_CT_mat
```

```{r}
# ##back to direct from total test 
# Toy_Total_IndByInd_mat <- inv(I - Toy_Direct_IndByInd_IT_mat) 
# test <- diag(length(Toy_Sectors)) - inv(Toy_Total_IndByInd_mat)
# rownames(test) <- rownames(Toy_Direct_IndByInd_IT_mat)
# colnames(test) <- colnames(Toy_Direct_IndByInd_IT_mat)
# test
# test == Toy_Direct_IndByInd_IT_mat
# all.equal(test, Toy_Direct_IndByInd_IT_mat, tolerance = 0, countEQ = TRUE)


# ##counter example using solve()
# Toy_B_mat <- Toy_Use_mat %*% solve(diag(as.vector(Toy_Total_Industry_Output)))
# Toy_D_mat <- t(Toy_Supply_mat) %*% solve(diag(as.vector(Toy_Total_Commodity_Output)))
# 
# # ind by ind direct
# Toy_Direct_IndByInd_IT_mat <- Toy_D_mat %*% Toy_B_mat
# 
# # ind by ind total
# Toy_Total_IndByInd_mat <- solve(diag(length(Toy_Sectors)) - Toy_Direct_IndByInd_IT_mat)
# 
# #back to direct from total
# test <- diag(length(Toy_Sectors)) - solve(Toy_Total_IndByInd_mat)
# rownames(test) <- rownames(Toy_Direct_IndByInd_IT_mat)
# colnames(test) <- colnames(Toy_Direct_IndByInd_IT_mat)
# test == Toy_Direct_IndByInd_IT_mat
# all.equal(test, Toy_Direct_IndByInd_IT_mat, tolerance = 0, countEQ = TRUE)
# 
```

# Regional Example

Given Region specific Total Industry Output and National Use and Supply matrices, what can we derive?

## Regional places

```{r}
## Regional places
Toy_Places <- c("Albany", 
                "Brown", 
                "Cook")
Toy_Places 
```

## Industry-by-Region Total Industry Output Table

Shows the value of the output of industry i that is produced by county j

```{r}
## Sub-national Total Industry Output (Industry-by-County)
Toy_Regional_Industry_Output <- rbind(c(50, 20, 10),
                                      c(0, 70, 50),
                                      c(35, 55, 100))
rownames(Toy_Regional_Industry_Output) <- Toy_Sectors
colnames(Toy_Regional_Industry_Output) <- Toy_Places
Toy_Regional_Industry_Output
```

## Region specific Total Commodity Output (Commodity-by-Region)

Shows the value of the output of commodity i that is produced by region j

```{r}
## Sub-national Total Commodity Output (Commodity-by-County)
## Translate Sub-national Industry Output matrix into Commodity Output
## The D matrix is the Industry Source of Commodity Outputs or the fraction of total commodity j output that was produced by industry i
## The C matrix is the Commodity Composition of Industry Outputs or the fraction of total industry i output that is in the form of commodity j

Toy_Regional_Commodity_Output <- inv(Toy_D_mat) %*% Toy_Regional_Industry_Output 
Toy_Regional_Commodity_Output <- Toy_C_mat %*% Toy_Regional_Industry_Output
Toy_Regional_Commodity_Output

```

## Regional Use matrices (Commodity-by-Industry)

Shows the value of purchases of commodity i by industry j

Cells are both intermediate sales of a commodity to an industry and intermediate purchases of a commodity by an industry

```{r}
## Regional Use matrices (Commodity-by-Industry)
Toy_Places[1]
Toy_B_mat %*% diag(as.vector(Toy_Regional_Industry_Output[,1]))
Toy_Places[2]
Toy_B_mat %*% diag(as.vector(Toy_Regional_Industry_Output[,2]))
Toy_Places[3]
Toy_B_mat %*% diag(as.vector(Toy_Regional_Industry_Output[,3]))
```

## Regional Supply matrices (Commodity-by-Industry)

Shows the value of the output of commodity i that is produced by industry j

```{r}
## Regional Supply matrices (Commodity-by-Industry)
Toy_Places[1]
t(Toy_D_mat %*% diag(as.vector(Toy_Regional_Commodity_Output[,1])))
Toy_Places[2]
t(Toy_D_mat %*% diag(as.vector(Toy_Regional_Commodity_Output[,2])))
Toy_Places[3]
t(Toy_D_mat %*% diag(as.vector(Toy_Regional_Commodity_Output[,3])))
```

## Regional Aggregate (commodity) Factor Demand

Intermediate (commodity) sales

Equivalent to Intermediate Commodity Output in a sector model

Equivalent to Regional Use matrix row sum

Called "county InputNeeds" in previous generations

```{r}
## Regional Aggregate (commodity) Factor Demand
Toy_Regional_FactorDemand <- Toy_Direct_IndByInd_IT_mat %*% Toy_Regional_Industry_Output
Toy_Regional_FactorDemand
```

## Regional Total (industry) Factor Cost

Intermediate (industry) purchases

Equivalent to Intermediate Industry Input in a sector model

Equivalent to Regional Use matrix column sum

```{r}
## Regional Total (industry) Factor Cost
i = as.matrix(rep(c(1), each=length(Toy_Sectors)))
Toy_Regional_FactorCost <- diag(as.vector( t(i) %*% Toy_Direct_IndByInd_IT_mat )) %*% Toy_Regional_Industry_Output
rownames(Toy_Regional_FactorCost) <- Toy_Sectors
Toy_Regional_FactorCost

```

## Regional (Industry) Value Added

Difference of Total Industry Output and Total (industry) Factor Cost

Component parts of Value Added: Employee compensation, Taxes on production, and Gross operating surplus; plus Imports of goods and services less subsidies

```{r}
## Regional (Industry) Value Added 
Toy_Regional_ValueAdded <- Toy_Regional_Industry_Output - Toy_Regional_FactorCost
Toy_Regional_ValueAdded
```

## Regional Final (Commodity) Demand

Difference of Total Commodity Output and Value of Aggregate (commodity) Factor Demand

Component parts of Final Demand: Personal consumption expenditures, Private fixed investment, Change in private inventories, Exports of goods and services, and Government consumption expenditures and gross investment

```{r}
## Regional Final (Commodity) Demand
Toy_Regional_FinalDemand <- Toy_Regional_Commodity_Output - Toy_Regional_FactorDemand
Toy_Regional_FinalDemand
```

## Recovered National metrics from Regional

```{r}

i = as.matrix(rep(c(1), each=length(Toy_Sectors)))

## National Total Industry Output
## The row sum of the Sub-national Total Industry Output matrix
Toy_National_Industry_Output <- Toy_Regional_Industry_Output %*% i
Toy_National_Industry_Output

## National Total Commodity Output
## The row sum of the Sub-national Total Commodity Output matrix
Toy_National_Commodity_Output <- Toy_Regional_Commodity_Output %*% i
Toy_National_Commodity_Output

## National Use matrix
Toy_National_Use_mat <- Toy_B_mat %*% diag(as.vector(Toy_National_Industry_Output))
colnames(Toy_National_Use_mat) <- Toy_Sectors
Toy_National_Use_mat

## National Supply matrix
Toy_National_Supply_mat <- t(Toy_D_mat %*% diag(as.vector(Toy_National_Commodity_Output)))
rownames(Toy_National_Supply_mat) <- Toy_Sectors
Toy_National_Supply_mat

## National Aggregate (commodity) Factor Demand
## Intermediate (commodity) sales
## Equivalent to Intermediate Commodity Output in a sector model
## Equivalent to National Use matrix row sum
## called "county InputNeeds" in previous generations
Toy_National_FactorDemand <- Toy_Direct_IndByInd_IT_mat %*% Toy_National_Industry_Output
Toy_National_FactorDemand

## National Total (industry) Factor Cost
## Intermediate (industry) purchases
## Equivalent to Intermediate Industry Input in a sector model
## Equivalent to National Use matrix column sum
Toy_National_FactorCost <- Toy_National_Industry_Output * (t(Toy_Direct_IndByInd_IT_mat) %*% i)
Toy_National_FactorCost <- diag(as.vector(Toy_National_Industry_Output)) %*% t(Toy_Direct_IndByInd_IT_mat) %*% i
rownames(Toy_National_FactorCost) <- Toy_Sectors
Toy_National_FactorCost

## National Value Added (by industries)
Toy_National_ValueAdded <- Toy_National_Industry_Output - Toy_National_FactorCost
Toy_National_ValueAdded

## National Final Demand (of commodities)
Toy_National_FinalDemand <- Toy_National_Commodity_Output - Toy_National_FactorDemand
Toy_National_FinalDemand

# ## National (Commodity) Final Demand
# Toy_National_FinalDemand_ComCom_IT <- inv(Toy_Total_ComByCom_IT_mat) %*% Toy_National_Commodity_Output
# Toy_National_FinalDemand_ComInd_IT <- inv(Toy_Total_IndByCom_IT_mat) %*% Toy_National_Industry_Output
# Toy_National_FinalDemand_ComCom_CT <- inv(Toy_Total_ComByCom_CT_mat) %*% Toy_National_Commodity_Output
# Toy_National_FinalDemand_ComInd_CT <- inv(Toy_Total_IndByCom_CT_mat) %*% Toy_National_Industry_Output
# 
# ## National (Industry) Final Demand
# Toy_National_FinalDemand_IndInd_IT <- inv(Toy_Total_IndByInd_IT_mat) %*% Toy_National_Industry_Output
# Toy_National_FinalDemand_IndCom_IT <- inv(Toy_Total_ComByInd_IT_mat) %*% Toy_National_Commodity_Output
# Toy_National_FinalDemand_IndInd_CT <- inv(Toy_Total_IndByInd_CT_mat) %*% Toy_National_Industry_Output
# Toy_National_FinalDemand_IndCom_CT <- inv(Toy_Total_ComByInd_CT_mat) %*% Toy_National_Commodity_Output

```

*Notes and loose ends*

In a completely "closed" extended I-O model, all sectors in final demand are transmuted into the interindustry coefficients matrix, meaning the final demand vector is zero, which is to say all outputs are accounted for as inputs somewhere, and the system is completely closed without any exogenous sectors. In this situation we could say Total Factor Demand is Total Commodity Output. Likewise, Total Factor Cost is Total Industry Output. Thus (assuming a diagonal Make matrix), Total Factor Cost = Total Factor Demand. In other words, the total value of output from a sector must be equal to the total value of its inputs. In other other words, all inputs to a sector come from all outputs of all other sectors. What does this mean in the context of a non-completely closed model, and what does it mean when we do not observe Total Factor Cost and Total Factor Demand equivalence at the sector level?

First, we have shown that the source of Factor Demand inputs are Total Commodity Outputs. Thus the available export pool for Albany or any region is its Total Commodity Outputs less its Factor Demand A.K.A Final Demand. At the moment this Final Demand includes both what is consumed locally and what is exported to satisfy the national balance of accounts, without distinction.

Conjecture: If we observe a county with a negative Final Demand component, we know that it must be importing at least that must to satisfy the balance of accounts. I.e., NID: pmax(Toy_Regional_FactorDemand - Toy_Regional_Industry_Output, 0) is that lower bound value. Simalarly, NIS: pmax(Toy_Regional_Industry_Output - Toy_Regional_FactorDemand, 0) represents the upper bound value of a counties available exports

In our example, Albany needs to import at least \$10.559212 of Mining. Brown has at a maximum \$35.21053 of Mining to export and Cook has at a maximum \$19.348687 of Mining to export. Note this model inherently assumes that if a region needs an input and can produce that input it will use up all that local production before seeking imports. In other words, the available \$35.21053 of Mining that Brown has to export already has its own input needs of \$34.789466 accounted for.

So from which place and how much from each will Albany import its Mining needs from?

Proposition: (Gravity Model) The interregional trade of (Mining) from Brown to Albany is given by Q_AB times (AlbanyFinalDemand_Mining times BrownFinalDemand_Mining)/(NationalFinalDemand_Mining?) = Q_AB times (\$10.559212 times \$35.21053) /(\$44) = Q_AB times \$8.449897. Similarly, the interregional trade of (Mining) from Cook to Albany is given by Q_AB times (AlbanyFinalDemand_Mining times CookFinalDemand_Mining)/(NationalFinalDemand_Mining?) = Q_AB times (\$10.559212 times \$19.348687) /(\$44) = Q_AB times \$4.643338. But 8.449897 + 4.643338 = 13.09323

# Regional cont. Metrics

## NID (Net Input Demand): $\max \{\mathbf{DB}\mathbf{X} - \mathbf{X}, 0\}$

```{r}
##import needs by region
NID <- pmax(Toy_Regional_FactorDemand - Toy_Regional_Industry_Output, 0)
NID
```

## NIS (Net Input Supply): $\max \{\mathbf{X} - \mathbf{DB}\mathbf{X}, 0\}$

```{r}

##exports (excess) by region
NIS <- pmax(Toy_Regional_Industry_Output - Toy_Regional_FactorDemand, 0)
NIS
```

## Region $r$ Absorption matrix: $\mathbf{A}^{r} = \min\{\text{NID}^{r}, \textbf{NIS} \}$

Total Absorption matrix: $\mathbf{A} = \mathbf{i'}\min\{\text{NID}^{r}, \textbf{NIS} \}~ \forall ~ r$

```{r}
SAS <- stacked_absorption_share(NIS, NID) 
SAS
```

## Normalized Absorption Shares: $\mathbf{\alpha} = \mathbf{i'}\min\{\text{NID}^{r}, \textbf{NIS} \} / \text{NIS}^{r} ~ \forall ~ r$

```{r}
NAS <- normalized_absorption_share(SAS, NIS)
NAS
```

## Absorption Potential Matching (alpha max)

ECA (Economic Catchment Area) Matching (based on row-wise maximum Absorption with a non-zero isolation threshold minimum): row max \< threshold → Isolated (ECA match = Self Match) (no one imports enough of what you have available as positive Final Demand) row max \> threshold → Cluster Source (ECA match = rowMax column county) (at least one county could import your positive Final Demand given its NID) (Matched to county that could import more than any other county what you have available as positive Final Demand) row max \> threshold, but also a sink (rowMax county) for another county → Cluster Sink (ECA match = Self Match) (at least one county could import your positive Final Demand, but you are also the max import sink for at least one other county) row max \< threshold, but also a sink (rowMax county) for another county → Isolated, Cluster Sink (ECA match = Self Match) (no one imports enough of what you have available as positive Final Demand, but you are also the max import sink for at least one other county)

```{r}
AMM <- absorption_maximum_match(NAS)
AMM[colnames(AMM) %in% c("place", "max_absorption_alpha", "match", "cluster_category", "eca_membership")]
```

## Geographical Distance matrix

```{r}
Toy_Lat <- c(42.3, 44.49, 41.84 )
Toy_Lon <- c(-89.04, -88.03, -87.77)
Toy_Dist_mat <- distm(cbind(Toy_Lon, Toy_Lat))
colnames(Toy_Dist_mat) = rownames(Toy_Dist_mat) <-  Toy_Places
Toy_Dist_mat
```

## Geographical Impedance matrix: $\mathbf{Q}$

For example: bi-square, hyperbolic secant, Gaussian, exponential, power, distance proximity, boarder proximity, neighbor-of-neighbor proximity,

```{r}
decay_function = c("bisquare", "hyper", "gaus", "expo", "power", "distance")[4]

if(decay_function == "bisquare"){
  boundary_limit <- miles2meters(200)
  Toy_Q <- ifelse(Toy_Dist_mat > boundary_limit, 0, (1-(Toy_Dist_mat/boundary_limit)^2)^2)
}
if(decay_function == "hyper"){
  hyper_decay_constant <- miles2meters(200)
  Toy_Q <- 2/(exp(-(Toy_Dist_mat/hyper_decay_constant)) + exp(Toy_Dist_mat/hyper_decay_constant))
}
if(decay_function == "gaus"){
  rms_width = miles2meters(200)
  Toy_Q <- exp(-.5*(Toy_Dist_mat/rms_width)^2) 
}
if(decay_function == "expo"){
  expo_decay_constant <- miles2meters(200)
  Toy_Q <- exp(-(Toy_Dist_mat/expo_decay_constant)) 
}
if(decay_function == "power"){
  decay_power = 1/2
  scaler_constant = 10^(nchar(trunc(trunc(max(Toy_Dist_mat))^(decay_power)))-1)
  Toy_Q <- ifelse(Toy_Dist_mat == 0, 1, (1*scaler_constant/(Toy_Dist_mat)^(decay_power)))
}
if(decay_function == "distance"){
  decay_power = 1
  scaler_constant = 10^(nchar(trunc(trunc(max(Toy_Dist_mat))^(decay_power)))-1)
  Toy_Q <- ifelse(Toy_Dist_mat == 0, 1, (1*scaler_constant/(Toy_Dist_mat)^(decay_power)))
}
```

`r decay_function`

```{r}
Toy_Q %>% round(4)
```

## Spatial Absorption matrix: $\mathbf{AQ}$

```{r}
SNAS <- (NAS * Toy_Q) 
SNAS %>% round(4)
```

## Spatial Absorption Potential Matching (alpha max)

```{r}
SAMM <- absorption_maximum_match(SNAS)
SAMM[colnames(SAMM) %in% c("place", "max_absorption_alpha", "match", "cluster_category", "eca_membership")]
```

## Alternatives?

```{r}
#ALt option choice using intermediate (industry) purchases?
pmax(Toy_Regional_FactorCost - Toy_Regional_Industry_Output, 0)
pmax(Toy_Regional_Industry_Output - Toy_Regional_FactorCost, 0)

## Note: Toy_Regional_FinalDemand == Toy_Regional_Commodity_Output - Toy_Regional_FactorDemand != Toy_Regional_Industry_Output - Toy_Regional_FactorDemand
## Toy_Regional_Industry_Output and Toy_Regional_Commodity_Output may not even have the same dimensions or cell values

```

## RAS trade balance

Biproportional scaling also known as the RAS technique

Instead of using the RAS procedure to adjust coefficient matrices across time (the updating problem), it is used to adjust coefficient matrices across space (the regionalization problem).

We apply the same RAS principles, where we utilize a (relatively up-to-date) national input--output table, $\mathbf{A}^{n}$, and current marginal information about regional economic activity -- $\mathbf{x}^{r}$, $\mathbf{u}^{r}$, and $\mathbf{v}^{r}$.

## National_FactorRatio: NationalFactorDemand/NationalCommodity_Output

```{r}
Toy_National_FactorRatio <- Toy_National_FactorDemand/Toy_National_Commodity_Output
Toy_National_FactorRatio
```

## Regional_FactorSupply: National_FactorRatio x Regional_Commodity_Output

```{r}
Toy_Regional_FactorSupply <- diag(as.vector(Toy_National_FactorRatio)) %*% Toy_Regional_Commodity_Output
rownames(Toy_Regional_FactorSupply) <- Toy_Sectors
Toy_Regional_FactorSupply
```

**Detour**

## Alt. NID

```{r}
aNID <- pmax(Toy_Regional_FactorDemand - Toy_Regional_FactorSupply, 0)
aNID
```

## Alt. NIS

```{r}
aNIS <- pmax(Toy_Regional_FactorSupply - Toy_Regional_FactorDemand, 0)
aNIS
```

## Alt. Absorption Shares

```{r}
aSAS <- stacked_absorption_share(aNIS, aNID)
aSAS
```

## Alt. Normalized Absorption Shares

```{r}
aNAS <- normalized_absorption_share(aSAS, aNIS)
aNAS
```

## Alt. Absorption Potential Matching (alpha max)

```{r}
aAMM <- absorption_maximum_match(aNAS)
aAMM[colnames(aAMM) %in% c("place", "max_absorption_alpha", "match", "cluster_category", "eca_membership")]
```

## RAS

*Starting position of trade matrix (with impedance factor)*

```{r}
#Starting position of trade matrix 
df <- list()
for (i in Toy_Sectors){
  df[[i]] <- (t(Toy_Regional_FactorSupply[i,, drop=F]) %*% Toy_Regional_FactorDemand[i,, drop=F]) * (Toy_Q)
}
df
```

## RAS trade matrices

```{r}
source(file.path(find_rstudio_root_file(), "nbs", "io_analysis.R"))
tf <- list()
for (i in Toy_Sectors){
  x = df[[i]]
  r = Toy_Regional_FactorSupply[i,, drop=F]
  c = Toy_Regional_FactorDemand[i,, drop=F]
  tf[[i]] <- ras_trade_flows(x0 = x,
                               rs1 = r, 
                               cs1 = c)
  colnames(tf[[i]]) = rownames(tf[[i]]) = Toy_Places
}
tf
```

## Total Trade Matrix

```{r}
#Total trade matrix 
ttf <- tf$Agriculture + tf$Mining + tf$Manufacturing
ttf
```

## Absorption Potential Matching (ttf max)

```{r}
tAMM <- absorption_maximum_match(ttf)
tAMM[colnames(tAMM) %in% c("place", "max_absorption_alpha", "match", "cluster_category", "eca_membership")]
```

## Absorption Potential Matching (ttf max hedonic trade censoring)

```{r}
cttf <- ttf
diag(cttf) <- 0
ctAMM <- absorption_maximum_match(cttf)
ctAMM[colnames(ctAMM) %in% c("place", "max_absorption_alpha", "match", "cluster_category", "eca_membership")]
```

## RAS with Alt. Unit Starting position of trade matrix

```{r}
#RAS trade matrix 
#Alternative Starting position of unit trade matrix
tf <- list()
for (i in Toy_Sectors){
  x = matrix(1, length(Toy_Sectors), length(Toy_Sectors))
  r = Toy_Regional_FactorSupply[i,, drop=F]
  c = Toy_Regional_FactorDemand[i,, drop=F]
  tf[[i]] <- ras_trade_flows(x0 = x,
                               rs1 = r, 
                               cs1 = c)
  colnames(tf[[i]]) = rownames(tf[[i]]) = Toy_Places
}
tf
```

## Alt. Unit Total Trade Matrix

```{r}
#Total trade matrix 
ttf <- tf$Agriculture + tf$Mining + tf$Manufacturing
ttf
```

## Alt. Unit Absorption Potential Matching (ttf max)

```{r}
tAMM <- absorption_maximum_match(ttf)
tAMM[colnames(tAMM) %in% c("place", "max_absorption_alpha", "match", "cluster_category", "eca_membership")]
```

## Alt. Unit Absorption Potential Matching (ttf max hedonic trade censoring)

```{r}
cttf <- ttf
diag(cttf) <- 0
ctAMM <- absorption_maximum_match(cttf)
ctAMM[colnames(ctAMM) %in% c("place", "max_absorption_alpha", "match", "cluster_category", "eca_membership")]
```

```{r}

#Alternative Starting position of trade matrix with min/max trading 

# NIS[2,, drop=F]
#   x = t(matrix(pmin(rowSums(NID), NIS), nrow(NIS), ncol(NIS))[2,, drop=F]) %*% NID[2,, drop=F]
#   r = matrix(pmin(rowSums(NID), NIS), nrow(NIS), ncol(NIS))[2,, drop=F]/max(colSums(x !=0))
#   c = NID[2,, drop=F]/max(rowSums(x !=0))
#   ras_trade_flows(x0 = x,
#                   rs1 = r, 
#                   cs1 = c)
# 
# t(NIS[2,, drop=F]) %*%  NID[2,, drop=F] * (Toy_Q)

```

# Q&A

What do we know?

1.  Gross Industry Output by industry sector by region.

2.  Technology of Production at the national level i.e., the Direct Requirements matrix. (In future we may want to use Location Quotients to specify localized Direct Requirements matrices.)

To recover Gross Industry Output from CBP payroll we scale by "payroll's share of gross output". We use the ratio of National-level CBP payroll to the BEA's T018-Total Industry Output (Gross Industry Output) at the appropriate corresponding industry level (Sector, Summary, Detail). This industry specific payroll's share of gross output is then applied to the county-level to scale CBP payroll into a gross (industry) output value. AgCensus comes almost ready in Gross Industry Output form. In future we may want to adjust it for Inventories, Taxes, and Subsidies to get an even more precise figure.

With just this information we impute the industry by region Factor Demand. Factor Demand is the level of inputs needed to satisfy the observed level of Gross Output (assuming goods are not merely imported for direct final consumption). By definition Gross Output is the sum of Factor Demand and Final Demand, thus we can also derive Final Demand. Final Demand is composed of both final consumption within a region AND "exports" of commodities to other regions. In addition we can derive Regional Use matrices, Regional Supply matrices, Regional Total Factor Cost, and Regional Value Added.

Are we generating Factor Demand and Final Demand correctly? What is the interpretation of (I-inv(i-by-i TotalRequirements))(Gross Industry Output)? Strictly speaking we have been interchanging DBX, Final Demand, and BX when they all are not necessarily equal. We know that (B_matrix)(Gross Industry Output) = Gross Commodity Output - Commodity Final Demand = Commodity Factor Demand, where the B_matrix = (Use Matrix)(inv(hat(Gross Industry Output))) is the core commodity-by-industry technical coefficient matrix, the commodity/industry framework parallel to the ordinary technical coefficients matrix.\
Note: BEA provides both "Direct Requirements/After Redefinitions/Producer Value" and "Domestic Direct Requirements/After Redefinitions/Producer Value" tables. Should we use them directly instead of transforming the Total Requirements? Would the domestic tables in particular be best for our purposes?

New proposed metrics: NID (Net Input Demand): max(Regional Factor Demand - Regional Gross Output, 0) == max(-Regional Final Demand, 0) NIS (Net Input Supply): max(Regional Gross Output - Regional Factor Demand, 0) == max(Regional Final Demand, 0) Total Absorption matrix: colSum(min(NID_r, NIS)) for all r Normalized Absorption Shares: colSum(min(NID_r, NIS))/NID_r for all r

ECA (Economic Catchment Area) Matching (based on row-wise maximum Absorption with a non-zero isolation threshold minimum):

row max \< threshold → Isolated (ECA match = Self Match) (no one imports enough of what you have available as positive Final Demand)

row max \> threshold → Cluster Source (ECA match = rowMax column county) (at least one county could import your positive Final Demand given its NID) (Matched to county that could import more than any other county what you have available as positive Final Demand)

row max \> threshold, but also a sink (rowMax county) for another county → Cluster Sink (ECA match = Self Match) (at least one county could import your positive Final Demand, but you are also the max import sink for at least one other county)

row max \< threshold, but also a sink (rowMax county) for another county → Isolated, Cluster Sink (ECA match = Self Match) (no one imports enough of what you have available as positive Final Demand, but you are also the max import sink for at least one other county)

The problem: We have no way to directly observe or derive intraindustry intraregional trade flows. Specifically we wish to know what proportion of Final Demand is final consumption within a region and what proportion is sent to other regions?

Why do we care? First, the supply chain connectedness of places boils down to what and how much is/could be sent between regions. It is essential to specify the upper and lower bounds of this activity and maybe even propose a single imputed estimate. At the moment what we have proposed using is the Greatest Lower Bound of Region specific Exports applied to pair-wise only intraregional trade flows. Second, under the current connectedness specification we are tacitly imposing a no-cross hauling assumption on top of a pair-wise only absorption matching scheme which implicitly permits a cluster sink to "absorb" in aggregate more than needs or it even could possibly need given its known Gross Output/Factor Demand. The problem does not necessarily lie with pair-wise only absorption, which is at least internally consistent, but aggregating pair-wise only absorption matching to generate unrealistic ECAs.

We are able to derive the block diagonal elements of the intraindustry intraregional trade flows matrix in the form of Regional Use matrices, but not the off diagonal block elements. We may collapse the intraindustry dimension by way of industry input needs (rowsums) which is equivalent to regional Factor Demand, but we are still left with unknown intraregional trade flow components. That is to say, how much does each industry export to each other region (and conversely how much does each region import of each commodity)?

We can observe the boundary conditions of intraregional trade flows, holding Gross Output by region constant (and assuming goods are not merely imported for final consumption).

Lower Bound of Gross Exports by sector: rowSum(max(Regional Final Demand, 0)) - National Final Demand Upper Bound of Gross Exports by sector: National Factor Demand Lower Bound of Region specific Exports by sector: ???? Greatest Lower Bound of Region specific Exports by sector: min(max(Regional Final Demand, 0), max(-Regional Final Demand, 0)\[,r\]) for all r {min(NIS, NID_r) for all r} Upper Bound of Region specific Exports by sector: min(max(Regional Final Demand, 0)\[,r\], National Factor Demand - Regional Factor Demand\[,r\] ) for all r {min(NIS_r, RFD\_!r) for all r}

Lower Bound of Gross Imports by sector: ???? Upper Bound of Gross Imports by sector: National Factor Demand Lower Bound of Region specific Imports by sector: max(-Regional Final Demand, 0) {i.e., NID} Upper Bound of Region specific Imports by sector: Regional Factor Demand

Open Question: How do we derive quantities and locations of intraregional trade flows? Minimium? Maximium? Constant Proportionality? and How does spatial impedance and relative economic gravity scale these flows? (Should there ever be cross hauling under a spatial impedance regime?) (Should/How do we scale for heterogeneous populations and consumption preferences)

One specification of Constant Proportionality is to assume the National level ratio of Factor Demand to Gross Output holds at the region level and is constant. This factor ratio is used to scale Regional Gross Output to derive a "Factor Supply". What does a "Regional Factor Supply" mean economically? In practice what we have done is to redistribute the National Factor Demand (i.e., aggregate of regional factor demand) holding the level constant. We have not yet imposed the location of where any given regional industry will source/supply its factor "endowment".

For each sector we have a known Factor Demand vector and Factor Supply vector, which we can use to derive sector specific intraregional trade flows using biproportional scaling a.k.a RAS. Even given specific row and column sums (Factor Demand and Factor Supply vectors) the final intraregional trade flows are sensitive to starting conditions, a feature we can utilize to incorporate spatial impedance and heterogeneous population factors.

Now with just Regional Factor Demand and Regional Factor Supply we can use our existing methods to calculate Stacked Absorption Shares, Normalized Absorption Shares and Absorption Maximum Matching (after masking to prevent persistent self matching if imputing directly?). As such specific intraregional trade flows do not enter into the absorption/connectedness metrics, so what is gained by performing the RAS step?

How do we generate a Net Regional Factor Supply and Demand? Alt NID: max(Regional Factor Demand - Regional Factor Supply, 0)? Alt NIS: max(Regional Factor Supply - Regional Factor Demand , 0)? These specifications implicitly impose a no-cross hauling restriction in so much as a region will satisfy its own Factor Demand first and export any excess endowment to other regions.

What do you do with the RAS trade matrix to derive absorption/connectedness? What would an "ECA" look like under an imputed intraregional trade flow regime?\
i.e., we generate a region-by-region matrix of total trade value by aggregating each industry specific trade matrix, how does one rank the intraregional absorption to construct connectedness measures? Is it merely row-wise maximums again (absorption_maximum_match)? Do we impose any normalization? What would happen if industry sectors had non uniform aggregation weights? Industry specific trade flows opens the possibility to generate absorption/connectedness for only certain industries. Does the aggregate trade flows matrix (e.g., Trade Flow Agriculture + Trade Flow Mining + Trade Flow Manufacturing) permit us to use absorption_maximum_match directly? If so should we permit self matching? (It may not always be true that aggregate trade flow is hedonic)

Is Constant Proportionality of Supply consistent with the assumption that goods are not merely imported for direct final consumption? No

Note: In practice we only have regional Gross Industry Output, however, to apply the Constant Proportionality of Supply factor ratio method, we need to know regional Gross Commodity Output which is not the same. Is there a way to translate Industry Output into Commodity Output? Yes, Cx=q or Dq=x where C=(SupplyMatrix)(inv(hat(NationalIndustryOutput))) and D=(MakeMatrix)(inv(hat(NationalCommodityOutput)))

What if instead we used a ratio of NationalCommodityOutput to NationalIndustryOutput to scale regional IndustryOutput into regional CommodityOutput? (Only works if commodities == industries which is not necessarily true, in fact they can be totally independent)

Is Gross Output from the CBP and AgCensus commodity or industry output? Industry. What does it imply if "331314" is present in the "industry output" generated from CBP? "331314" is the only sector that is an industry at the detail level but not a commodity outside of the Used and Other Sector categories ("S00401" "S00402" "S00300" "S00900" "S00101" "S00201" "S00202") In the CBP 93 counties have at least one "331314" establishment, however, only "17031" has sufficient size to show up in the annual payroll estimates and accounts for under 5 percent of the national total. Do we need to start distributing some portion of the national aggregate across counties with suppression?

Are we accounting for the difference in Commodity Output and Industry Output in the empirical examples? In particular, is the technology of production matrix (direct requirements) appropriately generated, and the resulting "Factor Demand/ Final Demand in correct industry/commodity terms?

What are the consequences of using the commodity-by-industry B_matrix to generate "industry input" a.k.a Commodity Factor Demand versus using the industry-by-industry Direct Requirements matrix imputed from the industry-by-industry Total Requirements matrix (note that this process results nonsensical negative values which are forced to be zeros and assumes that industry and commodities are interchangeable)? What about using the BEA commodity-by-industry Direct Requirements directly? Note BEA Direct Requirements are only available for 2021 at the Sector and Summary level and 2007/2012 for Detail, however, Domestic Direct Requirements exist for all typical years.

Does it comport to have NID = pmax(CommodityFactorDemand - GrossIndustryOutput, 0) and NIS = pmax(GrossIndustryOutput - CommodityFactorDemand, 0)? No, Industries != Commodities, but it is what we have setup. Possible fix: use Cx=q or Dq=x to get GrossCommodityOutput from GrossIndustryOutput.

What is the economic reason for Constant Proportionality of Supply? Why would a region to import a commodity, especially if there are transportation costs, if that commodity is known to be available as part of Final Demand? What are the economic conditions that would cause final consumers to out compete industries for their primary inputs? For example, we know that the agriculture industry in Brown produces \$20 of Gross Output, which implies a Total agricultural Factor Demand of \$5.1 and \$14.9 of Final Demand. Under Constant Proportionality of Supply, the factor ratio of agriculture is 0.24, which implies a Total agricultural Factor Supply of \$4.8 meaning the agriculture industry in Brown will need at least \$0.3 of inputs. But in reality, using RAS, the agriculture industry in Brown is importing \$3.8 of total input value and exporting \$3.5 worth of agriculture commodities. Broadly speaking, the agriculture industry in Brown at a maximum could export up \$13.9 or as little as \$0 worth of commodities.

And conversely is true that the agriculture industry in Brown at a maximum could import at least the whole of its Factor Demand and as little as \$0.

We can just use a gravity specification directly to recover the location and quantity of any negative FinalDemands i.e., FactorDemands not satisfied by local endowments. For example, given Gross Industry Output of Albany (50 Agriculture, 0 Mining, and 35 Manufacturing) and a fixed technology of production, we can recover a Regional Use matrix. To satisfy the fixed Output we see the purchases of commodity i by industry j, as such the Albany Agriculture Industry must purchase 6.875 of Mining Commodity value, the Mining Industry must purchase 0 of Mining Commodity value, and the Manufacturing Industry must purchase 3.684212 of Mining Commodity value, for a total of 10.55921 Mining Commodity Factor Demand. However, Albany has no local Mining Industry, so it must acquire this input from either Brown or Cook or some mix of both. In a Gravity model frame work the interregional trade of is given by the the dollar flow of goods in county a to county b in the form of Z_ab(i) = Q_ab \* (x_a.(i) \* x\_.b(i))/(x_national(i)), where Q_ab is the impedance between the counties (e.g., 1/distance), x_a.(i) is the "supply pool" of i in county a, x\_.b(i) is the "demand pool" of i in county b, and x_national(i) is the "total production" in the system.

In our example, Brown has at a maximum 35.21053 of Mining to export and Cook has at a maximum 19.348687 of Mining to export. Note that the model inherently assumes that if a region needs an input and can produce that input it will use up all that local production before seeking imports. In other words, the available 35.21053 of Mining that Brown has to export already has its own input needs of 34.789466 accounted for similarly the available 19.348687 of Mining that Cook has to export already has its own input needs of 30.651313 accounted for. And the total available in the system is the sum of positive Mining Final Demands (i.e., NIS). Therefore Albany will import (10.55921 \* 35.21053)/54.55922 = 6.814529 from Brown and (10.55921 \* 19.348687)/54.55922 = 3.744681 from Cook. Unfortunately, the calculation breaks down if we wish to include an impedance factor.

What would the gravity look like if we permitted cross-hauling?

Can we derive a production possibilities frontier?

*notes* Do we need to calculate GDP across counties? Do we need a better way of describing the "excess" and "durth" of regions? What are the total factor cost incurred by each industry in the county to be able to satisfy total output? Is our CBP "output" actually output? How do (DirectRequirements)(IndustryOutput) and FactorDemand relate when DirectRequirements is ind-by-ind? If (DirectRequirements)(IndustryOutput)-IndustryOutput and IndustryOutput-(DirectRequirements)(IndustryOutput) are needs and excesses, then at the national level they should be zero? Do we want to instead describe the difference between final demand and intermediate inputs/outputs? Do we need to allow for cross hauling in the analysis, for the system to be closed? Can we try treating the regional model as just a big national model with a block diagonal direct requirements? How do we translate Industry Output into Commodity? Answer: with inv(Dmat) or Cmat How do we translate Value Added into Final Demand? How do we go from v to x to e to q to v to iU to Ui? What can location quotients offer? What can gravity models offer? Irrespective of cross hauling, is does what a place has available for "export" its Industry Output minus (industry) Factor Cost? No.

# Finding the problem

Approach: Supply/Use framework, DirectRequirements, TotalRequirements In theory all equivalent\* (only if supply is diagonal?) (issue if number of commodities != industries)

```{r}
## Economic sectors
Toy_Sectors <- c("Agriculture", 
                 "Mining",
                 "Manufacturing")
Toy_Industry_Sectors <- c("Agriculture", 
                          "Mining",
                          "Manufacturing")
Toy_Industry_Sectors
Toy_Commodity_Sectors <- c("Agriculture", 
                           "Mining",
                           "Manufacturing")
Toy_Commodity_Sectors
```

```{r}
## Supply Matrix in Dollars (cxi)
Toy_Supply_mat <- rbind(c(365, 0, 0),
                        c(1, 540, 0),
                        c(7, 30, 490))
rownames(Toy_Supply_mat) <- Toy_Commodity_Sectors
colnames(Toy_Supply_mat) <- Toy_Industry_Sectors
Toy_Supply_mat
```

```{r}
## Use Matrix in Dollars (cxi)
#Toy_Supply_mat %*% inv(diag(as.vector(Toy_Total_Industry_Output))) %*% Toy_Direct_mat %*% diag(as.vector(Toy_Total_Industry_Output))
Toy_Use_mat <- rbind(c(10, 0, 9),
                     c(11, 45, 20),
                     c(7, 15, 35))
rownames(Toy_Use_mat) <- Toy_Commodity_Sectors
colnames(Toy_Use_mat) <- Toy_Industry_Sectors
Toy_Use_mat
```

```{r}
# Check for any negative FinalDemand/ValueAdded, pass if TRUE
all(
colSums(Toy_Supply_mat)>colSums(Toy_Use_mat),
rowSums(Toy_Supply_mat)>rowSums(Toy_Use_mat)
)
```

```{r}
## B matrix (cxi)
## The commodity/industry parallel to the sector technical coefficients matrix
## column j represents the value of inputs of each commodity per dollar's worth of industry j's output
Toy_B_mat <- Toy_Use_mat %*% diag(1/colSums(Toy_Supply_mat))
rownames(Toy_B_mat) <- Toy_Commodity_Sectors
colnames(Toy_B_mat) <- Toy_Industry_Sectors
Toy_B_mat
```

```{r}
## D matrix (ixc)
## Industry Source of Commodity Outputs
## Denotes  fraction of total commodity j output that was produced by industry i
Toy_D_mat <- t(Toy_Supply_mat) %*% diag(1/rowSums(Toy_Supply_mat))
rownames(Toy_D_mat) <- Toy_Industry_Sectors
colnames(Toy_D_mat) <- Toy_Commodity_Sectors
Toy_D_mat
```

```{r}
## C matrix (cxi)
## Commodity Composition of Industry Outputs
## Denotes fraction of total industry i output that is in the form of commodity j
Toy_C_mat <- Toy_Supply_mat %*% diag(1/colSums(Toy_Supply_mat))
rownames(Toy_C_mat) <- Toy_Commodity_Sectors
colnames(Toy_C_mat) <- Toy_Industry_Sectors
Toy_C_mat
```

```{r}
## National "Factor Ratio"
## proportion of FinalDemand allocated to intermediate use
Toy_National_FactorRatio <- rowSums(Toy_Use_mat)/rowSums(Toy_Supply_mat)
Toy_National_FactorRatio
```

```{r}
## Regional places
Toy_Places <- c("Albany", 
                "Brown", 
                "Cook")
Toy_Places 
```

```{r}
## Regional distribution of production (rows sum to one) (ensures sum of regional industry output == national industry output) (ixr)
regdis <- rbind(c(.7, .2, .1),
                c(0, .6, .4),
                c(.1, .1, .8))
```

```{r}
# Check that Total Regional production equals National production, pass if TRUE
all(rowSums(regdis) == 1)
```

```{r}
## Regional Total Industry Output (ixr)
Toy_Regional_Industry_Output <- diag(colSums(Toy_Supply_mat)) %*% (regdis)
rownames(Toy_Regional_Industry_Output) <- Toy_Industry_Sectors
colnames(Toy_Regional_Industry_Output) <- Toy_Places
Toy_Regional_Industry_Output
```

```{r}
# what if there was suppression
Toy_Regional_Industry_Output[Toy_Regional_Industry_Output < 100] = 0
Toy_Regional_Industry_Output[Toy_Regional_Industry_Output < 50] = 0

```

```{r}
## Regional Factor Demand (cxr)
Toy_B_mat %*% Toy_Regional_Industry_Output
```

```{r}
# Check that Sum of Regional Factor Demand == National Factor Demand, by Commodity, pass if TRUE
all(
  rowSums(Toy_B_mat %*% Toy_Regional_Industry_Output) == rowSums(Toy_Use_mat)
    )
```

```{r}
## Regional Total Commodity Output (cxr)
Toy_C_mat %*% Toy_Regional_Industry_Output
```

```{r}
# Check that Sum of Regional Total Commodity Output == National Total Commodity Output, by Commodity, pass if TRUE
all(
  rowSums(Toy_C_mat %*% Toy_Regional_Industry_Output) == rowSums(Toy_Supply_mat)
    )
```

```{r}
# Check that Sum of Regional Commodity Output == Sum Regional Industry Output, pass if TRUE
sum(Toy_C_mat %*% Toy_Regional_Industry_Output) == sum(Toy_Regional_Industry_Output)
```

```{r}
## Regional "Factor Supply" (cxr)
diag(rowSums(Toy_Use_mat)/rowSums(Toy_Supply_mat)) %*% (Toy_C_mat %*% Toy_Regional_Industry_Output)
```

```{r}
# Check that Sum of Regional "Factor Supply" == Sum of Regional Factor Demand, by Commodity, pass if TRUE
all.equal(
  rowSums(diag(rowSums(Toy_Use_mat)/rowSums(Toy_Supply_mat)) %*% (Toy_C_mat %*% Toy_Regional_Industry_Output)),  
  as.numeric(rowSums(Toy_B_mat %*% Toy_Regional_Industry_Output))
  )
```

```{r}
## Check that RAS economic requirement supply == demand 

  
  Toy_FactorDemand <- Toy_B_mat %*% Toy_Regional_Industry_Output
  Toy_FactorSupply <- diag(rowSums(Toy_Use_mat)/rowSums(Toy_Supply_mat)) %*% (Toy_C_mat %*% Toy_Regional_Industry_Output)
  #with regionalized factor ratio
  Toy_FactorSupply <- diag(rowSums(Toy_FactorDemand)/rowSums((Toy_C_mat %*% Toy_Regional_Industry_Output))) %*% (Toy_C_mat %*% Toy_Regional_Industry_Output)
  rownames(Toy_FactorSupply) <- rownames(Toy_FactorDemand)
  
  
    sum_tol <- 0.001
for (i in 1:nrow(Toy_FactorDemand)){
  sum_dif <- abs(sum(Toy_FactorDemand[i,]) - sum(Toy_FactorSupply[i,])) / sum(Toy_FactorSupply[i,])
  print(sum_dif)
  sum_dif > sum_tol
}
  
  rtf <- ras_trade_lists(factor_supply = Toy_FactorSupply, factor_demand = Toy_FactorDemand, impedance_mat = Toy_Q)
  Toy_FactorSupply
  Toy_FactorDemand
  rtf
  
```

# Emperical calculations

If in sector/Z framework: intermediate inputs = i'Z and intermediate outputs = Zi. If in commodity/industry Use/Make framework: intermediate (industry) purchases = i'U and intermediate (commodity) sales = Ui

Note: Ag Census is "Market Value of Agricultural Products Sold Including Landlord's Share and Direct Sales" aka "Market Value of Agricultural Products Sold Including Food Marketing Practices and Value-Added Products"

"Market value of agricultural products sold. This category represents the gross market value before taxes and production expenses of all agricultural products sold or removed from the place in 2017 regardless of who received the payment. It is equivalent to total sales and it includes sales by the producers as well as the value of any shares received by partners, landlords, contractors, or others associated with the operation. It includes value of organic sales, direct sales and the value of commodities placed in the Commodity Credit Corporation (CCC) loan program. Market value of agricultural products sold does not include payments received for participation in other Federal farm programs. It does not include income from farm-related sources such as customwork and other agricultural services, or income from nonfarm sources. The value of crops sold in 2017 does not necessarily represent the sales from crops harvested in 2017. Data may include sales from crops produced in earlier years and may exclude some crops produced in 2017 but held in storage and not sold. For commodities such as sugarbeets and wool sold through a co-op that made payments in several installments, respondents were requested to report the total value received in 2017. The value of agricultural products sold was requested of all producers. If the producers failed to report this information, estimates were made based on the amount of crops harvested, livestock or poultry inventory, or number sold."

New labor share perspective: Output: From BLS: "gross value-added output" = "gross output minus intermediate inputs" "defined as total labor compensation over nominal GDP or gross value added" "The labor share is the nominal wage bill over nominal output or nominal GDP" "Nominal unit labor costs, are defined as the nominal wage bill over real output" Finally, note that all output and compensation data used to calculate the labor share are in current dollars.

Average Total Labor Share from BEA in 2012 is 0.558.

FRED puts total labor share at 0.59 and BLS puts labor share at 0.57 for the same time period.

Average CBP equivalent industry Labor Share from BEA is 0.56.

Total CBP non-farm Annual Payroll at the National level is \$5.414 Trillion.

Total BEA non-farm equivalent Employee Compensation is \$6.788 Trillion.

BEA non-farm equivalent employee compensation is \$1.374 Trillion greater than the CBP annual payroll or \~25% larger.

Total CBP derived non-farm GDP (ratio of CBP Annual Payroll to industry Labor Share from BEA) is \$9.586 Trillion.

Total CBP industry equivalent GDP from BEA is \$12.310 Trillion.

BEA non-farm equivalent GDP is \$2.724 Trillion greater than the CBP derived non-farm GDP or \~28% larger.

The labor share on average would need to decrease from 0.56 to 0.44 to be able to achieve the expected equivalent level of GDP using the CBP.

Note the current labor compensation component used to derive the Labor Share only includes employee compensation, leaving out proprietors' labor compensation, which makes up the other (smaller) portion of labor compensation. It is difficult to estimate because BEA has data only on proprietors' total income, which also includes proprietors' return to capital. ("proprietors" is taken to mean "unincorporated proprietors." Incorporated self-employed workers are technically employees of their own corporation). However, a larger labor compensation would mean a larger, not smaller Labor Share.

Out of curiosity, the expected BEA derived farm Labor Share is 0.26.

Total AgCensus farm sales for 2012 are \$394.644 Billion.

AgCensus industry equivalent Total Industry Output from BEA is \$412.926 Billion.

BEA farm equivalent Total Industry Output is \$18.282 Billion greater than the AgCensus farm sales or \~4.6% larger.

Note AgCensus does not include taxes or subsidies or account for inventory changes.

Total AgCensus farm sales adjusted for BEA farm equivalent industry Inventories, Taxes, and Subsidies is \$395.613 Billion.

Adjusting for Inventories, Taxes, and Subsidies, BEA farm equivalent Total Industry Output is \$969 Million greater than the AgCensus farm sales or \~0.2% larger.

!!! Note in the current model specification Ag output is appended to labor share adjusted CBP. However, the AgCensus farm sales are (approximately) Total Industry Output (i.e., intermediate and final production) whereas labor share adjusted CBP are GDP or Industry (Value Added) Output (i.e., only final production). Furthermore, this piecemeal metric enters the analysis as Total Industry Output (i.e., intermediate and final production) !!!

```{r}
detindname <- bea_io$get_naics_df() %>% filter(NAICS != "n.a.") %>% filter(NAICS != "NaN") %>% .$DETAIL %>% unique() %>% unlist()
detagnames <- rownames(as.data.frame(unlist(ag_output$get_farm_sales_by_bea_detail(strtoi(2012), "national"))))
detnonagnames <- setdiff(detindname, detagnames) 
detnonagnames <- detnonagnames[!detnonagnames %in% c("482000", "531HST", "814000", "491000")]
```

Total GDP from BEA

```{r}
TrueGDP <- (bea_io$get_use(strtoi(2012), "det")["VAPRO", "T001"] * 1000000)
TrueGDP
```

CBP equivalent industry GDP from BEA

```{r}
TruenonfarmGDP <- sum(bea_io$get_use(strtoi(2012), "det")["VAPRO",detnonagnames]) * 1000000
TruenonfarmGDP
```

AgCensus equivalent industry GDP from BEA

```{r}
TruefarmGDP <- sum(bea_io$get_use(strtoi(2012), "det")["VAPRO", detagnames]) *1000000
TruefarmGDP
```

Average Total Labor Share from BEA

```{r}
#LaborShare = bea_io$get_use(strtoi(2012), "det")["V00100", "T001"] / bea_io$get_use(strtoi(2012), "det")["VABAS", "T001"]
LaborShare <- mean(t((bea_io$get_use(strtoi(2012), "det")["V00100", detindname] / bea_io$get_use(strtoi(2012), "det")["VAPRO", detindname])))
LaborShare
```

Average CBP equivalent industry Labor Share from BEA

```{r}
nonfarmLaborShare <- mean(t((bea_io$get_use(strtoi(2012), "det")["V00100", detnonagnames] / bea_io$get_use(strtoi(2012), "det")["VAPRO", detnonagnames])))
nonfarmLaborShare
```

Average AgCensus equivalent industry Labor Share from BEA

```{r}
farmLaborShare <- mean(t((bea_io$get_use(strtoi(2012), "det")["V00100", detagnames] / bea_io$get_use(strtoi(2012), "det")["VAPRO", detagnames])))
farmLaborShare
```

Total Total Employee Compensation from BEA

```{r}
#TrueEmpComp = bea_io$get_use(strtoi(2012), "det")["V00100", "T001"] *1000000
TrueEmpComp <- sum(bea_io$get_use(strtoi(2012), "det")["V00100", detindname]) * 1000000
TrueEmpComp
```

Total CBP equivalent industry Employee Compensation from BEA

```{r}
TruenonfarmEmpComp = sum(bea_io$get_use(strtoi(2012), "det")["V00100", detnonagnames]) *1000000
TruenonfarmEmpComp
```

Total AgCensus equivalent industry Employee Compensation from BEA

```{r}
TruefarmEmpComp = sum(bea_io$get_use(strtoi(2012), "det")["V00100", detagnames]) *1000000
TruefarmEmpComp
```

Total AgCensus equivalent industry Subsidies from BEA

```{r}
TruefarmSubsidies <- sum(bea_io$get_use(strtoi(2012), "det")["T00SUB",detagnames][!is.na(bea_io$get_use(strtoi(2012), "det")["T00SUB",detagnames] )]) * 1000000
TruefarmSubsidies
```

Total AgCensus equivalent industry Inventories from BEA

```{r}
TruefarmInventories <- sum(bea_io$get_use(strtoi(2012), "det")[detagnames, "F03000"]) * 1000000
TruefarmInventories
```

Total AgCensus equivalent industry Taxes from BEA

```{r}
TruefarmTaxes <- sum(bea_io$get_use(strtoi(2012), "det")["T00OTOP",detagnames]) * 1000000
TruefarmTaxes
```

Total AgCensus equivalent industry Total Industry Output from BEA

```{r}
TruefarmTotalindOutput = sum(bea_io$get_use(strtoi(2012), "det")["T018",detagnames]) * 1000000
TruefarmTotalindOutput
```

Total AgCensus equivalent industry Total Industry Output plus Inventories less Taxes and Subsidies from BEA

```{r}
(TruefarmTotalindOutput - TruefarmTaxes + TruefarmInventories - TruefarmSubsidies) 
```

Total AgCensus farm sales

```{r}
farmTotalindOutput <- sum(as.data.frame(unlist(ag_output$get_farm_sales_by_bea_detail(strtoi(2012), "national") ) ) )
farmTotalindOutput
```

Total CBP Annual Payroll at the National level

```{r}
nonfarmPayroll = cbp$get_df("us", strtoi(2012))$ap[1] * 1000
nonfarmPayroll
```

CBP derived non-farm GDP i.e., Ratio of Total CBP Annual Payroll at the National level to Average CBP equivalent industry Labor Share from BEA

```{r}
nonfarmGDP = nonfarmPayroll / nonfarmLaborShare
nonfarmGDP
```

Difference of BEA farm Total Industry Output and AgCensus farm sales adjusted for BEA Inventories, Taxes, and Subsidies

```{r}
TruefarmTotalindOutput - (farmTotalindOutput - TruefarmInventories + TruefarmTaxes + TruefarmSubsidies)
```

Difference of BEA non-farm employee compensation and CBP Annual Payroll at the National level

```{r}
TruenonfarmEmpComp - nonfarmPayroll
```

Difference of BEA non-farm GDP and CBP derived GDP

```{r}
TruenonfarmGDP - nonfarmGDP
```

Labor Share needed for BEA non-farm GDP and CBP derived GDP to be equal

```{r}
nonfarmPayroll / TruenonfarmGDP
```

# Derivation

**Production Specification**

Assume that the economy can be categorized into $n$ sectors and denote the total output (production) of sector $i$, as $x_{i}$. In addition, let sales to purchasers who are external or *exogenous* to the productive "industry" sectors e.g., households, government, capital investments, and foreign trade, be referred to as *final demand*. Denote total final demand for sector $i$'s product, as $f_{i}$. The accounting equation for the way sector $i$ distributes its product to other sectors and to final demand is given by:

```{=tex}
\begin{equation}
x_{i} = z_{i1} + ... + z_{ij} + ... + z_{in} + f_{i} = \sum^{n}_{j=1} z_{ij} + f_{i}
\end{equation}
```
The $z_{ij}$ terms represent monetary transactions between pairs of sectors or *interindustry* sales (or *intermediate* sales) by sector $i$ to all sectors $j$ (including itself, when $j = i$). This single equation represents sector $i$'s *output*. Similarly, there are output equations for each of the $n$ *endogenous* sectors in the economy.

```{=tex}
\begin{align*}
& x_{1} = z_{11} + ... + z_{1j} + ... + z_{1n} + f_{1} \\
& \vdots \\
& x_{i} = z_{i1} + ... + z_{ij} + ... + z_{in} + f_{i} \\
& \vdots \\
& x_{n} = z_{n1} + ... + z_{nj} + ... + z_{nn} + f_{n} \\
\end{align*}
```
The total output, interindustry sales, and final demand are given by:

```{=tex}
\begin{equation}
\mathbf{x} = 
  \begin{bmatrix} 
  x_{1} \\ 
  \vdots \\ 
  x_{n} \\ 
  \end{bmatrix}, \; \;
\mathbf{Z} = 
  \begin{bmatrix}
    z_{11} & \dots & z_{1n}\\
    \vdots & \ddots & \vdots\\
    z_{n1} & \dots & z_{nn} \\
  \end{bmatrix}
, \; \text{  and } \; \;
\mathbf{f} = 
  \begin{bmatrix}
    f_{1} \\
    \vdots \\
    f_{n} \\
  \end{bmatrix}
\end{equation}
```
with the output equations for distribution of each sector's sales summarized in matrix notation as: $$\mathbf{x} = \mathbf{Zi} + \mathbf{f}$$

where $\mathbf{i}$ represent a column vector of 1's. (Postmultiplication of a matrix by $\mathbf{i}$ creates a column vector whose elements are the row sums of the matrix. Similarly, premultiplication of a matrix by $\mathbf{i'}$ creates a row vector whose elements are the column sums of the matrix.)

The magnitudes of the interindustry flows can be recorded in a table, with sectors of origin (producers) listed on the left and the same sectors, now destinations (purchasers), listed across the top. From the column point of view, these show each sector's inputs; from the row point of view the figures are each sector's outputs; hence the name *input--output* table.

```{=tex}
\begin{equation}
\begin{matrix}
&  & 1 & \dots & j & \dots & n \\ 
\hline
1 & & z_{11} & \dots & z_{1j} & \dots & z_{1n} \\ 
\vdots & & \vdots &  & \vdots &  & \vdots \\ 
i & & z_{i1} & \dots & z_{ij} & \dots & z_{in} \\ 
\vdots & & \vdots &  & \vdots &  & \vdots \\ 
n & & z_{n1} & \dots & z_{nj} & \dots & z_{nn} \\ 
\hline
\end{matrix}
\end{equation}
```
**Direct Requirements/Technical Coefficients**

In input--output studies, a fundamental assumption is that the interindustry flows from $i$ to $j$ depend entirely on the total output of sector $j$ for that same time period. The quantity of the output of sector $i$ absorbed by sector $j$ per unit of its total output is identified as $a_{ij}$ and called the *input coefficient* of sector $i$'s product in sector $j$.

$$a_{ij} = z_{ij} / x_{j}$$

A complete table of input coefficients is called a *structural matrix*, given by: $\mathbf{A} = \left[a_{ij}\right]$. This ratio is also called the *technical coefficient*; the terms *input--output coefficient* and *direct input coefficient* are also used. This ratio specifies the required amount of industry $i$'s commodity used to produce of one unit of industry $j$'s commodity, or how much of the $i$th commodity is used for the production of each unit of the $j$th commodity. Therefore the $n \times n$ matrix of technical coefficients can be represented as

$$\mathbf{A} = \mathbf{Z\hat{x}}^{-1}$$ where the "hat" over a vector denotes a diagonal matrix with the elements of the vector along the main diagonal i.e.,

```{=tex}
\begin{equation}
\mathbf{\hat{x}^{-1}} = 
  \begin{bmatrix}
    \dfrac{1}{x_{1}} & \dots & 0\\
    \vdots & \ddots & \vdots\\
    0 & \dots & \dfrac{1}{x_{n}} \\
  \end{bmatrix}
\end{equation}
```
and the inverse must satisfy the usual requirement $(\mathbf{\hat{x}})(\mathbf{\hat{x}})^{-1} = \mathbf{I}$.

Note we must assume that a sector uses inputs in *fixed proportions*. The form of the production functions inherent to this system are isoquant "curves" that exhibit constant output. Such Leontief production functions require inputs in fixed proportions where a fixed amount of each input is required to produce one unit of output. Given a set of fixed technical coefficients, the accounting equations for the distribution of total output to other sectors and to final demand can be rewritten as

```{=tex}
\begin{align*}
& x_{1} = a_{11}x_{1} + ... + a_{1j}x_{i} + ... + a_{1n}x_{n} + f_{1} \\
& \vdots \\
& x_{i} = a_{i1}x_{1} + ... + a_{ij}x_{i} + ... + a_{in}x_{n} + f_{i} \\
& \vdots \\
& x_{n} = a_{n1}x_{1} + ... + a_{nj}x_{i} + ... + a_{nn}x_{n} + f_{n} \\
\end{align*}
```
Or in matrix notation as

$$\mathbf{x} = \mathbf{Ax} + \mathbf{f}$$

These equations serve to make explicit the dependence of interindustry flows on the total outputs of each sector.

**Total Requirements/Leontief Inverse**

Rearranging the production equation gives, $\left(\mathbf{I} - \mathbf{A}\right)\mathbf{x} = \mathbf{f}$. And if $\left(\mathbf{I} - \mathbf{A}\right)$ is non-singular, i.e., $\left(\mathbf{I} - \mathbf{A}\right)^{-1}$ exists, then the equation is further refined by

$$\mathbf{x} = \left(\mathbf{I} - \mathbf{A}\right)^{-1}\mathbf{f}  \;\;\text{ or }\;\; \mathbf{x} = \mathbf{Lf}$$ where $\left(\mathbf{I} - \mathbf{A}\right)^{-1} = \mathbf{L} = \left[l_{ij}\right]$ is known as the *Leontief inverse* or the *total requirements matrix*.

**Industry and Commodity Specification**

The underlying data sets from which input--output models are constructed consist of industries that use commodities to make commodities. Using a "commodity--industry" format, we are able to account for the fact that an industry may produce more than one commodity. As such, we can distinguish an industry from its commodity or commodities and a commodity from its industry or industries. In some instances a commodity may not even be produced by any industry (foreign import) or a commodity may be produced but is not used by any industry (personal consumption, private fixed investments, change in inventories, foreign exports, and government consumption/investment) and even some industries may not produce a commodity at all (customs duties).

In national accounting parlance, the commodity-by-industry transactions tables are referred to as *Make* or *Supply*, and *Use* tables. In order to highlight the differentiation between commodities and industries, assume that the commodity index, $i$, runs from 1 to $m$ and the industry index, $j$, runs from 1 to $n$.

**Use and Make Tables**

The "industries use commodities" part of the "industries use commodities to make commodities" observation is quantified in the Use matrix with dimensions of commodities (rows) by industries (columns) $$\underset{(c \times i)}{\mathbf{U}} = [u_{ij}]$$ where $u_{ij}$ is the value of purchases of commodity $i$ by industry $j$.

The parallel to the ordinary technical coefficient, $a_{ij}$, is given by $$b_{ij} = u_{ij}/x_{j} \;\;\text{ or }\;\; \mathbf{B} = \mathbf{U\hat{x}}^{-1}$$ where $\mathbf{x}$ is total industry output. The dimensions of $\mathbf{B}$ are commodities-by-industries. The accounting identities are $$\mathbf{q} = \mathbf{Ui} + \mathbf{e} \;\;\text{ and }\;\; \mathbf{x'} = \mathbf{i'U} + \mathbf{v'}$$ where $\mathbf{q}$ is the vector of total commodity outputs, $\mathbf{e}$ is the vector of commodity final demands, $\mathbf{v'}$ is the (row) vector of value-added industry inputs, and $\mathbf{x}$ is the vector of total industry outputs.

The Make table shows the production of commodities by industries,

$$\underset{(i \times c)}{\mathbf{V}} = [v_{ij}]$$ where $v_{ij}$ shows the value of the output of commodity $j$ that is produced by industry $i$. The Make matrix row sums comprise the vector of total industry output and the column sums comprise total commodity output given by:

$$\mathbf{x} = \mathbf{Vi} \;\;\text{ and }\;\;  \mathbf{q'} = \mathbf{i'V} \;\;\text{ or }\;\;\mathbf{q} = \mathbf{V'i}$$

The Supply table is merely the transpose of the Make table given by: $$\underset{(c \times i)}{\mathbf{V^{'}}} = [v_{ij}]$$ The commodity--industry approach employs the coefficient matrix, $\mathbf{B}$, much in the same way as the sector model $\mathbf{A}$ matrix of *technical* coefficients, giving $$\mathbf{q} = \mathbf{Bx} + \mathbf{e}$$ akin to the ordinary specification $$\mathbf{x} = \mathbf{Ax} + \mathbf{f}$$ However, unlike the ordinary specification one cannot generate a total requirements matrix (Leontief inverse) because of the presence of both commodity output ($\mathbf{q}$) on the left-hand side and industry output ($\mathbf{x}$) on the right-hand side. One solution is to find an expression transforming industry outputs, $\mathbf{x}$, to commodity outputs, $\mathbf{q}$ -- or, alternatively, to transform commodity outputs (and commodity final demand, $\mathbf{e}$) into industry terms. The data needed for such transformations are to be found in the Make matrix, whose row sums are industry outputs and whose column sums are commodity outputs. Where the direct requirements table shows the amount of a commodity that is required by an industry to produce a dollar of the industry's output. And the total requirements tables show the relationship between final uses and gross output.

**Output Proportions**

Define $d_{ij} = v_{ij}/q_{j}$, so that $d_{ij}$ denotes the fraction of total commodity $j$ output that was produced by industry $i$. Therefore a matrix of *commodity output proportions* is given by $$\underset{(i \times c)}{\mathbf{D}} = [d_{ij}] \;\;\text{ or }\;\;  \mathbf{D} = \mathbf{V\hat{q}}^{-1}$$ $\mathbf{D}$ is also called the *market shares* matrix. By definition, each column sum in $\mathbf{D}$ is unity.

Define $c_{ij} = v_{ij}/x_{i}$, so that $c_{ij}$ denotes the fraction of total industry $i$ output that is in the form of commodity $j$. Therefore a matrix of *industry output proportions* is given by $$\underset{(c \times i)}{\mathbf{C}} = [c_{ij}] \;\;\text{ or }\;\; \mathbf{C} = \mathbf{V'\hat{x}}^{-1}$$

$\mathbf{C}$ is also called the *product mix* matrix or the *commodity mix* matrix. Note $\mathbf{V'}$ is also referred to as the *supply* matrix. By definition, each column sum in $\mathbf{C}$ is unity.

These output matrices offer two possible sources from which to generate the technology and total requirement matrices from the Make/Use tables. There are three variations of total requirements tables. The commodity-by-commodity total requirements table shows the production required, both directly and indirectly, of the commodity at the beginning of each row per dollar of delivery to final use of the commodity at the top of the column. The industry-by-commodity total requirements table shows the production required, both directly and indirectly, from the industry at the beginning of the row per dollar of delivery to final use of the commodity at the top of the column. The industry-by-industry total requirements table shows the production required, both directly and indirectly, from the industry at the beginning of the row per dollar of delivery to final use of the industry at the top of the column.

**Total Requirements**

Let the *Direct Requirements Matrices* be given by

```{=tex}
\begin{equation}
\underset{(i \times i)}{\mathbf{A}_{C}}  = \mathbf{C}^{-1}\mathbf{B} \; \text{, } \; \;
%
\underset{(i \times i)}{\mathbf{A}_{I}}  = \mathbf{D}\mathbf{B} \; \text{, } \; \;
%
\underset{(c \times c)}{\mathbf{A}_{C}}  = \mathbf{B}\mathbf{C}^{-1} \; \text{, and } \; \;
%
\underset{(c \times c)}{\mathbf{A}_{I}}  = \mathbf{B}\mathbf{D}
\end{equation}
```
**Technology of Production Functions**

*Commodity-Demand Driven Models*

Using $\mathbf{D}$, one can derive the *commodity-by-commodity total requirements matrix*, connecting commodity final demand to commodity output by: $$\mathbf{q} = \left(\mathbf{I} - \mathbf{BD}\right)^{-1}\mathbf{e}$$ and the *industry-by-commodity total requirements matrix*, connecting commodity final demand to industry output by: $$\mathbf{x} = [\mathbf{D}\left(\mathbf{I} - \mathbf{BD}\right)^{-1}]\mathbf{e}$$ Using $\mathbf{C}$, one can derive the *commodity-by-commodity total requirements matrix*, connecting commodity final demand to commodity output by: $$\mathbf{q} = (\mathbf{I} - \mathbf{BC}^{-1})^{-1}\mathbf{e}$$ and the *industry-by-commodity total requirements matrix*, connecting commodity final demand to industry output by: $$\mathbf{x} = [\mathbf{C}^{-1}(\mathbf{I} - \mathbf{BC}^{-1})^{-1}]\mathbf{e}$$ *Industry-Demand Driven Models*

It is also possible to derive total requirements matrices for *industry-demand driven* models, replacing $\mathbf{e}$ by an equivalent expression involving $\mathbf{f}$ in appropriate equations. Using $\mathbf{D}$, one can derive the *industry-by-industry total requirements matrix*, connecting industry final demand to industry output by: $$\mathbf{q} = \left(\mathbf{I} - \mathbf{DB}\right)^{-1}\mathbf{f}$$ and the *industry-by-commodity total requirements matrix*, connecting commodity final demand to industry output by: $$\mathbf{x} = [\mathbf{D}^{-1}\left(\mathbf{I} - \mathbf{DB}\right)^{-1}]\mathbf{f}$$ Using $\mathbf{C}$, one can derive the *commodity-by-commodity total requirements matrix*, connecting commodity final demand to commodity output by: $$\mathbf{q} = ((\mathbf{I} - \mathbf{C}^{-1} \mathbf{B})^{-1})^{-1}\mathbf{f}$$ and the *industry-by-commodity total requirements matrix*, connecting commodity final demand to industry output by: $$\mathbf{x} = [\mathbf{C}(\mathbf{I} - \mathbf{C}^{-1}\mathbf{B})^{-1}]\mathbf{f}$$

**Regional Specification**

Thus far the economy has been specified at the national level, without any regional heterogeneity. Although the national level coefficients are averages of data from individual producers in specific regions, the structure of production in a particular region may be identical to or it may differ from the national level tables. In addition, the smaller the spatio-economic scope the more dependent that economy is on trade with "outside" areas -- transactions that cross the region's borders -- both for sales of regional outputs and purchases of inputs needed for production.

Let superscript $r$ designate "region $r$" in the same way that subscript $i$ denotes "sector $i$." Thus, just as $X_{i}$ denotes the gross output of sector $i$, let $\mathbf{x^{r}} = [x^{r}_{i}]$ denote the vector of gross output of sectors in region $r$. Similarly, $\mathbf{f^{r}} = [f^{r}_{i}]$ represents the vector of exogenous demand for goods made in region $r$.

One problem we face empirically is that only a national technical coefficients matrix, $\mathbf{A}$, is readily available. To start, we would like to have a matrix showing inputs from firms *in the region* to production *in that region*. Denote this matrix by $\mathbf{A^{rr}} = [a^{rr}_{ij}]$, where $a^{rr}_{ij}$ is the amount of input from sector $i$ in $r$ per dollar's worth of output of sector $j$ in $r$.

For now, we assume that local producers use the same production recipes as the national coefficients table, meaning that the *technology* of production in each sector in region $r$ is the same as in the nation as a whole.

Direct requirements table: The commodity-by-industry direct requirements table is derived from the use table by relating commodity inputs used by an industry to the industry's output. The values in this table, referred to as "direct requirements coefficients," are in ratio format and show the dollar amount of a commodity required directly by an industry to produce a dollar of the industry's output.

Final uses: The consumption of the goods and services that are produced and distributed in the economy. In the I-O accounts, final-use transactions consist of the transactions that make up the final-expenditure components of GDP: Personal consumption expenditures; private fixed investment; change in private inventories; exports of goods and services; imports of goods and services; and Federal, state, and local government consumption expenditures and gross investment (including investment by government enterprises).

Indirect requirements coefficients: Ratios that show the production required of an industry and of all other industries to meet that industry's initial demand for production. The coefficient can be calculated as the total requirements matrix less the identity matrix less the direct requirements matrix.

Input coefficient: The dollar value of a commodity required directly by an industry to produce a dollar of output. It is also referred to as the direct requirement coefficient.

Intermediate inputs: Purchases of goods and services---such as energy, materials, and purchased services---that are used for the production of other goods and services rather than for final consumption. These inputs are sometimes referred to as current-account expenditures. They do not include any capital-account purchases nor do they include the inputs from the primary factors of production (capital and labor) that are components of value added.

Leontief matrix: The Leontief "A" matrix is a direct requirements table calculated from an industry-by-industry transactions table. The "I - A" matrix (where I is an identity matrix with ones in the diagonal cells and zeroes in other cells) can be inverted to calculate the inverse ((I - A)-1 ) or total requirements table. The elements of the inverse enable one to estimate both the direct and indirect impacts of a change in final uses.

Make table: Matrix that shows the value in producers' prices of each commodity produced by each industry. The entries in a row represent the dollar value of commodities produced by the industry at the beginning of the row. The entries in a column represent the dollar value of production by each industry of the commodity at the top of the column. It is one of the two primary tables in the I-O accounts. The make table, together with the use table, is used to derive the I-O total requirements tables.

Output requirements: Derived from the I-O total requirements tables, the output requirements show the amount of output required to satisfy a given level of final-use expenditures. For the commodity-by-commodity total requirements table, it is the production required both directly and indirectly of the commodity at the beginning of each row per dollar of delivery to final use of the commodity at the top of the column. For the industry-bycommodity total requirements table, it is the industry output required to deliver a dollar of a commodity to final users. For the industry-byindustry total requirements table, it is the industry output required to deliver a dollar of industry output to final users.

Requirements tables: There are four I-O requirements tables: Commodity-by-industry direct requirements, commodity-by-commodity total requirements, industry-by-commodity total requirements, and industry-by-industry total requirements.

Total requirements coefficients: I-O coefficients that estimate overall production required to produce a dollar of output. These coefficients (expressed as per dollar of output delivered to final demand) reflect (a) the initial final demand for the output of a given industry or commodity, and (b) both direct and indirect requirements resulting from the initial demand.

Total requirements tables: Three I-O tables showing the output required to meet a given level of final use. The three tables are the commodity-by-commodity total requirements table, the industry-by-commodity total requirements table, and the industry-by-industry total requirements table. All three tables are calculated from the supplementary make and use tables.

Use table: Matrix that shows the consumption of commodities by each industry or final user. The entries in a row represent the dollar value of the commodity consumed by each industry or final user. The total output of each commodity is the sum of all intermediate uses of the commodity by industries and all sales to final users, or the sum of the row entries. The entries in a column represent the dollar value of each commodity and value-added component used by the industry. The total output of each industry is the sum of all intermediate uses of all commodities and value added, or the sum of the column entries. For the economy as a whole, the total of all final uses of commodities equals the sum of all value added by all industries, or GDP. Use tables are produced for industries both before redefinitions and after redefinitions. It is one of the two primary tables in the I-O accounts. The use table, together with the make table, is used to derive the I-O total requirements tables.

Value added The difference between an industry's or an establishment's total output and the cost of it's intermediate inputs. It equals gross output (sales or receipts and other operating income, plus inventory change) minus intermediate inputs (consumption of goods and services purchased from other industries or imported). Value added consists of compensation of employees, taxes on production and imports less subsidies (formerly indirect business taxes and nontax payments), and gross operating surplus (formerly "other value added").

Homogeneity principle One of the three fundamental principles underlying the I-O accounts. Under this principle, each industry's output is produced with a unique set of inputs or a unique production function. The other two principles are consistency and proportionality

By definition, we know that A is a non-negative matrix with aij ≥0 for all i and j. (This characteristic is often written as A≥0, where it is understood that not all aij = 0.)10 The sum of the elements in the jth column of Aindicates the dollars' worth of inputs from other sectors that are used in making a dollar's worth of output of sector j. In an open model, given the economically reasonable assumption that each sector uses some inputs from the payments sector (labor, other value added, etc.), then each of these column sums will be less than one (  n i=1 aij \<1 for all j). (We will see below, in section 2.6, that this column sum condition need not apply to tables based on physical, not monetary, measures of transactions and outputs.) For input--output coefficients matrices with these two characteristics -- aij ≥0 and  n i=1 aij \<1 for all j -- it is possible to approximate the gross output vector x associated with any final demand vector f without finding (I − A) −1.
:::
