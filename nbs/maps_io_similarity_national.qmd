---
title: "MoreMaps"
author: "Austin Sandler"
date: "5/20/2022"
format:
  html:
    self-contained: false
    page-layout: full
    code-fold: true
    code-tools: true
    code_download: yes
    latex_engine: pdflatex
editor: visual
---

::: panel-tabset

This R Quarto document is the first attempt at mapping the various topological similarity index relationships at the national level. 


### RStartup

<details>

<summary>

Possible Warnings

</summary>

```{r packages and libraries}
# Download, Install, and Add R packages as necessary.

# List packages needed for this exercise
packages <- c("dlm",
              "DT",
              "geosphere",
              "knitr",
              "magrittr",
              "Matrix",
              "spdep",
              "tidyverse",
              "tmap",
              "tmaptools")

# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages], dependencies = TRUE)
}

# Load packages
invisible(lapply(packages, library, character.only = TRUE))

```

</details>

`r paste0("Date: ",  Sys.Date())`

`r kable((.packages()), col.names = "R Packages")`

`r paste0("Project directory: ",  getwd())`

```{r}
## Load previously generated files
load(file = "../data/Data.RData")

## Choose Sector level (1) or Summary level (2) or Detail level (3) 
lvl = 3

tmap_mode("view")

```

### Maps

```{r}
##Match rural to mid

rural <- rownames(Q_mat[[lvl]])[rownames(Q_mat[[lvl]]) %in% filter(TIGER_RUCC, H3==3)$place ]
non_rural <- rownames(Q_mat[[lvl]])[rownames(Q_mat[[lvl]]) %in% filter(TIGER_RUCC, H3!=3)$place ]
primary <- rownames(Q_mat[[lvl]])[rownames(Q_mat[[lvl]]) %in% filter(TIGER_RUCC, H3!=0)$place ]


Sim <- Sim_mat_exp_rel[[lvl]][rural, primary] / Q_mat[[lvl]][rural, primary] 

RowMin <- cbind(place = rownames(Sim), match = colnames(Sim)[unlist(apply(Sim, 1, which.min))])

RowMin <-  rbind(RowMin, cbind(non_rural, non_rural))

table(RowMin[,"match"])

TIGER_RUCC_h1m <- inner_join(TIGER_RUCC, RowMin, by = "place", copy = TRUE)

ggplot(  filter(TIGER_RUCC_h1m, STATEFP=="55")) +
  geom_sf(aes(fill = match), color = NA) +
  coord_sf() +
  theme_void() +
  labs(title = "              First Order Similarity Matching",
       subtitle = "              Simple Similarity Index",
       fill = "Regional Cluster") +
       scale_fill_discrete(labels = (TIGER_RUCC_h1m  %>% filter(place %in% unique(TIGER_RUCC_h1m$match) ) %>% pull(County_Name)) )

# 
# H_match <- sparseMatrix(
#   i = match(rownames(Sim), rural), 
#   j = match(c(colnames(Sim)[unlist(apply(Sim, 1, which.min))]), primary),  
#   x = 1L,
#   dims = c(nrow(Sim), ncol(Sim)),
#   dimnames = list(rural, primary)
# ) %>% as.matrix()
# 

  
TIGER_RUCC %>% dplyr::filter(STATEFP!="15" & STATEFP!="02" ) %>% 
  tm_shape() +
  tm_fill(col = "H3",  
          title = "RUCC", 
          id = "NAMELSAD", 
          palette = "inferno", 
          n = 4, 
          contrast = c(.35, 1), 
          style = "fixed", 
          breaks = c(1, 2, 3, 4), 
          labels = c("1", "2", "3")
          )

```

### New

```{r}

TIGER_RUCC %>% filter(STATEFP!="15" & STATEFP!="02" & RUCC_2013==9) %>% 
  tm_shape() +
  tm_fill(col = "RUCC_2013",  
          title = "RUCC", 
          id = "NAMELSAD", 
          palette = "inferno", 
          )

```

```{r}

rural <- rownames(Q_mat[[lvl]])[rownames(Q_mat[[lvl]]) %in% filter(TIGER_RUCC, H3==3 & STATEFP!="15" & STATEFP!="02")$place ]
non_rural <- rownames(Q_mat[[lvl]])[rownames(Q_mat[[lvl]]) %in% filter(TIGER_RUCC, H3!=3 & STATEFP!="15" & STATEFP!="02")$place ]
primary <- rownames(Q_mat[[lvl]])[rownames(Q_mat[[lvl]]) %in% filter(TIGER_RUCC, H3!=0 & STATEFP!="15" & STATEFP!="02")$place ]


Sim <- Sim_mat_exp_rel[[lvl]][rural, primary] / Q_mat[[lvl]][rural, primary] 


RowMin <-  cbind(place = rownames(Sim), match = colnames(Sim)[unlist(apply(Sim, 1, which.min))])

#RowMin <-  rbind(RowMin, cbind(non_rural, non_rural))

table(RowMin[,"match"])


TIGER_RUCC_h1m <- inner_join(TIGER_RUCC, RowMin, by = "place", copy = TRUE) 
TIGER_RUCC_h1m %<>% mutate(match_name = with(TIGER_RUCC_h1m, County_Name[match(match, place)]), .after = match)
clust_name <- unique(TIGER_RUCC_h1m$match_name)


  tmap_mode("view")
tmap_options(max.categories = length(unique(TIGER_RUCC_h1m$match))) 
TIGER_RUCC_h1m %>% 
  tm_shape() +
  tm_fill(col = "match",
          title = "Regional Cluster", 
          id = "NAMELSAD", 
          palette = "Dark2"
          ) +
  tm_borders(lwd = .5)        
  


```

```{r}


rural <- rownames(Q_mat[[lvl]])[rownames(Q_mat[[lvl]]) %in% filter(TIGER_RUCC, H3==3 & STATEFP!="15" & STATEFP!="02")$place ]

primary <- rownames(Q_mat[[lvl]])[rownames(Q_mat[[lvl]]) %in% filter(TIGER_RUCC, H3!=1 & STATEFP!="15" & STATEFP!="02")$place ]



Sim <- Sim_mat[[lvl]][rural, primary] / Q_mat[[lvl]][rural, primary] 


RowMin <-  cbind(place = rownames(Sim), match = colnames(Sim)[unlist(apply(Sim, 1, which.min))])

#RowMin <-  rbind(RowMin, cbind(non_rural, non_rural))



TIGER_RUCC_h1m <- inner_join(TIGER_RUCC, RowMin, by = "place", copy = TRUE) 
TIGER_RUCC_h1m %<>% mutate(match_name = with(TIGER_RUCC_h1m, County_Name[match(match, place)]), .after = match)
clust_name <- unique(TIGER_RUCC_h1m$match_name)


  tmap_mode("view")
tmap_options(max.categories = length(unique(TIGER_RUCC_h1m$match))) 
TIGER_RUCC_h1m %>% 
  tm_shape() +
  tm_fill(col = "match",
          title = "Regional Cluster", 
          id = "NAMELSAD", 
          palette = "Dark2"
          ) +
  tm_borders(lwd = .5)        
  


```

```{r}


rural <- rownames(Q_mat[[lvl]])[rownames(Q_mat[[lvl]]) %in% filter(TIGER_RUCC, H3==3 & STATEFP!="15" & STATEFP!="02")$place ]
non_rural <- rownames(Q_mat[[lvl]])[rownames(Q_mat[[lvl]]) %in% filter(TIGER_RUCC, H3!=1 & STATEFP!="15" & STATEFP!="02")$place ]
primary <- rownames(Q_mat[[lvl]])[rownames(Q_mat[[lvl]]) %in% filter(TIGER_RUCC, H3==1 & STATEFP!="15" & STATEFP!="02")$place ]


Sim <- Sim_mat[[lvl]][rural, primary] / Q_mat[[lvl]][rural, primary] 


H_match <- sparseMatrix(
  i = match(rownames(Sim), rural),
  j = match(c(colnames(Sim)[unlist(apply(Sim, 1, which.min))]), primary),
  x = 1L,
  dims = c(nrow(Sim), ncol(Sim)),
  dimnames = list(rural, primary)
) %>% as.matrix()

Xpay_mat_H1 <- Total_mat

Xpay_mat_H1[[lvl]] <- (Xpay_mat[[lvl]][, rural] %*% H_match) + Xpay_mat[[lvl]][, colnames(H_match)]


Input_mat_H1 <- Total_mat
for (l in 1:length(Total_mat)){
  Input_mat_H1[[l]] <- (Direct_mat[[l]]  %*%  Xpay_mat_H1[[l]])
}


Sim_mat_H1  <- Total_mat
for (l in 1:length(Total_mat)){
  Sim_mat_H1[[l]] <-  matrix(0, nrow = ncol(Xpay_mat_H1[[l]]), ncol = ncol(Xpay_mat_H1[[l]]))
  
  for (i in 1:ncol(Xpay_mat_H1[[l]])){
    for (j in 1:ncol(Xpay_mat_H1[[l]])){
      Sim_mat_H1[[l]][i,j]  <- norm((Input_mat_H1[[l]][,i] - (Xpay_mat_H1[[l]][,j])), type = "2")
    }
  }
  
  rownames(Sim_mat_H1[[l]]) = colnames(Sim_mat_H1[[l]]) <- colnames(Input_mat_H1[[l]])
}


```

### Rural and Non

Map and match allelse into Metro - Counties in metro areas of 1 million population or more (RUCC 1)

```{r}

rural <- rownames(Q_mat[[lvl]])[rownames(Q_mat[[lvl]]) %in% intersect( filter(TIGERData, STATEFP!="15" & STATEFP!="02")$place, filter(RUCCData, RUCC_2013 != 1)$place) ]
primary <- rownames(Q_mat[[lvl]])[rownames(Q_mat[[lvl]]) %in% intersect( filter(TIGERData, STATEFP!="15" & STATEFP!="02")$place, filter(RUCCData, RUCC_2013 == 1)$place) ]

```

"Spatial Simple Similarity Index": $\Vert \mathbf{Ax^{r}} - \mathbf{x^{s}} \Vert_{2} ~ \forall ~ r,s \in l$

```{r}
Sim <- Sim_mat[[lvl]][rural, primary] / Q_mat[[lvl]][rural, primary]

RowMin <-  cbind(place = rownames(Sim), match = colnames(Sim)[unlist(apply(Sim, 1, which.min))])
RowMin <-  rbind(RowMin, cbind(primary, primary))


TIGER_RUCC_h1m <- inner_join(TIGER_RUCC, RowMin, by = "place", copy = TRUE) 
TIGER_RUCC_h1m %<>% mutate(match_name = with(TIGER_RUCC_h1m, County_Name[match(match, place)]), .after = match)
clust_name <- unique(TIGER_RUCC_h1m$match_name)

length(unique(TIGER_RUCC_h1m$match))

tmap_options(max.categories = length(unique(TIGER_RUCC_h1m$match))) 
TIGER_RUCC_h1m %>% 
  tm_shape() +
  tm_fill(col = "match",
          title = "Regional Cluster", 
          id = "NAMELSAD", 
          palette = "Dark2"
          ) +
  tm_borders(lwd = .5)   



```

"Spatial Relative Similarity Index": $\Vert \mathbf{Ax^{r}}(\mathbf{iAx^{r}})^{-1} - \mathbf{x^{s}}(\mathbf{ix^{s}})^{-1} \Vert_{2} ~ \forall ~ r,s \in l$

```{r}
Sim <- Sim_mat_rel[[lvl]][rural, primary] / Q_mat[[lvl]][rural, primary]

RowMin <-  cbind(place = rownames(Sim), match = colnames(Sim)[unlist(apply(Sim, 1, which.min))])
RowMin <-  rbind(RowMin, cbind(primary, primary))

TIGER_RUCC_h1m <- inner_join(TIGER_RUCC, RowMin, by = "place", copy = TRUE) 
TIGER_RUCC_h1m %<>% mutate(match_name = with(TIGER_RUCC_h1m, County_Name[match(match, place)]), .after = match)
clust_name <- unique(TIGER_RUCC_h1m$match_name)

length(unique(TIGER_RUCC_h1m$match))


  tmap_mode("view")
tmap_options(max.categories = length(unique(TIGER_RUCC_h1m$match))) 
TIGER_RUCC_h1m %>% 
  tm_shape() +
  tm_fill(col = "match",
          title = "Regional Cluster", 
          id = "NAMELSAD", 
          palette = "Dark2"
          ) +
  tm_borders(lwd = .5)        
  
```

"Spatial Import Similarity Index": $\Vert \max\{\mathbf{Ax^{r}} - \mathbf{x^{r}}, 0\} - \mathbf{x^{s}} \Vert_{2} ~ \forall ~ r,s \in l$

```{r}
Sim <- Sim_mat_imp[[lvl]][rural, primary] / Q_mat[[lvl]][rural, primary]

RowMin <-  cbind(place = rownames(Sim), match = colnames(Sim)[unlist(apply(Sim, 1, which.min))])
RowMin <-  rbind(RowMin, cbind(primary, primary))

TIGER_RUCC_h1m <- inner_join(TIGER_RUCC, RowMin, by = "place", copy = TRUE) 
TIGER_RUCC_h1m %<>% mutate(match_name = with(TIGER_RUCC_h1m, County_Name[match(match, place)]), .after = match)
clust_name <- unique(TIGER_RUCC_h1m$match_name)

length(unique(TIGER_RUCC_h1m$match))


  tmap_mode("view")
tmap_options(max.categories = length(unique(TIGER_RUCC_h1m$match))) 
TIGER_RUCC_h1m %>% 
  tm_shape() +
  tm_fill(col = "match",
          title = "Regional Cluster", 
          id = "NAMELSAD", 
          palette = "Dark2"
          ) +
  tm_borders(lwd = .5)        
  
```

"Spatial \*Import Similarity Index - Net Exports": $\Vert \max\{\mathbf{Ax^{r}} - \mathbf{x^{r}}, 0\} - \mathbf{\tilde{x}^{s}} \Vert_{2} ~ \forall ~ r,s \in l$

```{r}
Sim <- Sim_mat_exp[[lvl]][rural, primary] / Q_mat[[lvl]][rural, primary]

RowMin <-  cbind(place = rownames(Sim), match = colnames(Sim)[unlist(apply(Sim, 1, which.min))])
RowMin <-  rbind(RowMin, cbind(primary, primary))

TIGER_RUCC_h1m <- inner_join(TIGER_RUCC, RowMin, by = "place", copy = TRUE) 
TIGER_RUCC_h1m %<>% mutate(match_name = with(TIGER_RUCC_h1m, County_Name[match(match, place)]), .after = match)
clust_name <- unique(TIGER_RUCC_h1m$match_name)

length(unique(TIGER_RUCC_h1m$match))


  tmap_mode("view")
tmap_options(max.categories = length(unique(TIGER_RUCC_h1m$match))) 
TIGER_RUCC_h1m %>% 
  tm_shape() +
  tm_fill(col = "match",
          title = "Regional Cluster", 
          id = "NAMELSAD", 
          palette = "Dark2"
          ) +
  tm_borders(lwd = .5)        
  
```

"Spatial Relative Import Similarity Index": $\Vert \max\{\mathbf{Ax^{r}}(\mathbf{iAx^{r}})^{-1} - \mathbf{x^{r}}(\mathbf{ix^{r}})^{-1}, 0\} - \mathbf{x^{s}}(\mathbf{ix^{s}})^{-1} \Vert_{2} ~ \forall ~ r,s \in l$

```{r}
Sim <- Sim_mat_imp_rel[[lvl]][rural, primary] / Q_mat[[lvl]][rural, primary]

RowMin <-  cbind(place = rownames(Sim), match = colnames(Sim)[unlist(apply(Sim, 1, which.min))])
RowMin <-  rbind(RowMin, cbind(primary, primary))

TIGER_RUCC_h1m <- inner_join(TIGER_RUCC, RowMin, by = "place", copy = TRUE) 
TIGER_RUCC_h1m %<>% mutate(match_name = with(TIGER_RUCC_h1m, County_Name[match(match, place)]), .after = match)
clust_name <- unique(TIGER_RUCC_h1m$match_name)

length(unique(TIGER_RUCC_h1m$match))

  tmap_mode("view")
tmap_options(max.categories = length(unique(TIGER_RUCC_h1m$match))) 
TIGER_RUCC_h1m %>% 
  tm_shape() +
  tm_fill(col = "match",
          title = "Regional Cluster", 
          id = "NAMELSAD", 
          palette = "Dark2"
          ) +
  tm_borders(lwd = .5)        
  
```

"Spatial \*Relative Import Similarity Index - Net Exports": $\Vert \max\{\mathbf{Ax^{r}}(\mathbf{iAx^{r}})^{-1} - \mathbf{x^{r}}(\mathbf{ix^{r}})^{-1}, 0\} - \mathbf{\tilde{x}^{s}}(\mathbf{i\tilde{x}^{s}})^{-1} \Vert_{2} ~ \forall ~ r,s \in l$

```{r}
Sim <- Sim_mat_exp_rel[[lvl]][rural, primary] / Q_mat[[lvl]][rural, primary]

RowMin <-  cbind(place = rownames(Sim), match = colnames(Sim)[unlist(apply(Sim, 1, which.min))])
RowMin <-  rbind(RowMin, cbind(primary, primary))

TIGER_RUCC_h1m <- inner_join(TIGER_RUCC, RowMin, by = "place", copy = TRUE) 
TIGER_RUCC_h1m %<>% mutate(match_name = with(TIGER_RUCC_h1m, County_Name[match(match, place)]), .after = match)
clust_name <- unique(TIGER_RUCC_h1m$match_name)

length(unique(TIGER_RUCC_h1m$match))

  tmap_mode("view")
tmap_options(max.categories = length(unique(TIGER_RUCC_h1m$match))) 
TIGER_RUCC_h1m %>% 
  tm_shape() +
  tm_fill(col = "match",
          title = "Regional Cluster", 
          id = "NAMELSAD", 
          palette = "Dark2"
          ) +
  tm_borders(lwd = .5)        
  
```
:::
