---
title: "The Dashboard"
format:
  html:
    code-fold: true
    df-print: paged
    embed-resources: true
params:
  data_pack_path: "data/dashboard_data_v240124.zip"
  geography_year: 2013
  map_agg_stats_show: true
  map_agg_stats_year: 2012
  map_agg_stats_fill_var: "establishments" # population, employment, establishments
  map_ex_supdem_show: true
  map_ex_supdem_year: 2012
  map_ex_supdem_ind: "713900" #"1111A0"
  focus_county: "55025"
  map_imped_show: true
  map_imped_shape: "gaus" # prox, power, expo, gau, hyper, bisquare
  map_imped_param: 500 # scale parameter of the impedance function
  map_connect_show: false
---


::: panel-tabset
# intro

```{r}
#| output: false
library(logger)
library(tidyverse)
library(glue)
library(sf)
library(units)
library(leaflet)
library(htmltools)

logger::log_threshold(DEBUG)

source("R/basic_utilities.R", local = (util <- new.env()))
source("R/dataprep.R", local = (dataprep <- new.env()))
source("R/geography.R", local = (geo <- new.env()))
source("R/dataprep_infogroup.R", local = (infogroup <- new.env()))
source("R/place_output.R", local = (place_output <- new.env()))
source("R/dataprep_bea_io.R", local = (bea_io <- new.env()))
source("R/connectedness.R", local = (connect <- new.env()))

```

## params

```{r}
params
```

## data

```{r}
# list of data objects used throughout the notebook
ipath <- list(
  geo_county_ = glue(geo$opath$county_, year = "{year}", scale = "20m", geometry = TRUE),
  geo_state = glue(geo$opath$state_, scale = "20m", geometry = "{geometry}"),
  population = dataprep$opath$population,
  infogroup_ = infogroup$opath$county_,
  io_output_ = glue(place_output$opath$output_, year = "{year}", class_system = "{class_system}", ilevel = "det", bus_data = "{bus_data}"),
  bea_io_use_det_ = glue(bea_io$opath$use_, level = "det", year = "{year}", labels = FALSE),
  bea_io_sup_det_ = glue(bea_io$opath$sup_, level = "det", year = "{year}", labels = FALSE),
  call_dist_mat_ = glue(geo$opath$dist_mat_, year = "{year}", from = "center", cbsa = FALSE)
)

ipath

# pack data
# list(ipath) |>  list_c() |> list_c() |> # cat paths from all lists into single vector
#   util$zip_pack(params$data_pack_path, files = _, overwrite = TRUE)

# unpack data
# util$zip_unpack(params$data_pack_path, overwrite = TRUE)
```

## common functions

```{r}
#' Load base county geodataframe
call_geo <- function() {
  df <- geo$call_geog(params$geography_year) |>
    rename_with(str_to_lower)
  d <- geo$pubdata$get_state_df(FALSE) |>
    rename_with(str_to_lower) |>
    select(code, contiguous, bea_region_name) |>
    rename(state_code = code)
  df <- left_join(df, d, "state_code")
  df
}



```




# agg stats

```{r}
if (params$map_agg_stats_show) {
  # county shapes
  df <- call_geo()

  # population
  d <- dataprep$call_population() |>
    filter(year == params$map_agg_stats_year, cty != "000") |>
    mutate(place = str_c(st, cty)) |>
    rename(population = pop) |>
    select(place, population)
  df <- left_join(df, d, by = "place")

  # establishments end employment
  d <- open_dataset(glue(infogroup$opath$county_, year = params$map_agg_stats_year)) |>
    mutate(place = str_c(st, cty)) |>
    select(place, est, emp) |>
    group_by(place) |>
    summarize(across(everything(), sum)) |>
    rename(establishments = est, employment = emp) |>
    collect()
  df <- left_join(df, d, by = "place")


  fill_var <- params$map_agg_stats_fill_var
  d <- df |>
    filter(contiguous)
  pal <- colorNumeric("magma", log10(d[[fill_var]]))
  val <- log10(d[[fill_var]])
  col <- pal(val)
  lab <- glue(
        "{county}",
        "Population: {population}",
        "Employment: {employment}",
        "Establishments: {establishments}",
        .sep = "<br>",
        .envir = d) |> lapply(HTML)
  
  leaflet() |>
    addTiles() |>
    addPolygons(
      data = d,
      stroke = FALSE,
      fillColor = col,
      fillOpacity = 0.6,
      label = lab,
      popup = lab
    ) |>
    addLegend(pal = pal, values = val, title = glue("log10({fill_var})"))
}
```




# excess sup/dem

```{r}
if (params$map_ex_supdem_show) {
  industry <- params$map_ex_supdem_ind
  
  df <- call_geo()
  
  # county demand
  d <- place_output$call_intermediate(
    year = params$map_ex_supdem_year,
    schedule = "demand",
    paradigm = "domestic",
    class_system = "commodity",
    ilevel = "det",
    bus_data = "infogroup"
  ) |>
    filter(indcode == industry) |>
    select(place, demand)

  df <- left_join(df, d, "place")

  # county supply
  d <- place_output$call_intermediate(
    year = params$map_ex_supdem_year,
    schedule = "supply",
    paradigm = "domestic",
    class_system = "commodity",
    ilevel = "det",
    bus_data = "infogroup"
  ) |>
    filter(indcode == industry) |>
    select(place, supply)
  
  df <- left_join(df, d, "place") |>
    mutate(across(c(supply, demand), round)) |>
    mutate(net_supply = supply - demand)
  
  ind_name <- bea_io$pubdata$get_sup(params$map_ex_supdem_year, "det")$row_names |>
    purrr::keep(\(x) x[1] == industry)
  ind_name <- ind_name[[1]][2]

  d <- df |>
    filter(contiguous) |>
    mutate(log_supdem = sign(net_supply) * log10(1 + abs(net_supply)))
  pal <- colorNumeric(c("red", "white", "blue"), d$log_supdem)
  val <- d$log_supdem
  col <- pal(val)
  lab <- glue(
        "{county}",
        "Supply: {supply}",
        "Demand: {demand}",
        "Net supply: {net_supply}",
        .sep = "<br>",
        .envir = d) |> lapply(HTML)
  
  leaflet() |>
    addTiles() |>
    addPolygons(
      data = d,
      stroke = FALSE,
      fillColor = col,
      fillOpacity = 0.6,
      label = lab,
      popup = lab
    ) |>
    addLegend(pal = pal, values = val, title = HTML(glue("{ind_name} ({industry})<br>Net industry supply (log10)")))
  


}
```


# distance and impedance

```{r}
if (params$map_imped_show) {
  fips <- params$focus_county
  name <- geo$fips2name(fips, long = TRUE)
  
  df <- call_geo()
  
  d <- geo$call_dist_mat(year = params$geography_year, from = "center")[fips, ] |>
    as_tibble(rownames = "place") |>
    rename(distance = value) |>
    mutate(distance = drop_units(set_units(distance, mi)))
  
  df <- left_join(df, d, "place")
  
  df %>%
    filter(contiguous) %>%
    ggplot() + 
    geom_sf(aes(fill = distance)) +
    labs(title = glue("Distance from {name} ({fips}), miles"))
}
```


```{r}
if (params$map_imped_show) {
  fips <- params$focus_county
  name <- geo$fips2name(fips, long = TRUE)
  imped_fn <- paste0("call_", params$map_imped_shape, "_impedance_mat")
  imped_par <- params$map_imped_param
  
  df <- call_geo()
  
  d <- geo[[imped_fn]](imped_par, from = "center", year = params$geography_year)[fips, ] |>
    as_tibble(rownames = "place") |>
    rename(impedance = value)
  
  df <- left_join(df, d, "place")
  
  d <- df %>%
    filter(contiguous)
  
  ggplot(d) + 
    geom_sf(aes(fill = impedance)) +
    labs(title = glue("Impedance factor ({params$map_imped_shape}, {imped_par}) from {name} ({fips})"))
}
```

# connectedness

```{r}
# todo: add relevant data to ipath
if (params$map_connect_show) {

df <- connect$call_hierarchical_connectedness(year = 2012, 
                                      paradigm = "domestic", 
                                      class_system = "commodity", 
                                      impedance = T, 
                                      functional_form = "distance", 
                                      scalar_constant = 300)

df[["Hierarchical_Connectedness_table"]][["level_6"]] %>% 
  ggplot() + geom_sf(aes(fill = STATE))
}
```

:::
