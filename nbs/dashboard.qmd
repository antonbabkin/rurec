---
title: "The Dashboard"
format:
  html:
    code-fold: true
    df-print: paged
    embed-resources: true
params:
  data_pack_path: "data/dashboard_data_v240124.zip"
  geography_year: 2013
  map_agg_stats_show: false
  map_agg_stats_year: 2012
  map_agg_stats_fill_var: "establishments" # population, employment, establishments
  map_ex_supdem_show: false
  map_ex_supdem_year: 2012
  map_ex_supdem_ind: "1111A0" #"312120"
  focus_county: "55025"
  map_imped_show: false
  map_imped_shape: "gaus" # prox, power, expo, gau, hyper, bisquare
  map_imped_param: 500 # scale parameter of the impedance function
  basic_geog_feature: TRUE
  distance_matrix: TRUE
  impedance_matrix: TRUE
  central_impedance_table: TRUE
  absorption_density_plot: FALSE
  sector_hist_plot: TRUE
  sector_hist_plot_multi: TRUE
  supply_demand_map: TRUE
  supply_demand_delta_map: TRUE
  impedance_map: TRUE
  connectedness_map: TRUE
  absorption_map: TRUE
  eca_map: TRUE
  eca_place_map: TRUE 
---

::: panel-tabset
# intro

```{r}
#| output: false
library(logger)
library(tidyverse)
library(glue)
library(sf)
library(units)
library(leaflet)
library(htmltools)

logger::log_threshold(DEBUG)

source("R/basic_utilities.R", local = (util <- new.env()))
source("R/dataprep.R", local = (dataprep <- new.env()))
source("R/geography.R", local = (geo <- new.env()))
source("R/dataprep_infogroup.R", local = (infogroup <- new.env()))
source("R/place_output.R", local = (place_output <- new.env()))
source("R/dataprep_bea_io.R", local = (bea_io <- new.env()))
source("R/connectedness.R", local = (connect <- new.env()))

source("R/visualization.R", local = (visual <- new.env()))
source("R/circularity.R", local = (circ <- new.env()))

```

## params

```{r}
params
```

## data

```{r}
# list of data objects used throughout the notebook
ipath <- list(
  geo_county_ = glue(geo$opath$county_, year = "{year}", scale = "20m", geometry = TRUE),
  geo_state = glue(geo$opath$state_, scale = "20m", geometry = "{geometry}"),
  population = dataprep$opath$population,
  infogroup_ = infogroup$opath$county_,
  io_output_ = glue(place_output$opath$output_, year = "{year}", class_system = "commodity", ilevel = "det", bus_data = "{bus_data}"),
  bea_io_use_det_ = glue(bea_io$opath$use_, level = "det", year = "{year}", labels = FALSE),
  bea_io_sup_det_ = glue(bea_io$opath$sup_, level = "det", year = "{year}", labels = FALSE),
  call_dist_mat_ = glue(geo$opath$dist_mat_, year = "{year}", from = "center", cbsa = FALSE)
)

ipath

# pack data
# list(ipath) |>  list_c() |> list_c() |> # cat paths from all lists into single vector
#   util$zip_pack(params$data_pack_path, files = _, overwrite = TRUE)

# unpack data
# util$zip_unpack(params$data_pack_path, overwrite = TRUE)
```

## common functions

```{r}
#' Load base county geodataframe
call_geo <- function() {
  df <- geo$call_geog(params$geography_year) |>
    rename_with(str_to_lower)
  d <- geo$pubdata$get_state_df(FALSE) |>
    rename_with(str_to_lower) |>
    select(code, contiguous, bea_region_name) |>
    rename(state_code = code)
  df <- left_join(df, d, "state_code")
  df
}

```




# agg stats

```{r}
if (params$map_agg_stats_show) {
  # county shapes
  df <- call_geo()

  # population
  d <- dataprep$call_population() |>
    filter(year == params$map_agg_stats_year, cty != "000") |>
    mutate(place = str_c(st, cty)) |>
    rename(population = pop) |>
    select(place, population)
  df <- left_join(df, d, by = "place")

  # establishments end employment
  d <- open_dataset(glue(infogroup$opath$county_, year = params$map_agg_stats_year)) |>
    mutate(place = str_c(st, cty)) |>
    select(place, est, emp) |>
    group_by(place) |>
    summarize(across(everything(), sum)) |>
    rename(establishments = est, employment = emp) |>
    collect()
  df <- left_join(df, d, by = "place")


  fill_var <- params$map_agg_stats_fill_var
  d <- df |>
    filter(contiguous)
  pal <- colorNumeric("magma", log10(d[[fill_var]]))
  val <- log10(d[[fill_var]])
  col <- pal(val)
  lab <- glue(
        "{county}",
        "Population: {population}",
        "Employment: {employment}",
        "Establishments: {establishments}",
        .sep = "<br>",
        .envir = d) |> lapply(HTML)
  
  leaflet() |>
    addTiles() |>
    addPolygons(
      data = d,
      stroke = FALSE,
      fillColor = col,
      fillOpacity = 0.6,
      label = lab,
      popup = lab
    ) |>
    addLegend(pal = pal, values = val, title = glue("log10({fill_var})"))
}
```




# excess sup/dem

```{r}
if (params$map_ex_supdem_show) {
  industry <- params$map_ex_supdem_ind
  
  df <- call_geo()
  
  # county demand
  d <- place_output$call_intermediate(
    year = params$map_ex_supdem_year,
    schedule = "demand",
    paradigm = "domestic",
    class_system = "commodity",
    ilevel = "det",
    bus_data = "infogroup"
  ) |>
    filter(indcode == industry) |>
    rename(demand = output) |>
    select(place, demand)

  df <- left_join(df, d, "place")

  # county supply
  d <- place_output$call_intermediate(
    year = params$map_ex_supdem_year,
    schedule = "supply",
    paradigm = "domestic",
    class_system = "commodity",
    ilevel = "det",
    bus_data = "infogroup"
  ) |>
    filter(indcode == industry) |>
    rename(supply = output) |>
    select(place, supply)
  
  df <- left_join(df, d, "place") |>
    mutate(across(c(supply, demand), round)) |>
    mutate(net_supply = supply - demand)
  
  ind_name <- bea_io$pubdata$get_sup(params$map_ex_supdem_year, "det")$row_names |>
    purrr::keep(\(x) x[1] == industry)
  ind_name <- ind_name[[1]][2]

  d <- df |>
    filter(contiguous) |>
    mutate(log_supdem = sign(net_supply) * log10(1 + abs(net_supply)))
  pal <- colorNumeric(c("red", "white", "blue"), d$log_supdem)
  val <- d$log_supdem
  col <- pal(val)
  lab <- glue(
        "{county}",
        "Supply: {supply}",
        "Demand: {demand}",
        "Net supply: {net_supply}",
        .sep = "<br>",
        .envir = d) |> lapply(HTML)
  
  leaflet() |>
    addTiles() |>
    addPolygons(
      data = d,
      stroke = FALSE,
      fillColor = col,
      fillOpacity = 0.6,
      label = lab,
      popup = lab
    ) |>
    addLegend(pal = pal, values = val, title = HTML(glue("{ind_name} ({industry})<br>Net industry supply (log10)")))
  


}
```


# distance and impedance

```{r}
if (params$map_imped_show) {
  fips <- params$focus_county
  name <- geo$fips2name(fips, long = TRUE)
  
  df <- call_geo()
  
  d <- geo$call_dist_mat(year = params$geography_year, from = "center")[fips, ] |>
    as_tibble(rownames = "place") |>
    rename(distance = value) |>
    mutate(distance = drop_units(set_units(distance, mi)))
  
  df <- left_join(df, d, "place")
  
  df %>%
    filter(contiguous) %>%
    ggplot() + 
    geom_sf(aes(fill = distance)) +
    labs(title = glue("Distance from {name} ({fips}), miles"))
}
```


```{r}
if (params$map_imped_show) {
  fips <- params$focus_county
  name <- geo$fips2name(fips, long = TRUE)
  imped_fn <- paste0("call_", params$map_imped_shape, "_impedance_mat")
  imped_par <- params$map_imped_param
  
  df <- call_geo()
  
  d <- geo[[imped_fn]](imped_par, from = "center", year = params$geography_year)[fips, ] |>
    as_tibble(rownames = "place") |>
    rename(impedance = value)
  
  df <- left_join(df, d, "place")
  
  d <- df %>%
    filter(contiguous)
  
  ggplot(d) + 
    geom_sf(aes(fill = impedance)) +
    labs(title = glue("Impedance factor ({params$map_imped_shape}, {imped_par}) from {name} ({fips})"))
}
```


# geography

```{r}
#| warning: false
# TODO: add relevant data to ipath
if (params$basic_geog_feature) {
  #explore simple spatial dataframe 
  
  key = list(
    year = 2013,
    scale = "20m", # c("20m", "5m", "500k")
    cbsa = FALSE,
    verbose = FALSE)
  
  df <- geo$call_geog(
    year = key$year,
    scale = key$scale,
    cbsa = key$cbsa,
    verbose = key$verbose)
  
  as_tibble(df)

}
```


```{r}
#| warning: false
# TODO: add relevant data to ipath
if (params$distance_matrix) {
  #explore distance matrix 
  
  key = list(
    year = 2013,
    from = "center", # c("center", "border")
    cbsa = FALSE)
  
  df <- geo$call_dist_mat(
    year = key$year,
    from = key$from,
    cbsa = key$cbsa)
  
  df %>% 
    as.data.frame.table() %>% 
    as_tibble() %>% 
    `colnames<-`(c("rows", "cols", "distance"))
}
```
```{r}
#| warning: false
# TODO: add relevant data to ipath
if (params$impedance_matrix) {
  #explore impedance matrix constructions
  
  key = list(
    year = 2013,
    cbsa = FALSE,
    from = "center", # c("center", "border"),
    functional_form = "distance", # c("bisquare", "secant", "gaussian", "exponential", "power", "distance", "queen", "rook", "neighbor")
    scalar_constant = 500,
    meta = T)
  
  df <- geo$call_impedance_mat(
    year = key$year,
    cbsa = key$cbsa,
    from = key$from,
    functional_form = key$functional_form, 
    scalar_constant = key$scalar_constant,
    meta = key$meta)
  
  str(df)
  
}
```


```{r}
#| warning: false
# TODO: add relevant data to ipath
if (params$central_impedance_table) {
  #explore impedance matrix constructions
  
  key = list(
    central_place = "01001",
    year = 2013,
    cbsa = FALSE,
    from = "center", # c("center", "border"),
    functional_form = "bisquare", # c("bisquare", "secant", "gaussian", "exponential", "power", "distance", "queen", "rook", "neighbor")
    scalar_constant = 500)
  
  df <- geo$call_impedance_distribution_table(
    central_place = key$central_place,
    year = key$year,
    cbsa = key$cbsa,
    from = key$from,
    functional_form = key$functional_form, 
    scalar_constant = key$scalar_constant)
  
  str(df)
}
```




# connectedness

```{r}
#| warning: false
# TODO: add relevant data to ipath
if (params$absorption_density_plot) {
  #explore distribution of temporal properties of data 
  
  key = list(
    set_of_years = 2000:2020,
    normalized = TRUE,
    impedance = FALSE,
    functional_form = NULL, # c("bisquare", "secant", "gaussian", "exponential", "power", "distance", "queen", "rook", "neighbor")
    scalar_constant = NULL, # 300
    from = "center", # c("center", "border")
    central_place = NULL, # "01001"
    flow_direction = "out", # c("out", "in")
    function_class = "max", # c("max", "gini", "sum", "mean", "sd")
    threshold = .05,
    alpha_vector = "max_alpha",
    class_system = "commodity", # c("industry", "commodity")
    paradigm = "factor", # c("factor", "domestic", "capital")
    ilevel = "det", # c("det", "sum", "sec")
    bus_data = "cbp_imp", # c("cbp_imp", "cbp_raw", "infogroup")
    cbsa = FALSE,
    trim = NULL, # "^(02|15|60|66|69|72|78)|(999)$"
    verbose = FALSE,
    bind = TRUE,
    spatial = FALSE)
    
  df <- connect$call_temporal_eca_table(
    set_of_years = key$set_of_years,
    normalized = key$normalized,
    impedance = key$impedance,
    functional_form = key$functional_form,
    scalar_constant = key$scalar_constant,
    from = key$from,
    central_place = key$central_place,
    flow_direction = key$flow_direction,
    function_class = key$function_class,
    threshold = key$threshold,
    alpha_vector = key$alpha_vector,
    class_system = key$class_system,
    paradigm = key$paradigm,
    ilevel = key$ilevel,
    bus_data = key$bus_data,
    cbsa = key$cbsa,
    trim = key$trim,
    verbose = key$verbose,
    bind = key$bind,
    spatial = key$spatial)
  
  key = list(
    temporal_absorption_metric_table = df,
    fill_variable = "max_alpha",
    id_variable = "id_year",
    trans = NULL, # log10
    colorbreaks = c("#440154FF" = 2000:2006, 
                    "#1E9C89FF" = 2007:2016, 
                    "#D64B40FF" = 2017, 
                    "#FDE725FF" =  2018:2020),
    interactive = TRUE)
  
  visual$absorption_density_plot(
    temporal_absorption_metric_table = key$temporal_absorption_metric_table, 
    fill_variable = key$fill_variable, 
    id_variable = key$id_variable, 
    trans = key$trans,
    interactive = key$interactive)
}
```


```{r}
#| warning: false
# TODO: add relevant data to ipath
if (params$sector_hist_plot) {
  # explore sector output distributions
  
  key = list(
    year = 2012,
    ilevel = "det", # c("det", "sum", "sec")
    class_system = "commodity", # c("industry", "commodity")
    paradigm = "domestic", # c("factor", "domestic", "capital")
    bus_data = "cbp_imp", # c("cbp_imp", "cbp_raw", "infogroup")
    cbsa = FALSE,
    verbose = FALSE,
    central_place = NULL, # "01001"
    trim = "^(60|66|69|72|78)|(999)$",
    cluster_subset = NULL, # "^11"
    indicator = "gross_output", # c("gross_output", "intermediate_supply", "intermediate_demand", "net_supply", "net_demand")
    color = "turbo", # c("turbo", "viridis", "magma", "inferno", "plasma", "cividis", "rocket", "mako", "rainbow")
    cluster_level = "sec", # c("sec", "sum", "det")
    interactive = TRUE)
  
  visual$call_sector_histogram(
    year = key$year,
    ilevel = key$ilevel,
    class_system = key$class_system,
    paradigm = key$paradigm,
    bus_data = key$bus_data,
    cbsa = key$cbsa,
    verbose = key$verbose,
    central_place = key$central_place,
    trim = key$trim,
    cluster_subset = key$cluster_subset,
    color = key$color,
    cluster_level = key$cluster_level,
    interactive = key$interactive)
}
```


```{r}
#| warning: false
# TODO: add relevant data to ipath
if (params$sector_hist_plot_multi) {
  # explore sector supply/demand distributions
  
  key = list(
    year = 2012,
    ilevel = "det", # c("det", "sum", "sec")
    class_system = "commodity", # c("industry", "commodity")
    paradigm = "domestic", # c("factor", "domestic", "capital")
    bus_data = "cbp_imp", # c("cbp_imp", "cbp_raw", "infogroup")
    cbsa = FALSE,
    verbose = FALSE,
    central_place = NULL, # "01001"
    trim = "^(60|66|69|72|78)|(999)$",
    cluster_subset = NULL, # "^11"
    color = "turbo", # c("turbo", "viridis", "magma", "inferno", "plasma", "cividis", "rocket", "mako", "rainbow")
    cluster_level = "sec", # c("sec", "sum", "det")
    common_yscale = TRUE,
    interactive = TRUE)
  
  visual$call_sector_histogram_multi(
    year = key$year,
    ilevel = key$ilevel,
    class_system = key$class_system,
    paradigm = key$paradigm,
    bus_data = key$bus_data,
    cbsa = key$cbsa,
    verbose = key$verbose,
    central_place = key$central_place,
    trim = key$trim,
    cluster_subset = key$cluster_subset,
    color = key$color,
    cluster_level = key$cluster_level,
    common_yscale = key$common_yscale,
    interactive = key$interactive)
}
```


```{r}
#| warning: false
# TODO: add relevant data to ipath
if (params$supply_demand_map) {
  # explore net supply and demand maps
  
  ihs_trans <- function(){trans_new("ihs", function(x){asinh(x)}, function(x){sinh(x)} )}
  
  key = list(
    year = 2012,
    ilevel = "det", # c("det", "sum", "sec")
    class_system = "commodity", # c("industry", "commodity")
    paradigm = "domestic", # c("factor", "domestic", "capital")
    bus_data = "cbp_imp", # c("cbp_imp", "cbp_raw", "infogroup")
    verbose = FALSE,
    cluster_level = "det", # c("sec", "sum", "det")
    cbsa = FALSE,
    cluster_subset = "^312120", # NULL
    trim = "^(60|66|69|78)|(999)$", 
    spatial = TRUE)
  
  df <- place_output$call_extraction_table(
    year = key$year,
    ilevel = key$ilevel,
    class_system = key$class_system,
    paradigm = key$paradigm,
    bus_data = key$bus_data,
    verbose = key$verbose,
    cluster_level = key$cluster_level,
    cbsa = key$cbsa,
    cluster_subset = key$cluster_subset,
    trim = key$trim,
    spatial = key$spatial)
  
  key = list(
    spatial_dataframe = df,
    fill_variable = "extract", # column from spatial_dataframe
    year = 2012,
    cluster_subset = "^312120", # NULL
    cluster_level = "det", # c("sec", "sum", "det")
    scale_style = "inverse_hyperbolic_sine", # c("inverse_hyperbolic_sine", "full_spectrum_midpoint", "constant_spread_midpoint", "constant_spread_spectrum")
    interactive = TRUE)
  
  visual$flow_potential_map(
    spatial_dataframe = key$spatial_dataframe,
    fill_variable = key$fill_variable,
    year = key$year,
    cluster_subset = key$cluster_subset,
    cluster_level = key$cluster_level,
    scale_style = key$scale_style,
    interactive = key$interactive)
  
}
```


```{r}
#| warning: false
# TODO: add relevant data to ipath
if (params$supply_demand_delta_map) {
  # explore place relative supply demand change over time
  key = list(
    set_of_years = c(2012, 2017),
    normalized = TRUE,
    impedance = FALSE,
    functional_form = NULL, # c("bisquare", "secant", "gaussian", "exponential", "power", "distance", "queen", "rook", "neighbor")
    scalar_constant = NULL, # 300
    from = "center", # c("center", "border")
    central_place = "01001",
    flow_direction = "out", # c("out", "in")
    function_class = "max", # c("max", "gini", "sum", "mean", "sd")
    threshold = .05,
    alpha_vector = "max_alpha",
    class_system = "commodity", # c("industry", "commodity")
    paradigm = "factor", # c("factor", "domestic", "capital")
    ilevel = "det", # c("det", "sum", "sec")
    bus_data = "cbp_imp", # c("cbp_imp", "cbp_raw", "infogroup")
    cbsa = FALSE,
    trim = NULL, # "^(02|15|60|66|69|72|78)|(999)$"
    verbose = FALSE,
    bind = FALSE,
    spatial = TRUE)
    
  df <- connect$call_temporal_eca_table(
    set_of_years = key$set_of_years,
    normalized = key$normalized,
    impedance = key$impedance,
    functional_form = key$functional_form,
    scalar_constant = key$scalar_constant,
    from = key$from,
    central_place = key$central_place,
    flow_direction = key$flow_direction,
    function_class = key$function_class,
    threshold = key$threshold,
    alpha_vector = key$alpha_vector,
    class_system = key$class_system,
    paradigm = key$paradigm,
    ilevel = key$ilevel,
    bus_data = key$bus_data,
    cbsa = key$cbsa,
    trim = key$trim,
    verbose = key$verbose,
    bind = key$bind,
    spatial = key$spatial)
  
  df <- df %>% {connect$temporal_delta_central(.[[1]], .[[2]])}
  
  
  key = list(
    spatial_dataframe = df,
    fill_variable = "delta_export",
    set_of_years = c(2012,2017), 
    central_place = "01001",
    interactive = TRUE)
    
  visual$place_trade_delta_map(
    spatial_dataframe = key$spatial_dataframe,
    fill_variable = key$fill_variable,
    set_of_years = key$set_of_years, 
    central_place = key$central_place,
    interactive = key$interactive)
  
}

```


```{r}
#| warning: false
# TODO: add relevant data to ipath
if (params$impedance_map) {
  # explore impedance maps
  
  key = list(
    central_place = "01001",
    year = 2013,
    cbsa = FALSE,
    from = "center", # c("center", "border")
    functional_form = "bisquare", # c("bisquare", "secant", "gaussian", "exponential", "power", "distance", "queen", "rook", "neighbor")
    scalar_constant = 200)
  
  df <- geo$call_impedance_distribution_table(
    central_place = key$central_place,
    year = key$year,
    cbsa = key$cbsa,
    from = key$from,
    functional_form = key$functional_form,
    scalar_constant = key$scalar_constant)
  
  key = list(
    spatial_dataframe = df[[1]],
    fill_variable = "impedance", # column from spatial_dataframe
    caption = df[[2]],
    interactive = TRUE)
  
  visual$normal_choro_map(
    spatial_dataframe = key$spatial_dataframe,
    fill_variable = key$fill_variable,
    caption = key$caption,
    interactive = key$interactive)
}

```


```{r}
#| warning: false
# TODO: add relevant data to ipath
if (params$connectedness_map) {
  # explore max alpha connectedness maps
  
  key = list(
    year = 2012,
    normalized = TRUE, 
    impedance = TRUE,
    functional_form = "distance", # c("bisquare", "secant", "gaussian", "exponential", "power", "distance", "queen", "rook", "neighbor")
    scalar_constant = 300,
    from = "center", # c("center", "border")
    central_place = NULL,
    flow_direction = "out", # c("out", "in")
    function_class = "max", # c("max", "gini", "sum", "mean", "sd")
    threshold = .25,
    alpha_vector = "max_alpha",
    class_system = "commodity", # c("industry", "commodity")
    paradigm = "domestic", # c("factor", "domestic", "capital")
    ilevel = "det", # c("det", "sum", "sec")
    bus_data = "cbp_imp", # c("cbp_imp", "cbp_raw", "infogroup")
    cbsa = FALSE, 
    trim = "^(60|66|69|78)|(999)$",
    verbose = FALSE)
  
  df <- connect$call_eca_table_spatial(
    year = key$year,
    normalized = key$normalized, 
    impedance = key$impedance,
    functional_form = key$functional_form,
    scalar_constant = key$scalar_constant,
    from = key$from,
    central_place = key$central_place,
    flow_direction = key$flow_direction,
    function_class = key$function_class,
    threshold = key$threshold,
    alpha_vector = key$alpha_vector,
    class_system = key$class_system,
    paradigm = key$paradigm,
    ilevel = key$ilevel,
    bus_data = key$bus_data,
    cbsa = key$cbsa, 
    trim = key$trim,
    verbose = key$verbose)
  
  key = list(
    spatial_dataframe = df,
    fill_variable = "max_alpha", # column from spatial_dataframe
    caption = NULL,
    interactive = TRUE)
  
  visual$normal_choro_map(
    spatial_dataframe = key$spatial_dataframe,
    fill_variable = key$fill_variable,
    caption = key$caption,
    interactive = key$interactive)
}

```
  

```{r}
#| warning: false
# TODO: add relevant data to ipath
if (params$absorption_map) {
  # explore place relative absorption potential 
  
  key = list(
    year = 2012,
    normalized = TRUE, 
    impedance = TRUE,
    functional_form = "secant", # c("bisquare", "secant", "gaussian", "exponential", "power", "distance", "queen", "rook", "neighbor")
    scalar_constant = 200,
    from = "center", # c("center", "border")
    central_place = "01001",
    flow_direction = "out", # c("out", "in")
    function_class = "max", # c("max", "gini", "sum", "mean", "sd")
    threshold = .05,
    alpha_vector = "max_alpha",
    class_system = "commodity", # c("industry", "commodity")
    paradigm = "domestic", # c("factor", "domestic", "capital")
    ilevel = "det", # c("det", "sum", "sec")
    bus_data = "cbp_imp", # c("cbp_imp", "cbp_raw", "infogroup")
    cbsa = FALSE, 
    trim = "^(02|15|60|66|69|72|78)|(999)$",
    verbose = FALSE)
  
  df <- connect$call_eca_table_spatial(
    year = key$year,
    normalized = key$normalized, 
    impedance = key$impedance,
    functional_form = key$functional_form,
    scalar_constant = key$scalar_constant,
    from = key$from,
    central_place = key$central_place,
    flow_direction = key$flow_direction,
    function_class = key$function_class,
    threshold = key$threshold,
    alpha_vector = key$alpha_vector,
    class_system = key$class_system,
    paradigm = key$paradigm,
    ilevel = key$ilevel,
    bus_data = key$bus_data,
    cbsa = key$cbsa, 
    trim = key$trim,
    verbose = key$verbose)
  
  key = list(
    place_trade_table = df,
    fill_variable = "export_absorption", # column from place_trade_table
    central_place = "01001", 
    censor_scale_lowerbound = 0.01,
    interactive = TRUE)
  
  visual$place_trade_map(
    place_trade_table = key$place_trade_table,
    fill_variable = key$fill_variable,
    central_place = key$central_place, 
    censor_scale_lowerbound = key$censor_scale_lowerbound,
    interactive = key$interactive)
}

```


```{r}
#| warning: false
# TODO: add relevant data to ipath
if (params$eca_map) {
  # explore hierarchical ECA clusters
  
  key = list(
    year = 2012,
    class_system = "commodity", # c("industry", "commodity")
    paradigm = "domestic", # c("factor", "domestic", "capital")
    ilevel = "det", # c("det", "sum", "sec")
    bus_data = "cbp_imp", # c("cbp_imp", "cbp_raw", "infogroup")
    cbsa = FALSE,
    normalized = TRUE,
    flow_direction = "out", # c("out", "in")
    function_class = "max", # c("max", "gini", "sum", "mean", "sd")
    threshold = .25,
    alpha_vector = "max_alpha",
    impedance = TRUE,
    from = "center", # c(center, "border")
    functional_form = "distance", # c("bisquare", "secant", "gaussian", "exponential", "power", "distance", "queen", "rook", "neighbor")
    scalar_constant = 300,
    trim = "^(60|66|69|78)|(999)$",
    verbose = FALSE)

  df <- connect$call_hierarchical_connectedness(
    year = key$year,
    class_system = key$class_system,
    paradigm = key$paradigm,
    ilevel = key$ilevel,
    bus_data = key$bus_data,
    cbsa = key$cbsa, 
    normalized = key$normalized, 
    flow_direction = key$flow_direction,
    function_class = key$function_class,
    threshold = key$threshold,
    alpha_vector = key$alpha_vector,
    impedance = key$impedance,
    from = key$from,
    functional_form = key$functional_form,
    scalar_constant = key$scalar_constant,
    trim = key$trim,
    verbose = key$verbose)
  
  key = list(
    spatial_dataframe = df$"Hierarchical_Discrete_table"$"level_5",
    fill_variable = "eca_membership",
    caption = NULL, 
    interactive = TRUE)
  
  visual$cluster_map(
    spatial_dataframe = key$spatial_dataframe,
    fill_variable = key$fill_variable,
    caption = key$caption, 
    interactive = key$interactive)
}


```


```{r}
#| warning: false
# TODO: add relevant data to ipath
if (params$eca_place_map) {
  # explore place relative ECA's 
  
  key = list(
    year = 2012,
    class_system = "commodity", # c("industry", "commodity")
    paradigm = "domestic", # c("factor", "domestic", "capital")
    ilevel = "det", # c("det", "sum", "sec")
    bus_data = "cbp_imp", # c("cbp_imp", "cbp_raw", "infogroup")
    cbsa = FALSE,
    normalized = TRUE,
    flow_direction = "out", # c("out", "in")
    function_class = "max", # c("max", "gini", "sum", "mean", "sd")
    threshold = .25,
    alpha_vector = "max_alpha",
    impedance = TRUE,
    from = "center", # c(center, "border")
    functional_form = "distance", # c("bisquare", "secant", "gaussian", "exponential", "power", "distance", "queen", "rook", "neighbor")
    scalar_constant = 300,
    trim = "^(60|66|69|78)|(999)$",
    verbose = FALSE)

  df <- connect$call_hierarchical_connectedness(
    year = key$year,
    class_system = key$class_system,
    paradigm = key$paradigm,
    ilevel = key$ilevel,
    bus_data = key$bus_data,
    cbsa = key$cbsa, 
    normalized = key$normalized, 
    flow_direction = key$flow_direction,
    function_class = key$function_class,
    threshold = key$threshold,
    alpha_vector = key$alpha_vector,
    impedance = key$impedance,
    from = key$from,
    functional_form = key$functional_form,
    scalar_constant = key$scalar_constant,
    trim = key$trim,
    verbose = key$verbose)
  
  key = list(
    eca_table = df$"Hierarchical_Discrete_table"$"level_5",
    fill_variable = "max_alpha",
    central_place = "01001", 
    interactive = TRUE)
  
  visual$place_cluster_map(
    eca_table = key$eca_table,
    fill_variable = key$fill_variable,
    central_place = key$central_place, 
    interactive = key$interactive)
}

```




:::
