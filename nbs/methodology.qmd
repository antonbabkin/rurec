---
title: "Methodology and Data"
format:
  html:
    toc: true
    code-fold: true
    df-print: paged
    embed-resources: true
---

# head

This notebook is a comprehensive overview of the project methodology.
More specific details may be available in other notebooks related to their respective sections.
Parts of the notebook are illustrated with examples using real or artificial data.
Each section points to relevant code in a notebook or a script.

```{r}
#| output: false
library(tidyverse)
source("R/dataprep_bea_io.R", local = (bea_io <- new.env()))
source("R/dataprep_cbp.R", local = (cbp <- new.env()))
source("R/dataprep_agcensus.R", local = (agcen <- new.env()))
```


# Diagram

A flowchart covering all steps of the methodology, data inputs/outputs and relations between them.

[Google Drive Drawing](https://docs.google.com/drawings/d/1ek6pFUiimufYbH9idiZfNxvfeT7duJ_Xd6lzGHsgMCY/edit) (restricted access).


# Data

## CBP

Code: [pubdata/cbp](https://github.com/antonbabkin/pubdata/blob/main/nbs/cbp.md)

[CBP](https://www.census.gov/programs-surveys/cbp.html) (County Business Patterns) CBP is an annual series that provides subnational economic data by industry.
This series includes the number of establishments, employment during the week of March 12, first quarter payroll, and annual payroll.

- changes in suppression methodology

## CBP-EFSY

Code: [pubdata/cbp](https://github.com/antonbabkin/pubdata/blob/main/nbs/cbp.md), section EFSY.

Imputation of suppressed CBP employment in 1975-2016 by Eckert, Fort, Schott, and Yang.
[Website](https://fpeckert.me/cbp/)

Fabian Eckert, Teresa C. Fort, Peter K. Schott, and Natalie J. Yang. "Imputing Missing Values in the US Census Bureau's County Business Patterns." NBER Working Paper \#26632, 2021.

## InfoGroup

Establishment level proprietary dataset containing location, industry, employment and sales information for all businesses in the US.
Also known as [Data Axle](https://www.data-axle.com/our-data/business-data/) and RefUSA.

## BEA I-O tables

Code: [pubdata/bea_io](https://github.com/antonbabkin/pubdata/blob/main/nbs/bea_io.md)

- short overview
- link to [I-O Fundamentals] notebook
- 3 levels of BEA industry
- crosswalk to NAICS

```{r}

is <- c("milk", "cheese", "pizza")
x <- matrix(1:9, 3, 3)
sup_tab <- bea_io$toy$sup_table(x)
colnames(sup_tab)[1:3] <- rownames(sup_tab)[1:3] <- is
c_mat <- bea_io$toy$c_matrix(sup_tab)
d_mat <- bea_io$toy$d_matrix(sup_tab)

sup_tab
c_mat
d_mat
```



## Census of Agriculture

Code: [pubdata/agcensus](https://github.com/antonbabkin/pubdata/blob/main/nbs/agcensus.md)

The [Census of Agriculture](https://www.nass.usda.gov/AgCensus/index.php) is a complete count of U.S. farms and ranches and the people who operate them.
The Census of Agriculture, taken only once every five years, looks at land use and ownership, operator characteristics, production practices, income and expenditures.


## Geographic shapefiles

Code: [pubdata/geography](https://github.com/antonbabkin/pubdata/blob/main/nbs/geography.md)

County cartographic boundary files from Census Bureau [Geography Program](https://www.census.gov/geographies/mapping-files/time-series/geo/cartographic-boundary.html).
The cartographic boundary files are simplified representations of selected geographic areas from the Census Bureauâ€™s Master Address File/Topologically Integrated Geographic Encoding and Referencing (MAF/TIGER) System.

We currently use a single revision of county shape files (20??).
Recognizing that county shapes change over time, we have also built capability to use other years.



# Methodology

## CBP imputation

Code: 

- [pubdata/cbp](https://github.com/antonbabkin/pubdata/blob/main/nbs/cbp.md)
- [R/dataprep_cbp.R]()

We need county payroll by 6-digit NAICS industry.
It is often suppressed along with employment.

Up to 2016, we can use EFSY imputed employment and derive missing payroll as follows.

First, for every industry we calculate total suppressed employment (`emp_sup`) and annual payroll (`ap_sup`) by subtracting sum of unsuppressed county employment and payroll from national totals.
We then impute annual payroll in counties with EFSY employment as `ap_efsy(county) = emp_efsy(county) / emp_sup * ap_sup`.
Intuition of this calculation is that county share of suppressed payroll is proportional to it's share of suppressed employment.

The table below shows percentage of employment and payroll in raw and imputed CBP relative to national totals at different NAICS digit levels from 2012.


```{r}
#| tbl-cap: County sum as percentage of national total
df <- cbp$call_cbp(year = 2012, cbp_scale = "county", imputed = FALSE) |>
  select(place, naics, emp, ap) |>
  rename_with(\(x) paste0(x, "_raw"), c(emp, ap))
d <- cbp$call_cbp(year = 2012, cbp_scale = "county", imputed = TRUE) |>
  select(place, naics, emp, ap) |>
  rename_with(\(x) paste0(x, "_imp"), c(emp, ap))
df <- left_join(df, d, join_by(place, naics))

dsum <- df |>
  mutate(naics_dig = str_length(naics)) |>
  group_by(naics_dig) |>
  summarize(across(starts_with(c("emp", "ap")), sum))

d <- cbp$call_cbp(year = 2012, cbp_scale = "us", imputed = FALSE) |>
  filter(lfo == "-") |>
  select(naics, emp, ap) |>
  rename_with(\(x) paste0(x, "_nat"), !naics) |>
  mutate(naics_dig = str_length(naics)) |>
  group_by(naics_dig) |>
  summarize(across(c(emp_nat, ap_nat), sum))

left_join(dsum, d, join_by(naics_dig)) |>
  mutate(
    emp_raw_pct = emp_raw / emp_nat * 100,
    emp_imp_pct = emp_imp / emp_nat * 100,
    ap_raw_pct = ap_raw / ap_nat * 100,
    ap_imp_pct = ap_imp / ap_nat * 100
  ) |>
  select(naics_dig, ends_with("pct")) |>
  mutate(across(!naics_dig, \(x) round (x, 1)))


```



## InfoGroup county aggregates

Code: [rurec/infogroup_pq](https://github.com/antonbabkin/rurec/blob/main/nbs/infogroup_pq.qmd)

Establishments, employment and sales are calculated at county-NAICS level by summing individual establishment observations.


## NAICS-BEA reconciliation

Code:

- [pubdata/bea_io](https://github.com/antonbabkin/pubdata/blob/main/nbs/bea_io.md)
- [R/dataprep_bea_io.R]()

- economic activity data comes by NAICS, needs re-grouping to match BEA I-O tables
- a few industries can not be cleanly matched (entire construciton sector and a few smaller ones)

BEA industry classification has four nested levels: sector, summary, underlying summary and detail.
BEA-NAICS crosswalk is usually one-to-many mapping from detail to NAICS, where NAICS can be any level.
Exceptions are Construction (sector 23) and Housing (HS) and Other Real Estate (ORE).

Construction (sector code 23) does not map to NAICS below sector level.
We ignore all BEA subindustries and add an artificial industry "23" to every level (sector, summary, u.summary, detail) which maps to NAICS 23.

HS and ORE both map into NAICS 531.
We group them into a single summary industry called "531".

Sectors in sector-level Use and Supply tables are not always the same as sectors in the BEA-NAICS crosswalk.
To address this, we map correct sectors into NAICS as follows:

```{r}

d <- bea_io$call_ilevel_concord("sec")
d %>%
  filter(SECTOR %in% (d %>% group_by(SECTOR) %>% summarize(n = n()) %>% filter(n > 1) %>% pull(SECTOR)))
```

When industries are aggregated at summary level, we create a concordance that maps BEA to 3-digit NAICS.
Many-to-one cases that are created in the process "336" (3361MV, 3364OT) and  "541" (5411, 5412OP, 5415).




## Place output

Code: [R/place_output.R]()

Dollar value of economic output by industry in a place (county) is calculated separately for agricultural and non-agricultural sectors.
We assume that economic activity in the agricultural sector, defined here as NAICS codes 111 and 112, is fully covered by the Census of Agriculture.
Activity in the rest of the economy is taken from a business dataset, such as CBP or InfoGroup.
In the case of InfoGroup, establishments with agricultural NAICS codes are dropped to avoid double-counting over the Census of Agriculture.

Toy example.

```{r}
industry_names <- c("ag_1", "ag_2", "nonag_1", "nonag_2")
industry_count_ag <- 2
industry_count_nonag <- 2
place_names <- c("a", "b")

sup_tab <- matrix(c(9, 0, 1, 1, 
                    0, 7, 2, 1, 
                    1, 0, 18, 3,
                    0, 1, 1, 23), length(industry_names), length(industry_names), dimnames = list(industry_names, industry_names)) %>%
  bea_io$toy$sup_table(0)
c_mat <- bea_io$toy$c_matrix(sup_tab)
d_mat <- bea_io$toy$d_matrix(sup_tab)

sup_tab
c_mat
d_mat
```

### agricultural sector


Although some statistics in the publicly available Census of Agriculture dataset are reported by county at 6-digit NAICS level, measures of dollar output are not among them.
Thus, we take county farm sales of individual agricultural commodities (e.g. corn, wheat, hogs etc.) and combine them to obtain estimates of agricultural output by industry.
In this transformation, we go directly to BEA detail-level industry classification.

Some county-commodity sales are suppressed in AgCensus, understating national totals, but the difference is minor.
"Other" categories (111900: "Other crop farming" and 112A00: "Animal production, except cattle and poultry and eggs") are calculated by subtracting the rest from county crop and animal totals.
This leads to overestimation of Others.

For illustration, see County Table 2. Market Value of Agricultural Products Sold Including Direct Sales in the Census of Agriculture.
Details and code are in the [`ag_output`](https://github.com/antonbabkin/rurec/blob/main/nbs/ag_output.md) notebook.

The bar bar chart below shows total output of the 10 agricultural industries in BEA (ag commodities in ag sector and ag sector industry totals), and national and county totals of AgCensus farm sales.
Difference between national and county shows effect of data suppression.

```{r}
year <- 2012
# BEA ag commodities in ag sector and ag industry total output
x <- bea_io$call_bea_supply_table(year, "det")
d <- data.frame(
  industry = colnames(x)[1:10],
  BEA_commodity = diag(x)[1:10],
  BEA_industry = x["T017", 1:10]
)
# national sale totals from Census of Agriculture
x <- agcen$get_farm_sales_by_bea_detail(year, "national") %>%
  t() %>%
  `colnames<-`("AgCensus_national") %>%
  as_tibble(rownames = "industry")
d <- inner_join(d, x, "industry")
# sum of county sales from Census of Agriculture
x <- agcen$get_farm_sales_by_bea_detail(year, "county") %>%
  colSums() %>%
  as_tibble(rownames = "industry") %>%
  rename(AgCensus_county = value)
d <- inner_join(d, x, "industry")

d <- d %>%
  mutate(across(c(AgCensus_national, AgCensus_county), \(x) x / 1e6))

d %>%
  pivot_longer(!industry) %>%
  ggplot() +
  geom_col(aes(industry, value, fill = name), position = position_dodge())

x <- bea_io$pubdata$get_sup(year, "det")$row_names
x[1:10] %>% 
  list_transpose(simplify = TRUE) %>%
  set_names(c("code", "label")) %>%
  data.frame()
```


Although we assume that the Census of Agriculture covers the entirety of the agricultural sector (NAICS 111 and 112), farm sales do not include non-agricultural commodity outputs observed in the agricultural columns of the Supply table.
In addition, AgCensus national sales are close, but do not exactly match national numbers in the Supply table.
To account for both discrepancies, we rescale numbers obtained from AgCensus so that national totals match Total industry supply (row "T017") of the agricultural sector in the Supply table.



```{r}
industry_ag_names <- industry_names[1:industry_count_ag]
agcen_sales <- matrix(c(4, 4, 1, 4), industry_count_ag, length(place_names), 
                      dimnames = list(industry_ag_names, place_names))

# every county's farm industry output is proportional to county's share in national ag commodity output
nat_output <- sup_tab["i_tot_out", industry_ag_names]
place_share <- sweep(agcen_sales, 1, rowSums(agcen_sales), "/")
ag_i_tot_out <- sweep(place_share, 1, nat_output, "*")


nat_output
agcen_sales
place_share
ag_i_tot_out
```

### non-agricultural sector

- business data from CBP or InfoGroup
- county share trick: can use either payroll or sales, don't need to explicitly turn payroll into output

```{r}
nonag_industry_names <- industry_names[-(1:industry_count_ag)]
nonag_bus_value <- matrix(c(10, 10, 
                            20, 10), 
                          industry_count_nonag, length(place_names),
                          byrow = TRUE,
                          dimnames = list(nonag_industry_names, place_names))

nonag_nat_output <- sup_tab["i_tot_out", nonag_industry_names]

# every county's nonag industry output is proportional to county's share in national nonag "value" (payroll or sales)
place_share <- sweep(nonag_bus_value, 1, rowSums(nonag_bus_value), "/")
nonag_i_tot_out <- sweep(place_share, 1, nonag_nat_output, "*")


nonag_nat_output
nonag_bus_value
place_share
nonag_i_tot_out
```


### combine ag and nonag, translate to commodity space


```{r}
i_tot_out <- rbind(ag_i_tot_out, nonag_i_tot_out)
c_tot_out <- c_mat %*% i_tot_out

i_tot_out
c_tot_out
# county total output is the same whether measured in industry or commodity space
all.equal(colSums(i_tot_out), colSums(c_tot_out))
# industry total output matches national total from Supply table
all.equal(rowSums(i_tot_out), sup_tab["i_tot_out", industry_names])
# commodity total output matches national total from Supply table
all.equal(rowSums(c_tot_out), sup_tab[industry_names, "c_tot_out"])
```



## Intermediate demand and supply

### notation

- n_i: number of industries
- n_c: number of commodities
- r: number of places (counties)
- y_i or y_c: national output by industry or commodity (vector of length n_i or n_c)
- Y_i or Y_c: place output by industry or commodity (matrix `n_i * r` or `n_c * r`)
- x_i or x_c: national industry or commodity intermediate use (vector of length n_i or n_c)
- X_i or X_c: place industry or commodity intermediate use (matrix `n_i * r` or `n_c * r`)
- f_c: national commodity final use (vector n_c)
- w_c: national commodity supply wedge (vector n_c)
- B: B-matrix, technical coefficients (matrix `n_c * n_i`)
- C: C-matrix, commodity composition of industry unit output (matrix `n_c * n_i`)
- D: D-matrix, industry source of commodity unit output (matrix `n_i * n_c`)

Supply table:
national commodity supply = y_c + w_c

Supply wedge are columns on the right side of the supply table:
w_c = national supply - national output = imports + margins + taxes 

Use table:
national commodity demand = x_c + f_c

Final use are columns on the right side of the use table:
f_c = total use - intermediate use = exports + consumption + investment + government


Market clearing / accounting balance: total supply = total use
`(y_c + w_c) == (x_c + f_c)`


Toy example.


```{r}
nam_ind <- paste0("i", 1:3)
nam_com <- paste0("c", 1:3)
nam_pl <- letters[1:3]

sup_mat <- matrix(c(
  9, 1, 1,
  1, 7, 0,
  0, 2, 4
), nrow = 3, ncol = 3, byrow = TRUE, dimnames = list(nam_com, nam_ind))
sup_tab <- bea_io$toy$sup_table(sup_mat, wedge = c(-4, 4, 1))

use_mat <- matrix(c(
  2, 0, 2,
  5, 1, 2,
  0, 6, 0
), nrow = 3, ncol = 3, byrow = TRUE, dimnames = list(nam_com, nam_ind))
va <- colSums(sup_mat) - colSums(use_mat)
try(test_that("value added positive in every industry", {
  all_true <- is.finite(va)
  expect_equal(va > 0, all_true) 
}))

use_tab <- bea_io$toy$use_table(use_mat, va = va, final = c(3, 4, 1))

try(test_that("total supply == total use",
              expect_equal(sup_tab[nam_com, "c_tot_sup"], use_tab[nam_com, "c_tot_use"])))
try(test_that("industry output equal between supply and use tables",
              expect_equal(sup_tab["i_tot_out", nam_ind], use_tab["i_tot_out", nam_ind])))

b_mat <- bea_io$toy$b_matrix(use_tab)
c_mat <- bea_io$toy$c_matrix(sup_tab)
d_mat <- bea_io$toy$d_matrix(sup_tab)

pl_i_out <- matrix(c(
  3, 4, 3,
  3, 3, 4,
  1, 3, 1
), nrow = 3, ncol = 3, byrow = TRUE, dimnames = list(industry = nam_ind, county = nam_pl))
try(test_that("aggregate industry output matches supply table totals",
              expect_equal(rowSums(pl_i_out), sup_tab["i_tot_out", nam_ind])))

pl_c_out <- c_mat %*% pl_i_out
try(test_that("aggregate commodity output matches supply table totals",
              expect_equal(rowSums(pl_c_out), sup_tab[nam_com, "c_tot_out"])))

cat("\nSupply table\n----\n")
sup_tab
cat("\nUse table\n----\n")
use_tab
cat("\nB-matrix\n----\n")
round(b_mat, 2)
cat("\nC-matrix\n----\n")
round(c_mat, 2)
cat("\nD-matrix\n----\n")
round(d_mat, 2)
cat("\nIndusty-county output\n----\n")
pl_i_out
cat("\nCommodity-county output\n----\n")
pl_c_out %>% round(2)
```


### commodity demand

Intermediate demand is calculated, applying use table to place industry output.

County demand for domestically produced intermediate commodities in producer prices:
How much of every commodity, measured in producer prices, is needed to produce observed level of industry output in a county, excluding the portion satisfied by imports.

dem[i, j] (commodity i, county j) is dollar value, measured in producer prices (= purchaser price - taxes and margins), of commodity i that county j needs to buy from domestic producers to produced observed level of industry output in county i (excluding inputs that it imports from foreign producers).

Formula: `(I * y_c / (y_c + w_c)) * (B * Y_i)`

Interpretation:
`(B * Y_i)` is a `(n_c, r)` matrix of total county commodity demand for intermediates (in purchaser prices, including margins, taxes and imports).
`y_c / (y_c + w_c)` is a `(n_c)` vector of domestic production shares of total national commodity supply. 
(national commodity output / national commodity supply)
Pre-multiplying total commodity demand by the domestic share vector, we obtain county commodity demand for domestic intermediates.



### commodity supply


County supply of domestically produced intermediate commodities in producer prices:
How much of every commodity, measured in producer prices, is supplied by domestic producers for domestic use as intermediate inputs, excluding supply for exports and other final uses (consumption etc.)

sup[i, j] (commodity i, county j) is dollar value of commodity i output in county j that is used as intermediate input by domestic producers (excluding final uses - exports, consumption etc.)

Formula:
`(I * x_c / (x_c + f_c)) * (C * Y_i)`

Interpretation:
`(C * Y_i)` is a `(n_c, r)` matrix of county total commodity production (in purchaser prices, including output used for exports and other final uses).
`x_c / (x_c + f_c)` is a `(n_c)` vector of domestic intermediate use shares of total national commodity supply. 
(national commodity intermediate use / national commodity supply)
Pre-multiplying total commodity production by the domestic use share vector, we obtain county commodity supply of domestic intermediates.



### market clearing verification

National analog of demand and supply:
demand = `y_c / (y_c + w_c) * (B * y_i)` = `y_c / (y_c + w_c) * x_c`
supply = `x_c / (x_c + f_c) * (C * y_i)` = `x_c / (x_c + f_c) * y_c`
Note: (y_c + w_c) == (x_c + f_c) == national commodity supply

demand = `y_c / (y_c + w_c) * x_c`
  = `y_c * x_c / (y_c + w_c)`
  = `y_c * x_c / (x_c + f_c)` (market clearing)
  = `x_c / (x_c + f_c) * y_c`
  = supply

Does it hold at county level?
Yes, it does because `rowSums(B * Y_i) == B * y_i` and `rowSums(C * Y_i) == C * y_i`

NOTE: `old_demand=(B*Y_i)=(C*Y_i)*(x_c/(x_c +f_c))/(y_c/(y_c +w_c))=B*y_i*t(D)/y_i*Y_i=old_supply`




```{r}
pl_use <- b_mat %*% pl_i_out
try(test_that("Aggregated county use equals total intermediate use", {
  expect_equal(rowSums(pl_use), use_tab[nam_com, "c_int_use"])}))
adj_dem <- sup_tab[nam_com, "c_tot_out"] / sup_tab[nam_com, "c_tot_sup"]
pl_dem <- sweep(pl_use, 1, adj_dem, "*")

adj_sup <- use_tab[nam_com, "c_int_use"] / use_tab[nam_com, "c_tot_use"]
pl_sup <- sweep(pl_c_out, 1, adj_sup, "*")

try(test_that("Aggregated demand = agg supply for each commodity", {
  expect_equal(rowSums(pl_dem), rowSums(pl_sup))}))

cat("\nCommodity-county intermediate use\n----\n")
pl_use %>% round(2)
cat("\nCommodity-county demand\n----\n")
pl_dem %>% round(2)
cat("\nCommodity-county output\n----\n")
pl_c_out %>% round(2)
cat("\nCommodity-county supply\n----\n")
pl_sup %>% round(2)
```



### missing industries

Activity in some BEA industries (notably government) is not available in business data.
Depending on the data source, a few other industries are also missing.

Our approach is to effectively take the corresponding columns out of the core matrices of the Supply and Use Table, and to treat them as another column in the outer section - "wedge" of the Supply Table and "final use" of the Use Table.
When supply is scaled by `x_c / (x_c + f_c)`, this can be interpreted as exclusion of output used by missing industries.
When demand is scaled by `y_c / (y_c + w_c)`, this can be interpreted as exclusion of use satisfied by production from missing industries.
In both cases, commodity use (output) from the missing industries is moved from `x_c` to `f_c` (from `y_c` to `w_c`).

Industry total output still matches BEA national output (for non-missing industries), but aggregate commodity output will be often lower.
Yet, the demand and supply thus calculated will still balance for each commodity.

Toy example illustrates.

```{r}
pl_i_out0 <- pl_i_out
pl_i_out0["i1", ] <- 0
nam_indp <- rownames(pl_i_out0)[rowSums(pl_i_out0) > 0]
pl_c_out0 <- c_mat %*% pl_i_out0

pl_use0 <- b_mat %*% pl_i_out0


adj_dem <- rowSums(sup_tab[nam_com, nam_indp]) / sup_tab[nam_com, "c_tot_sup"]
pl_dem0 <- sweep(pl_use0, 1, adj_dem, "*")
adj_sup <- rowSums(use_tab[nam_com, nam_indp]) / use_tab[nam_com, "c_tot_use"]
pl_sup0 <- sweep(pl_c_out0, 1, adj_sup, "*")

try(test_that("Aggregated demand = agg supply for each commodity", {
  expect_equal(rowSums(pl_dem0), rowSums(pl_sup0))}))

cat("\nCommodity-county intermediate use\n----\n")
pl_use0 %>% round(2)
cat("\nCommodity-county demand\n----\n")
pl_dem0 %>% round(2)
cat("\nCommodity-county output\n----\n")
pl_c_out0 %>% round(2)
cat("\nCommodity-county supply\n----\n")
pl_sup0 %>% round(2)

```




### industry demand and supply

Demand and supply under industry classification are not currently implemented.
There are several conceptual issues that need to be resolved.
Initial ideas are left in this section if we want to address this in the future.


There are two possible interpretations of demand (and supply) by *industry*.
The first, which we follow here, interprets industry demand as demand of the industry for intermediates.
For example, "baking industry demand" is the dollar value of inputs that the baking industry needs to produce its observed level of output.
The second interpretation of "industry demand" is the demand for outputs of the industry, e.g. what other industries need as inputs from what the baking industry produces.
An analogous pair exists on the supply side, which we discuss in the corresponding section below.
It is easy to confuse the two alternative meanings, and we try to be precise and explicit when we talk about demand and supply in industry terms.


County intermediate *industry* demand: value of intermediates needed by every industry to produce observed level of output.
National intermediate commodity demand := `colSums(B) * y_i` (element-wise)
Place intermediate commodity demand := `colSums(B) * Y_i` (every column element-wise)
Demand of industry `i` in place `j` := `sum(B[., i]) * Y_i[i, j]`


Intermediate Industry Supply = `D * B * IndustryOutput_county`




#### commodity-industry invariance?

Are results sensitive to commodity vs industry classification choice?
For example, do measures of intermediate circularity stay the same?
This needs further investigation, but they probably don't.

Example.


```{r}
sup_tab <- matrix(c(
  10, 5,
  0, 5
), 2, 2, byrow = TRUE) |>
  bea_io$toy$sup_table(wedge = 0)
c_mat <- bea_io$toy$c_matrix(sup_tab)
d_mat <- bea_io$toy$d_matrix(sup_tab)

sup_tab
c_mat
d_mat
```

```{r}
sup_i <- c(0, 2) # county industry output = supply
sup_i
# 
# CxC direct requirements = B * C
sup_c <- c(c_mat %*% sup_i) # county commodity supply

sup_c

dem_c <- c(0.9, 0.3) # B * output
dem_c
dem_i <- c(d_mat %*% dem_c) # c(0.67, 0.83)
# what should a suppling county industry output look like to satisfy dem_i?
# i_2 output translates to (using C-matrix, commodity technology) to c_1 = 0.415 and c_2 = 0.415
# i_1 output is just c_1 = 0.67
# but then total c_1 = 0.41 + 0.67 > 1
# and c_2 = 0.41 < 0.5
# ^ this is wrong. why?

# then what is the correct interpretation of dem_i?
# (follow the D-matrix, industry technology)
# to produce c_1 = 1, 0.67 comes from i_1 and 0.33 from i_2
# c_2 = 0.5: 0.5 comes from i_2
# totals: i_1 = 0.67, i_2 = 0.5 + 0.33 = 0.83

# dem_i <- c(solve(c_mat) %*% dem_c) # c(0.5, 1), but can not do this, because C-matrix is in general not invertible
# to get 0.5 of c_2 you need i_2 output = 1
# then i_2 will also output 0.5 of c_1
# this satisfies part of the demand for c_1 (=1)
# so we need 1-0.5 more, which comes from i_1, so output of i_1 = 0.5
# dem_i = c(0.5, 1)

dem_i

pmax(0, sup_i - dem_i)
pmax(0, sup_c - dem_c)

pmax(0, dem_i - sup_i)
pmax(0, dem_c - sup_c)
```









## Supply from output

Code: []()

County supply by commodity = County output by commodity * (Total Intermediate from Use table / Total Commodity Output from Supply table) ?

County supply by industry = D-matrix * County supply by commodity ?



## Gravity model

Code: []()

- trade flow from A to B is proportional to supply in A and demand in B, and inversely proportional to distance between A and B
- distance can be factored in using different functional forms (see Impedance)
- gravity model estimates are only a starting point and are further rescaled by RAS balancing algorithm
- no hard proof, but in limited testing we observe that relative ordering of trade flows between different locations is mostly preserved through RAS


## Impedance

Code: []()

- distance between counties from shapefiles
  - center to center
  - border to border
  - number of county "hops"
- impedance: more distant trade is more difficult
  - binary, Gaussian, truncated Gaussian, Queens, ...


## Pre-RAS adjustments

Code: []()

- RAS requires total demand = total supply in each industry/commodity
- our demand and supply estimates do not satisfy this because data comes from different sources and is processed under a set of assumptions
- hence we do ??? before feeding it into RAS


## RAS

Code: []()


- an algorithm of iteratively rescaling a matrix to match target row and column totals
- why it is called RAS
- we apply it to gravity model trade flow estimates to match our supply and demand estimates


## ECA

Code: `R/connectedness.R`.

### absorption

Calculate place-to-place industry (commodity) level measures of connectedness.
For every source county `i`, destination county `j` and industry (commodity) `k`:
- `excess_supply(i, k) = max(supply(i, k) - demand(i, k), 0)`
- `excess_demand(j, k) = max(demand(j, k) - supply(j, k), 0)`
- `nominal_absorption(i, j, k) = min(excess_supply(i, k), excess_demand(j, k))`

Aggregate across industries (commodities):
- `total_nominal_absorption(i, j) = sum_k(nominal_absorption(i, j, k))`

Normalize by county `i`'s total excess supply:
- `normalized_absorption(i, j) = total_nominal_absorption(i, j) / sum_k(excess_supply(i, k))`

Normalized absorption ranges from 0 (county `j` will not accept anything of what `i` has to offer) to 1 (county `j` can accept entire excess supply of county `i`).

For every source county `i`, take max over all potential destination counties `j`.
- `max_normalized_absorption(i) = max_j(normalized_absorption(i, j))`
- `top_destination(i) = argmax_j(normalized_absorption(i, j))`

Partition the entire space of counties into three ECA classes:
1. *ECA cores*. Identify set of ECA "cores" (destinations) as all county `j`'s that are top destination for at least one other county `i`.
2. *Isolated*. Counties that are not "cores" and have `max_normalized_absorption` below a set threshold (e.g. 5%) are classified as isolated.
3. *ECA outlying*. For each "core" county `j`, identify set of "outlying" (source) counties that have `j` as their top destination for the list of non-isolated non-core counties.

ECA cores can be broken into two sub-classes: isolated (max absorption below threshold) and not.

#### Impedance

### trade flow

Nominal connectedness measure:
`trade_flow(i, j, k)`, solution of trade flows transportation cost minimization problem.

Aggregate:
`total_trade_flow(i, j) = sum_k(trade_flow(i, j, k))`

Normalize:
```
trade_flow_share(i, j) = total_trade_flow(i, j) / sum_j(total_trade_flow(i, j))
  = total_trade_flow(i, j) / total_excess_supply(i)
```

What is it to be isolated under trade flow connectedness?

- Option 1: same as ECAs, isolated <=> `max_j(trade_flow_share(i, j) < threshold`.
The weakness of this approach is that trade flow shares sum up to 1, and their max tells more about distribution of exports than about county's connectability.

- Option 2: Use trade capacity as the metric (`excess_supply(i) / total_output(i)`).
Then counties can be isolated either because they do not produce intermediates, or they process most of their intermediates locally.


### implementation

```{r}
source("R/trade_flows.R", local = (tf <- new.env()))
source("R/connectedness.R", local = (conn <- new.env()))

x <- tf$call_trade_flows("all_industries")
x_norm <- sweep(x, 1, rowSums(x), "/")
x_norm[is.na(x_norm)] <- 0
conn_metrics <- conn$apply_absorption_metrics(x_norm)
df <- conn$apply_absorption_algorithm(conn_metrics, threshold = 0)
df

```


### robustness

Comparing ECA's with and without 2 ag industries (oilseed and dairy).
106 counties change their sink, and 31 among them change between being sinks and sources.

```{r}
source("R/basic_utilities.R", local = (util <- new.env()))
source("projects/eca_paa/dataprep.R", local = (dp <- new.env()))

# earlier version: with 2 industries missing
util$zip_unpack("tmp/eca_paa_data_v240222.zip", overwrite = TRUE)
d0 <- dp$call_eca_df()

# later version with 2 industries added
util$zip_unpack("tmp/eca_paa_data_v240226.zip", overwrite = TRUE)
d1 <- dp$call_eca_df()

d <- full_join(d0, d1, "fips", suffix = c("0", "1")) |>
  mutate(
    eca_cluster_category_same = (eca_cluster_category0 == eca_cluster_category1),
    eca_membership_same = (eca_membership0 == eca_membership1),
    max_trade_share_dev = abs(max_trade_share0 - max_trade_share1)
  )

d |> count(eca_cluster_category_same, eca_membership_same)

ggplot(d) + geom_boxplot(aes(max_trade_share_dev))
```



