---
title: "Index for R"
format: html
---


# Data packaging

`zip_pack()` and `zip_unpack()` functions from utilities module can be used to package a list of data files and unpack them to same locations in a different environment.


```{r}
source("R/basic_utilities.R", local = (util <- new.env()))
source("R/dataprep_bea_io.R", local = (bea_io <- new.env()))
source("R/geography.R", local = (geo <- new.env()))
source("R/dataprep_cbp.R", local = (cbp <- new.env()))
source("R/dataprep_infogroup.R", local = (ig <- new.env()))
source("R/dataprep_agcensus.R", local = (agcen <- new.env()))

# pack all outputs from 5 dataprep modules, excluding parquet'd establishment-level infogroup
# list(bea_io$opath, geo$opath, cbp$opath, ig$opath["county_"], agcen$opath, dataprep$opath["population"]) |> 
#   list_c() |> list_c() |> # cat paths from all lists into single vector
#   util$zip_pack("tmp/bea_cbp_geo_ig_ag_pop_v240123.zip", files = _, overwrite = TRUE)
# unpack
# util$zip_unpack("tmp/bea_cbp_geo_ig_ag_v231109.zip", overwrite = TRUE)


```


# Python pubdata

```{r}
source("R/pubdatapy.R", local = (pubdatapy <- new.env()))
pubdatapy$build_naics(overwrite = FALSE)
```


# BEA I-O tables

BEA Input-Output tables with select industries combined.

```{r}
source("R/bea_io.R", local = (bea_io <- new.env()))

# cache
bea_io$cache$enabled # current status, can be set to TRUE or FALSE
bea_io$cache$clear()
bea_io$cache$build()
bea_io$cache$pack("tmp/cache_bea_io_v241120.zip")
bea_io$cache$unpack("tmp/cache_bea_io_v241120.zip")

# example usage
bea_io$concordance()
bea_io$make_table(2012, "sum")
bea_io$domuse_table(2012, "det")
bea_io$ind_totals(2012, "sum")
bea_io$com_totals(2012, "sum")
```



# Geography


```{r}
source("R/geography.R", local = (geo <- new.env()))


# test module functions
# geo$clear_outputs()
# geo$test_pubdata()
# geo$test_dataprep()

# example usage
geo$call_cbsa_concord(2013)

```


# CBP

```{r}
source("R/dataprep_cbp.R", local = (cbp <- new.env()))

# testing
# cbp$clear_outputs()
# cbp$test_naics_years()

# example usage
cbp$call_cbp(2012, "county", FALSE)

# util$zip_pack("tmp/datapack_cbp_v240710.zip", files = cbp$opath, overwrite = TRUE)
```



# InfoGroup


```{r}
source("R/dataprep_infogroup.R", local = (ig <- new.env()))

# build enhanced parquet dataset (requires raw InfoGroup data)
ig$prep_enh()

# build county aggregates (requires enhanced parquet dataset)
ig$prep_county_agg(1997:2017)

# example: county soybean processing
open_dataset(glue(ig$opath$county_, .envir = list(year = 2012))) |>
  filter(naics == "311224") |>
  arrange(st, cty) |>
  collect()

# util$zip_pack("tmp/datapack_infogroup_county_v240709.zip", files = ig$opath$county_, overwrite = TRUE)
```

# Census of Agriculture

Farm sales


```{r}
source("R/dataprep_agcensus.R", local = (agcen <- new.env()))

# testing
# agcen$test_all()

# county output of BEA detail agricultural industries
agcen$call_agoutput(2012, "county")

# util$zip_pack("tmp/datapack_agcen_v240709.zip", files = agcen$opath, overwrite = TRUE)
```


# Place I-O

County-industry estimates of output, supply and demand.

```{r}
source("R/place_io.R", local = (place_io <- new.env()))

# cache
place_io$cache$enabled # current status, can be set to TRUE or FALSE
place_io$cache$clear()
place_io$cache$build()
place_io$cache$pack("tmp/cache_place_io_v241120.zip", overwrite = TRUE)
place_io$cache$unpack("tmp/cache_place_io_v241120.zip")

# county industry output
place_io$ind_output(year = 2012, ilevel = "det", bus_data = "cbp_imp")
# commodity supply and demand
place_io$outsupdem(2012, ilevel = "det", bus_data = "cbp_imp")

```


# Population

```{r}
source("R/dataprep.R", local = (dataprep <- new.env()))

dataprep$call_population()

```


# Trade flows

```{r}
source("R/trade_flows.R", local = (tf <- new.env()))

# prepare demand and supply matrices
tf$prep_demsup_mat()

# solve for single industry
x <- tf$call_trade_flows("112120")

# sum up all trade flows across all industries
x <- tf$call_trade_flows("all_industries")

# packing and unpacking county aggregates (uncomment as needs)
# source("R/basic_utilities.R", local = (util <- new.env()))
# util$zip_pack("tmp/trade_flows_v240226.zip", tf$opath$flows_)
# util$zip_unpack("tmp/trade_flows_v240226.zip", overwrite = TRUE)
```

# Circularity

```{r}
source("R/circularity.R", local = (circularity <- new.env()))

circularity$circularity_indicators(2012, "cbp_imp")

```

# Dynamism

```{r}
source("R/basic_utilities.R", local = (util <- new.env()))
source("R/dataprep.R", local = (dataprep <- new.env()))
source("R/geography.R", local = (geo <- new.env()))
source("R/visualization.R", local = (visual <- new.env()))

# for(y in 2003:2016){
#   dataprep$call_econ_dynam_ind(year = y)
# }

# util$zip_pack("tmp/econ_dynamism_v240221.zip", dataprep$opath$econ_dynam_ind_, overwrite = TRUE)
# util$zip_unpack("tmp/econ_dynamism_v240221.zip", overwrite = TRUE)

df <- dataprep$call_econ_dynam_ind(year = 2012)
str(df)

```


# Prosperity


## premature death

```{r}
source("R/dataprep_prosperity.R", local = (prosperity <- new.env()))

prosperity$call_premature_death_df()

```



## unemployment rate

```{r}
source("R/dataprep_prosperity.R", local = (prosperity <- new.env()))

prosperity$call_unemployment_rate_df()

```


## net migration rate 

```{r}
source("R/dataprep_prosperity.R", local = (prosperity <- new.env()))

prosperity$call_netmigration_df()


```



## premature death

```{r}
source("R/dataprep_prosperity.R", local = (prosperity <- new.env()))

prosperity$call_CHRR_df()


```


## population growth

```{r}
# calculate ad hoc

```


## education

```{r}
source("R/dataprep_prosperity.R", local = (prosperity <- new.env()))

prosperity$call_education_df()

```


## labor force participation rate

```{r}
source("R/dataprep_prosperity.R", local = (prosperity <- new.env()))

prosperity$call_lfpr_df()

```


## saipe

```{r}
source("R/dataprep_prosperity.R", local = (prosperity <- new.env()))

prosperity$call_saipe_df()


```




