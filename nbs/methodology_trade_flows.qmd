---
title: "Methodology: trade flows estimation"
format: html
---


```{r}
library(tidyverse)
library(sf)
library(units)
library(tmap)
library(patchwork)
tmap_mode("plot")
library(lpSolve)

source("R/place_output.R", local = (place_output <- new.env()))
source("R/trade_flows.R", local = (tf <- new.env()))
source("R/geography.R", local = (geog <- new.env()))
```


```{r}
#' Viz matrix as a heat map using ggplot
plot_heatmap <- function(x, zero_na = TRUE, discrete = FALSE) {
  if (is.null(rownames(x))) rownames(x) <- 1:nrow(x)
  if (is.null(colnames(x))) colnames(x) <- 1:ncol(x)
  x |>
    as_tibble(rownames = "from") |>
    pivot_longer(!from, names_to = "to") |>
    mutate(
      from = ordered(from, levels = rev(rownames(x))),
      to = ordered(to, levels = colnames(x)),
      value = if (zero_na) na_if(value, 0) else value,
      value = if (discrete) ordered(value) else value
      ) |>
    ggplot() +
    scale_x_discrete(position = "top") +
    geom_tile(aes(to, from, fill = value)) +
    coord_fixed()
}

x <- matrix(runif(25) * 4, 5, 5)
plot_heatmap(x)
plot_heatmap(floor(x))
plot_heatmap(floor(x), discrete = TRUE)

```

# Problem size

How many counties have positive excess supply or demand in every industry?


```{r}

# county demand
df <- place_output$call_intermediate(
  year = 2012, 
  schedule = "demand", 
  paradigm = "domestic", 
  class_system = "commodity", 
  ilevel = "det",
  bus_data = "infogroup")

# county supply
d <- place_output$call_intermediate(
  year = 2012, 
  schedule = "supply", 
  paradigm = "domestic", 
  class_system = "commodity", 
  ilevel = "det",
  bus_data = "infogroup")

df <- inner_join(df, d, join_by(indcode, place))

df_supdem_counts <- df |>
  group_by(indcode) |>
  summarize(
    sup_pos = sum(supply > 0),
    dem_pos = sum(demand > 0),
    exsup_pos = sum(supply > demand),
    exdem_pos = sum(demand > supply)
  ) |>
  mutate(ex_size = exsup_pos * exdem_pos)
```


# Optimal solution

We want trade flow estimates to satisfy two conditions.
1. Total exports are equal to excess supply, total imports are equal to excess demand for each county.
2. Total transportation cost is minimized.

This is a classic transportation problem, and efficient solution algorithms exist.
We use linear programming solver from `lpSolve` package.

We assume that transportation cost is proportional to linear distance between county centroids.

## toy example

```{r}
sup <- c(2, 0, 0, 1, 0)
dem <- c(0, 1, 1, 0, 1)
loc <- c(1, 2, 3, 4, 5)
dmat <- dist(loc) |> as.matrix()

sol <- lp.transport(
  cost.mat = dmat,
  row.signs = rep("=", length(sup)),
  row.rhs = sup,
  col.signs = rep("=", length(dem)),
  col.rhs = dem,
  integers = NULL
)

sol$solution
sol$objval
```
## algo scaling

Using random supply and demand vectors to assess algorithm run times.

1000x1000 matrix of random numbers is solved in 1 minute.
2000x2000 solved in 15 minutes.

```{r}
n <- 2000
sup <- (runif(n) * 1000)
dem <- runif(n) |> (\(x) x / sum(x) * sum(sup))()
dmat <- dist(1:n) |> as.matrix()

system.time({
sol <- lp.transport(
  cost.mat = dmat,
  row.signs = rep("=", length(sup)),
  row.rhs = sup,
  col.signs = rep("=", length(dem)),
  col.rhs = dem,
  integers = NULL
)
})

plot_heat(sol$solution)
```

## real data

LP solution demonstration for one industry.

In some cases, setting constraints to exact equality fails to yield a feasible solution.
A way to resolve this is to replace supply constraint with `rowSums(x) <= sup` and demand with `colSums(x) >= dem`.
This might even be a preferred approach always, because solution might actually more accurately match constraints, and runtime is faster.
Need to investigate this more.


```{r}
ind_code <- "1111A0"

# county demand
df <- place_output$call_intermediate(
  year = 2012, 
  schedule = "demand", 
  paradigm = "domestic", 
  class_system = "commodity", 
  ilevel = "det",
  bus_data = "infogroup") %>%
  filter(indcode == ind_code) %>%
  select(place, demand)

# county supply
d <- place_output$call_intermediate(
  year = 2012, 
  schedule = "supply", 
  paradigm = "domestic", 
  class_system = "commodity", 
  ilevel = "det",
  bus_data = "infogroup") %>%
  filter(indcode == ind_code) %>%
  select(place, supply)

df <- inner_join(df, d, "place") %>%
  mutate(
    exsup = pmax(supply - demand, 0),
    exdem = pmax(demand - supply, 0)
  )

dmat <- geog$call_dist_mat()
places <- base::intersect(rownames(dmat), df$place)

sup <- df %>%
  filter(exsup > 0, place %in% places) %>%
  select(place, exsup)

dem <- df %>%
  filter(exdem > 0, place %in% places) %>%
  select(place, exdem)

dmat <- dmat[sup$place, dem$place] %>%
  set_units(mi) %>%
  drop_units()

system.time({
sol <- lp.transport(
  cost.mat = dmat,
  row.signs = rep("<=", nrow(sup)),
  row.rhs = sup$exsup,
  col.signs = rep(">=", nrow(dem)),
  col.rhs = dem$exdem,
  integers = NULL
)
})


```


```{r}
trade_flows <- sol$solution
rownames(trade_flows) <- sup$place
colnames(trade_flows) <- dem$place

# imports to Woodbury Co, IA
d <- trade_flows[, "19193"] %>%
  na_if(0) %>%
  as_tibble(rownames = "place")

df <- geog$call_geog() %>%
  rename_with(str_to_lower) %>%
  left_join(d, "place")
d <- geog$pubdata$get_state_df(FALSE) |>
  rename_with(str_to_lower) |>
  select(code, contiguous, bea_region_name) |>
  rename(state_code = code)
df <- left_join(df, d, "state_code")

tm_shape(filter(df, bea_region_name == "Plains")) + tm_fill("value") +
  tm_shape(filter(df, place == "19193")) + tm_fill("blue") +
  tm_shape(filter(geog$pubdata$get_state_df(TRUE), BEA_REGION_NAME == "Plains")) + tm_borders() +
  tm_layout(main.title = "Oilseed imports to Woodbury County, IA", main.title.size = 1)

```


# Implementation

Solver function wrapper passes only positive vectors components to the LP solver.

```{r}
source("R/trade_flows.R", local = (tf <- new.env()))
sup <- c(2, 0, 0, 1, 0)
dem <- c(0, 1, 1, 0, 1)
dmat <- dist(1:5) |> as.matrix()
x <- tf$solve_lp_trade_flows(sup, dem, dmat)
x$solution_full
```

Data prep saves industry-by-county supply and demand matrices.

```{r}
tf$prep_demsup_mat()
```

Solver prep:
- load data for selected industry
- align sup-dem counties with distance matrix
- scale up either supply or demand to make their sums equal
- calculate excess supply and demand

TODO: Verify that solutions with total demand and supply vs excess are identical.
This must be true because local trade is zero distance, and should thus be always filled up by the LP solver.

```{r}
x <- tf$prep_lp_solver_inputs("336213")
str(x)
```

Smaller industries are solved in seconds.
Solution object is returned for inspection.
If equality constraint fails, a second attempt is made with inequality.

```{r}
x <- tf$prep_lp_solver_inputs("335222")
y <- tf$solve_lp_trade_flows(x$sup, x$dem, x$dmat)
plot_heatmap(y$solution[, 1:100])
```

Interface function only returns full trade flows matrix and saves it to cache on first call.

```{r}
source("R/trade_flows.R", local = (tf <- new.env()))
x <- tf$call_trade_flows("1111A0")
```


# Diagnostic

## overview of all industries

```{r}
source("R/trade_flows.R")
sup_mat <- readRDS(glue(opath$supply_, .envir = params_econ))
dem_mat <- readRDS(glue(opath$demand_, .envir = params_econ))

log_threshold(INFO)

d <- data.frame()
for (ind_code in rownames(sup_mat)) {
  x <- call_trade_flows(ind_code)
  sup <- sup_mat[ind_code, rownames(x)]
  dem <- dem_mat[ind_code, colnames(x)]
  ex_sup <- pmax(sup - dem, 0)
  ex_dem <- pmax(dem - sup, 0)
  sol_sup <- rowSums(x)
  sol_dem <- colSums(x)
  finmax <- \(x) max(x[is.finite(x)])
  row <- list(
    ind = ind_code,
    exsup = sum(ex_sup),
    exdem = sum(ex_dem),
    tf_tot = sum(x),
    sup_rmsd = sqrt(mean((sol_sup - ex_sup)^2)),
    sup_max_abs_dev = finmax(abs(sol_sup - ex_sup)),
    sup_max_rel_dev = finmax(abs(sol_sup - ex_sup) / ex_sup),
    dem_rmsd = sqrt(mean((sol_dem - ex_dem)^2)),
    dem_max_abs_dev = finmax(abs(sol_dem - ex_dem)),
    dem_max_rel_dev = finmax(abs(sol_dem - ex_dem) / ex_dem)
  )
  d <- rbind(d, row)
}
d <- d |>
  mutate(tot_abs_dev = abs(exsup - tf_tot),
         tot_rel_dev = tot_abs_dev / exsup)
# distribution of relative errors
d$tot_rel_dev |> quantile(seq(0, 1, 0.1), na.rm = TRUE)
# top relative errors
d |> slice_max(tot_rel_dev, n = 5)

tf_diag <- d
d
```




# RAS + Gravity

An alternative algorithm, used in the literature, uses RAS procedure to achieve balancing flows with demand and supply.
Because RAS results depends on the initial condition, starting from estimates obtained using some form of gravity equation allows to introduce the desirable property of minimized transportation cost.
However the resulting transportation cost will not be at the absolute minimum like in the optimization problem.
There are also multiple algorithm parameters researcher needs to pick that will effect the outcome, such as impedance form in the gravity equation, convergence tolerance and stalling condition.

We explore application of RAS algorithm in this section.

## RAS

### random inputs

```{r}
n <- 10
x0 <- matrix(runif(n*n) * 1000, n, n)
rs1 <- runif(n) |> (\(x) x / sum(x) * sum(x0))() |> sort()
cs1 <- runif(n) |> (\(x) x / sum(x) * sum(x0))() |> sort()

# start with matrix of ones
tf$ras_rescale(matrix(1, n, n), rs1, cs1, tol = 1e-4)$matrix %>%
  cbind(rowSums(x = .)) %>%
  rbind(colSums(x = .)) %>%
  round()

# start with random matrix
tf$ras_rescale(x0, rs1, cs1, tol = 1e-4, maxiter = 20)$matrix %>%
  cbind(rowSums(x = .)) %>%
  rbind(colSums(x = .)) %>%
  round()

```

### change initial matrix

Increasing single element in the initial matrix increases corresponding element in the final matrix.

```{r}
n <- 10
x0 <- matrix(runif(n*n) * 1000, n, n)
rs1 <- runif(n) |> (\(x) x / sum(x) * sum(x0))() |> sort()
cs1 <- runif(n) |> (\(x) x / sum(x) * sum(x0))() |> sort()

m <- 10
xnn0 <- seq(min(x0), max(x0), length.out = m)
xnn1 <- rep(NA, m)
for (i in 1:m) {
  x0m <- x0
  x0m[n, n] <- xnn0[i]
  sol <- tf$ras_rescale(x0m, rs1, cs1, tol = 1e-1, maxiter = 100)
  stopifnot(sol$converged)
  xnn1[i] <- sol$matrix[n, n]
}

plot(xnn0, xnn1)

```

## Gravity

Estimates from gravity equation for different impedance forms.

```{r}
x <- tf$test_map_gravity("1111A0", "prox", 300, "55025") |>
  mutate(imports_from = na_if(imports_from, 0), exports_to = na_if(exports_to, 0))
ppi <- tm_shape(x) + tm_fill("imports_from")
ppe <- tm_shape(x) + tm_fill("exports_to")

x <- tf$test_map_gravity("1111A0", "gaus", 300, "55025") |>
  mutate(
    imports_from = if_else(imports_from < 0.1, NA, imports_from), 
    exports_to = if_else(exports_to < 0.1, NA, exports_to))
pgi <- tm_shape(x) + tm_fill("imports_from")
pge <- tm_shape(x) + tm_fill("exports_to")

tmap_arrange(ppi, ppe, pgi, pge)
```


### proximity impedanace

Convergence rate and result depend on choice of proximity radius.
No convergence if radius is too small.

```{r}
n <- 10
rs1 <- (runif(n) * 1000) |> sort()
cs1 <- runif(n) |> (\(x) x / sum(x) * sum(rs1))() |> sort()
d <- dist(1:n) |> as.matrix() |> set_units(mi)

sols <- data.frame()
for (imp_par in 2:10) {
  imp <- geog$prox_impedance_mat(d, imp_par)
  x0 <- tf$gravity(rs1, cs1, imp)
  diag(x0) <- 0
  sol <- tf$ras_rescale(x0, rs1, cs1, tol = 1e-4, maxiter = 100)
  
  sols <- rbind(sols, append(list(imp_par = imp_par), sol[c("converged", "iterations", "rmsd", "mad", "maxad")]))
  
  if(sol$converged) {
    p1 <- plot_heatmap(imp) + labs(title = glue("Proximity impedance {imp_par}"))
    p2 <- plot_heatmap(sol$matrix) + labs(title = glue("Trade flows, iterations = {sol$iterations}"))
    print(p1 | p2)
  }
}
sols
```

### Gaussian impedance

Convergence takes longer with stronger distance penalty.

```{r}
n <- 10
rs1 <- (runif(n) * 1000) |> sort()
cs1 <- runif(n) |> (\(x) x / sum(x) * sum(rs1))() |> sort()
d <- dist(1:n) |> as.matrix() |> set_units(mi)

sols <- data.frame()
for (imp_par in 1:7) {
  imp <- geog$gaus_impedance_mat(d, imp_par)
  x0 <- tf$gravity(rs1, cs1, imp)
  diag(x0) <- 0
  sol <- tf$ras_rescale(x0, rs1, cs1, tol = 1e-4, maxiter = 100)
  
  sols <- rbind(sols, append(list(imp_par = imp_par), sol[c("converged", "iterations", "rmsd", "mad", "maxad")]))
  
  if(sol$converged) {
    p1 <- plot_heatmap(imp) + labs(title = glue("Gauss impedance {imp_par}"))
    p2 <- plot_heatmap(sol$matrix) + labs(title = glue("Trade flows, iterations = {sol$iterations}"))
    print(p1 | p2)
  }
}
sols
```

### truncanted Gaussian

Allows to impose hard bounds of proximity and distance penalty of Gaussian.

```{r}
n <- 10
rs1 <- (runif(n) * 1000) |> sort()
cs1 <- runif(n) |> (\(x) x / sum(x) * sum(rs1))() |> sort()
d <- dist(1:n) |> as.matrix() |> set_units(mi)

sols <- data.frame()
for (imp_par in 2:10) {
  imp <- geog$gaus_impedance_mat(d, imp_par) * geog$prox_impedance_mat(d, imp_par)
  x0 <- tf$gravity(rs1, cs1, imp)
  diag(x0) <- 0
  sol <- tf$ras_rescale(x0, rs1, cs1, tol = 1e-4, maxiter = 100)
  
  sols <- rbind(sols, append(list(imp_par = imp_par), sol[c("converged", "iterations", "rmsd", "mad", "maxad")]))
  
  if(sol$converged) {
    p1 <- plot_heatmap(imp) + labs(title = glue("Truncated Gauss par {imp_par}"))
    p2 <- plot_heatmap(sol$matrix) + labs(title = glue("Trade flows, iterations = {sol$iterations}"))
    print(p1 | p2)
  }
}
sols
```


## problem of universal distance

Universal impedance parameter for each trading pair (proximity radius or Gaussian truncation) results in sub-optimal allocations.
Gaussian impedance approximates optimal allocation, but is slow to converge.

Truncated Gaussian.

```{r}

sup <- c(4,0,0,3,0)
dem <- c(0,2,2,0,3)
d <- dist(1:5) |> as.matrix() |> set_units(mi)
plot_heat(drop_units(d)) + labs(title = "Distance")

sols <- list()
sol_sum <- data.frame()
for (imp_par in 1:5) {
  imp <- geog$gaus_impedance_mat(d, imp_par) * geog$prox_impedance_mat(d, imp_par)
  p1 <- plot_heatmap(imp) + labs(title = glue("Truncated Gauss par {imp_par}"))
  x0 <- tf$gravity(sup, dem, imp)
  sol <- tf$ras_rescale(x0, sup, dem, tol = 1e-6, maxiter = 100)
  sols[[length(sols) + 1]] <- sol
  sol_sum <- rbind(sol_sum, append(list(imp_par = imp_par), sol[c("converged", "iterations", "rmsd", "mad", "maxad")]))
  if (sol$converged) {
    p2 <- plot_heatmap(sol$matrix) + labs(title = glue("Trade flows, iterations = {sol$iterations}"))
    print(p1 | p2)
  } else {
    print(p1)
  }
}
sol_sum

```


Gaussian for one remote location.


```{r}

sup <- c(1, 0, 2, 0, 0)
dem <- c(0, 1, 0, 1, 1)
loc <- c(1, 2, 3, 4, 20)
dmat <- dist(loc) |> as.matrix() |> set_units(mi)

sols <- list()
sol_sum <- data.frame()
for (imp_par in 1:20) {
  imp <- geog$gaus_impedance_mat(dmat, imp_par)
  x0 <- tf$gravity(sup, dem, imp)
  sol <- tf$ras_rescale(x0, sup, dem, tol = 1e-6, maxiter = 100)
  sols[[length(sols) + 1]] <- sol
  sol_row <- append(list(imp_par = imp_par, avg_dist = sum(drop_units(dmat) * sol$matrix) / sum(sol$matrix)), sol[c("converged", "iterations", "rmsd", "mad", "maxad")])
  sol_sum <- rbind(sol_sum, sol_row)
}

# optimal solution
sol_lp <- lp.transport(
  cost.mat = drop_units(dmat),
  row.signs = rep("=", length(sup)),
  row.rhs = sup,
  col.signs = rep("=", length(dem)),
  col.rhs = dem,
  integers = NULL
)

# optimal solution in first row
sol_sum <- add_row(sol_sum, imp_par = -1, avg_dist = sum(drop_units(dmat) * sol_lp$solution) / sum(sol_lp$solution), .before = 1)
sol_sum


```


## RAS vs optimal

LP solver with random data vs RAS.

```{r}
n <- 10
sup <- (runif(n) * 1000) |> sort()
dem <- runif(n) |> (\(x) x / sum(x) * sum(sup))() |> sort()
dmat <- dist(1:n) |> as.matrix()

sols <- list()
sol_sum <- data.frame()
for (imp_par in 1:20) {
  imp <- geog$gaus_impedance_mat(set_units(dmat, mi), imp_par)

  x0 <- tf$gravity(sup, dem, imp)
  sol <- tf$ras_rescale(x0, sup, dem, tol = 1e-6, maxiter = 100)
  sols[[length(sols) + 1]] <- sol
  sol_row <- append(list(imp_par = imp_par, avg_dist = sum(dmat * sol$matrix) / sum(sol$matrix)), sol[c("converged", "iterations", "rmsd", "mad", "maxad")])
  sol_sum <- rbind(sol_sum, sol_row)
}

# optimal solution
sol_lp <- lp.transport(
  cost.mat = dmat,
  row.signs = rep("=", length(sup)),
  row.rhs = sup,
  col.signs = rep("=", length(dem)),
  col.rhs = dem,
  integers = NULL
)

sol_sum <- add_row(sol_sum, imp_par = -1, avg_dist = sum(dmat * sol_lp$solution) / sum(sol_lp$solution), .before = 1)
sol_sum

```

# Asymmetric proximity with varying distance

This extension of the RAS+Gravity algorithm introduces different distance parameters for each county and trade side (exports and imports).
It relaxes the issue of universal distance applied to all counties.

*Warning* Code in this section has not been updated to use newer RAS function and will not work without modification.

```{r}
prox_mat_var_dist <- function(dist_mat, dist_from, dist_to) {
  dist_mat <- dist_mat |> set_units(mi) |> drop_units()
  dist_from <- dist_from |> set_units(mi) |> drop_units()
  dist_to <- dist_to |> set_units(mi) |> drop_units()
  y <- matrix(TRUE, nrow(dist_mat), ncol(dist_mat))
  prox_from <- sweep(dist_mat, 1, dist_from, "<=")
  prox_to <- sweep(dist_mat, 2, dist_to, "<=")
  y <- prox_from & prox_to
  mode(y) <- "integer"
  y
}

# distance between ordered points on a line
d <- 1:5 |>
  lapply(\(x) st_point(c(x, 0))) |>
  st_sfc() |>
  st_distance() |>
  set_units(mi)
d

prox_mat_var_dist(d, 2, 2)

# only 1->2
prox_mat_var_dist(d, c(1,0,0,0,0), c(0,1,0,0,0))

# 5 -> all, all -> 1
prox_mat_var_dist(d, c(0,0,0,0,4), c(4,0,0,0,0))

```


## iterative RAS function

```{r}
iter_ras_trade_flows <- function(rs1, cs1, dist_mat, dist_from, dist_to, dist_step, var_dist = TRUE, tol = 0, maxiter = 10, verbose = TRUE) {
  
  # initial distances
  dist_from <- rep(dist_from, length(rs1)) |> set_units(mi)
  dist_to <- rep(dist_to, length(cs1)) |> set_units(mi)

  for (iter in 1:maxiter) {
    # impedance and gravity estimates from current distances
    imp_mat <- prox_mat_var_dist(dist_mat, dist_from, dist_to)
    colnames(imp_mat) <- rownames(imp_mat) <- colnames(dist_mat)
    x0 <- tf$gravity(rs1, cs1, imp_mat)
    colnames(x0) <- rownames(x0) <- colnames(dist_mat)
    
    if (verbose) {
      print("impedance")
      print(imp_mat)
      print("initial x0")
      print(x0)
    }  

    # run RAS algorithm from gravity estimates
    sol <- ras_trade_flows(x0, rs1, cs1, tol, maxiter = maxiter, verbose = verbose)
    sol$outer_iter <- iter
    log_debug(glue("Outer RAS iteration {outer_iter}, inner iterations {iterations}, RMSE {rmse}, MAD {mad}", .envir = sol))
    
    if (verbose) {
      print(sol)
    }
    
    # stop if converged solution found
    if (sol$converged) {
      log_info("Outer RAS finished after iteration {iter}")
      break
    }
    
    if (var_dist) {
      # increment distances for places with >1 adjustment factor
      dist_from[sol$radj > 1] <- dist_from[sol$radj > 1] + set_units(dist_step, mi)
      dist_to[sol$cadj > 1] <- dist_to[sol$cadj > 1] + set_units(dist_step, mi)
    } else {
      # increment uniformly for every place
      dist_from <- dist_from + set_units(dist_step, mi)
      dist_to <- dist_to + set_units(dist_step, mi)
    }
  }
  
  out <- list(
    last_ras = sol,
    dist_from = dist_from,
    dist_to = dist_to,
    imp_mat = imp_mat
  )
  return(out)
}
```


## toy example

```{r}
n <- 5
df <- data.frame(
  place = letters[1:n],
  net_supply = c(-4, 2, 2, -3, 3),
  lon = 1:n,
  lat = 0
  ) |>
  mutate(supply = pmax(net_supply, 0), demand = pmax(-net_supply, 0)) |>
  rowwise() |>
  mutate(center = list(st_point(c(lon, 0)))) |>
  st_as_sf(crs = 4326)

df

dist <- st_distance(df) |> set_units(mi)
rownames(dist) <- colnames(dist) <- df$place
dist

tm_shape(df) + tm_grid() + tm_bubbles() + tm_text("place") +
  tm_shape(df) + tm_text("net_supply", ymod = -1)

sol <- iter_ras_trade_flows(df$supply, df$demand, dist, 100, 100, 100, var_dist = TRUE, tol = 0.01, maxiter = 1000, verbose = FALSE)
sol$last_ras$trade_matrix
sol$dist_from
sol$dist_to

sol$last_ras$trade_matrix |>
  as_tibble(rownames = "from") |>
  pivot_longer(!from, names_to = "to") |>
  mutate(from = ordered(from, levels = rev(df$place)), value = na_if(value, 0)) |>
  ggplot() +
  geom_tile(aes(to, from, fill = value)) +
  coord_fixed()
```

Same without varying distance increment.

```{r}
sol <- iter_ras_trade_flows(df$supply, df$demand, dist, 100, 100, 100, var_dist = FALSE, tol = 0.01, maxiter = 1000, verbose = FALSE)
sol$last_ras$trade_matrix
sol$dist_from
sol$dist_to

sol$last_ras$trade_matrix |>
  as_tibble(rownames = "from") |>
  pivot_longer(!from, names_to = "to") |>
  mutate(from = ordered(from, levels = rev(df$place)), value = na_if(value, 0)) |>
  ggplot() +
  geom_tile(aes(to, from, fill = value)) +
  coord_fixed()
```

## Wisconsin data


```{r}

df <- geog$call_geog() |>
  rename_with(str_to_lower) |>
  filter(state_code == "55")

d <- place_output$call_intermediate(
  year = 2012, 
  schedule = "demand", 
  paradigm = "domestic", 
  class_system = "commodity", 
  ilevel = "det",
  bus_data = "infogroup") |>
  filter(indcode == "112120", str_starts(place, "55")) |>
  select(place, demand)
df <- inner_join(df, d, "place")

d <- place_output$call_intermediate(
  year = 2012, 
  schedule = "supply", 
  paradigm = "domestic", 
  class_system = "commodity", 
  ilevel = "det",
  bus_data = "infogroup") |>
  filter(indcode == "112120", str_starts(place, "55")) |>
  select(place, supply)
df <- inner_join(df, d, "place")

df <- df |>
  mutate(netsup = supply - demand,
         exsup = pmax(netsup, 0),
         exdem = pmax(-netsup, 0),
         exsupb = exsup / sum(exsup) * min(sum(exsup), sum(exdem)),
         exdemb = exdem / sum(exdem) * min(sum(exsup), sum(exdem)))

df |> as.data.frame() |> summarize(across(c(supply, demand, exsup, exdem, exdemb, exsupb), sum))


tmap_mode("view")
tm_shape(df) + tm_fill("netsup", midpoint = 0, popup.format = list(digits = 0),
                       popup.vars = c("name", "demand", "supply", "exdem", "exsup", "netsup", "exdemb", "exsupb"))

dist <- st_distance(df)
colnames(dist) <- rownames(dist) <- df$county_code
dist |>
  set_units(mi) |> drop_units() |>
  as_tibble(rownames = "from") |>
  pivot_longer(!from, names_to = "to") |>
  ggplot() +
  geom_tile(aes(to, from, fill = value)) +
  coord_fixed() +
  labs(title = "Distance in miles")


sol <- iter_ras_trade_flows(df$exsupb, df$exdemb, dist, 25, 25, 25, var_dist = FALSE, tol = 0.01, maxiter = 1000, verbose = FALSE)
sol$last_ras$trade_matrix[1:5, 1:5]
sol$dist_from
sol$dist_to

sol$last_ras$trade_matrix |>
  as_tibble(rownames = "from") |>
  pivot_longer(!from, names_to = "to") |>
  mutate(value = na_if(value, 0)) |>
  ggplot() +
  geom_tile(aes(to, from, fill = value)) +
  coord_fixed() +
  labs(title = "Trade flows uniform distance increments")



solvar <- iter_ras_trade_flows(df$exsupb, df$exdemb, dist, 25, 25, 25, var_dist = TRUE, tol = 0.01, maxiter = 1000, verbose = FALSE)
solvar$last_ras$trade_matrix[1:5, 1:5]
solvar$dist_from
solvar$dist_to

solvar$last_ras$trade_matrix |>
  as_tibble(rownames = "from") |>
  pivot_longer(!from, names_to = "to") |>
  mutate(value = na_if(value, 0)) |>
  ggplot() +
  geom_tile(aes(to, from, fill = value)) +
  coord_fixed() +
  labs(title = "Trade flows varying distance increments")
```



