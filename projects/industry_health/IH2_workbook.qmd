---
title: "Industry-Health"
editor: source
format:
  html:
    toc: true
    toc-depth: 4
    self-contained: true
    page-layout: full
    code-fold: true
    code-tools: true
---


# setup

```{r include = FALSE}



source("projects/industry_health/dataprep.R", local = (ih_dp <- new.env()))
source("datasets/circularity/circularity.R", local = (circularity <- new.env()))
source("R/geography.R", local = (geo <- new.env()))
source("R/basic_utilities.R", local = (util <- new.env()))

# install.packages("vtable")
# install.packages("dplyr")
# install.packages("tidyverse")
# install.packages("ggplot2")
# install.packages("stringr")
# install.packages("spdep")
#install.packages("tidycensus")
# install.packages("tigris")
# install.packages("viridis")
# install.packages("cowplot")
# install.packages("estimatr")
# install.packages("huxtable")
# #install.packages("margins")
# install.packages(c("lmtest", "sandwich"))
# install.packages("spatialreg")
 # install.packages("gridExtra")
 # install.packages("rgeoda") 
 # install.packages("spgwr")
 # install.packages("lavaan")
 # install.packages("lavaanPlot")
#install.packages("ggthemes")
# install.packages("sesem")
#install.packages("openxlsx")


library(vtable)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(spdep)
library(tidycensus)
library(tigris)
library(viridis)
library(cowplot)
library(lmtest)
library(sandwich)
library(estimatr)
library(huxtable)
#library(margins)
library(spatialreg)
library(logger)
library(moments)
library(PerformanceAnalytics)
library(correlation)
library(estimatr)
library(Hmisc)
library(rstatix)
library(glue)
library(sf)
library(units)
library(leaflet)
library(htmltools)
library(tmap)
library(gridExtra)
library(tidycensus) 
library(rgeoda) 
library(spgwr)
library(lavaan)
library(lavaanPlot)
library(ggeffects)
library(patchwork)
library(ggthemes)
#library(sesem)
library(openxlsx)
library(plm)


# chunk behavior 
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 

# nonscientific notation
options(scipen=999)

# log output 
log_threshold(WARN)
```

#Load data
```{r}
##Load Hard Coded Data Sets 

##Median Age of County 2012
age = get_acs(geography = "county",
                   survey = "acs5",
                   variables = c("S0101_C01_030E"
                   ),
                   year = 2012) %>%
  select("place"=GEOID, "age"=estimate)

##pct over 65
age = get_acs(geography = "county",
                   survey = "acs5",
                   variables = c("S0101_C01_028E"
                   ),
                   year = 2012) %>%
  mutate(age = estimate/100) %>%
  select("place"=GEOID, age)


##% College degree or more
bach = get_acs(geography = "county",
                   survey = "acs5",
                   variables = c("S1501_C02_012E"
                   ),
                   year = 2012) %>%
  mutate(bach = estimate/100) %>%
  select("place"=GEOID, bach)




##ERS County Typologies 

#TO DO: ERS call not working. Replace with local file. 
#Temp file call for Sara= "C:/Users/saraa/OneDrive - UW-Madison/USDA Research/ERS Files for Research/2015CountyTypologyCodes.csv"


#ers = read.csv("https://www.ers.usda.gov/webdocs/DataFiles/48652/2015CountyTypologyCodes.csv?v=8831.8") %>%
  
ers = read.csv("data/2015CountyTypologyCodes.csv") %>%
  mutate(place = sprintf("%05d", FIPStxt)) %>%
  select(place, "ers_ag"=Farming_2015_Update, "ers_mine"=Mining_2015.Update, "ers_mfg"=Manufacturing_2015_Update, "ers_gov"=Government_2015_Update, "ers_rec"=Recreation_2015_Update, "ers_nonsp"=Nonspecialized_2015_Update)



# ##Industry Structure
# 
# industry = get_acs(geography = "county",
#                    survey = "acs5",
#                    variables = c("DP03_0032E","DP03_0033E","DP03_0034E"
#                                         ,"DP03_0035E","DP03_0036E","DP03_0037E"
#                                         ,"DP03_0038E","DP03_0039E","DP03_0040E"
#                                         ,"DP03_0041E","DP03_0042E","DP03_0043E"
#                                         ,"DP03_0044E","DP03_0045E"
#                    ),
#                    year = 2012) %>%
#   select("place"=GEOID, variable, estimate) %>%
#   pivot_wider(names_from = variable, values_from = estimate) %>%
#   mutate(pct_afm = DP03_0033/DP03_0032, pct_mfg = DP03_0034/DP03_0032, pct_fire = DP03_0039/DP03_0032, pct_edmed = DP03_0041/DP03_0032, pct_rec = DP03_0042/DP03_0032, pct_gov = DP03_0044/DP03_0032) %>%
#   select(place, pct_afm, pct_mfg, pct_fire, pct_edmed, pct_rec, pct_gov)


# unzip datapacks
# util$zip_unpack("tmp/datapack_bea_io_v240709.zip", overwrite = TRUE)
# util$zip_unpack("tmp/datapack_cbp_v240709.zip", overwrite = TRUE)
# util$zip_unpack("tmp/datapack_infogroup_county_v240709.zip", overwrite = TRUE)
# util$zip_unpack("tmp/datapack_agcen_v240709.zip", overwrite = TRUE)

```
#load industry data
```{r}

# # not working
# abc = ih_dp$call_agcensus12()

# https://www.nass.usda.gov/datasets/qs.census2012.txt.gz
agc_clean = read.delim2("data/projects/industry_health/jobs/qs.census2012.txt") #import ag census
# https://www2.census.gov/programs-surveys/cbp/datasets/2012/cbp12co.zip
jobs_clean <- read_delim("data/projects/industry_health/jobs/cbp12co.txt") #import cbp

agwork = agc_clean %>%
  filter(AGG_LEVEL_DESC == "COUNTY" & SHORT_DESC == "LABOR, HIRED, GE 150 DAYS - NUMBER OF WORKERS" & DOMAIN_DESC == "TOTAL") %>%
  mutate(place = str_c(sprintf("%02d",STATE_FIPS_CODE),"",sprintf("%03d",COUNTY_CODE)), agwork = as.numeric(gsub(",","",VALUE))) %>%
  select(place, agwork)


agops = agc_clean %>%
  filter(AGG_LEVEL_DESC == "COUNTY" & SHORT_DESC == "OPERATORS, (ALL) - NUMBER OF OPERATORS") %>%
  mutate(place = str_c(sprintf("%02d",STATE_FIPS_CODE),"",sprintf("%03d",COUNTY_CODE)), agops = as.numeric(gsub(",","",VALUE))) %>%
  select(place, agops)

agc = agwork %>%
  left_join(y=agops, by="place") %>%
  mutate(agwork = ifelse(is.na(agwork), 0, agwork), agops = ifelse(is.na(agops), 0, agwork), ag_emp = agwork + agops) %>%
  select(place, ag_emp)

jobs = jobs_clean %>%
  filter(naics != "------") %>%
  mutate(naicsfilt = substr(naics,3,3), place = str_c(fipstate,"",fipscty)) %>%
  filter(naicsfilt == "-") %>%
  mutate(naics = str_c("n","",substr(naics,1,2))) %>%
  select(place, naics, emp) %>%
  pivot_wider(names_from = naics, values_from = emp)

jobs_temp = jobs_clean %>%
  filter(naics == "------") %>%
  mutate(place = str_c(fipstate,"",fipscty)) %>%
  select(place, "cbp.tot"=emp)

jobs = jobs %>%
  left_join(y=jobs_temp, by="place") %>%
  replace(is.na(.), 0) %>%
  mutate(cbp.no.ag = cbp.tot - n11, n_fire = n52 + n53, n_edmed = n61 + n62, n_prof = n54 + n55) %>%
  select(place, cbp.no.ag, "n_mine"=n22, "n_mfg"=n31, n_fire, n_edmed, n_prof) %>%
  left_join(y=agc, by="place") %>%
  mutate(totemp = cbp.no.ag + ag_emp, pct_ag = ag_emp/totemp, pct_mine = n_mine/totemp, pct_mfg = n_mfg/totemp, pct_fire = n_fire/totemp, pct_edmed = n_edmed/totemp, pct_prof = n_prof/totemp) %>%
  select(place, "jobs"=totemp, pct_ag, pct_mine, pct_mfg, pct_fire, pct_prof, pct_edmed) %>%
  mutate(pct_edmed = ifelse(pct_edmed == "Inf", NA, pct_edmed), pct_fire = ifelse(pct_fire == "Inf", NA, pct_fire))

jobs2 = jobs_clean %>%
  mutate(n2d = substr(naics,1,2)) %>%
  mutate(filt3 = substr(naics,4,6)) %>%
  filter(n2d == "31"|n2d == "32"|n2d == "33") %>%
  filter(filt3 == "///") %>%
  mutate(durable = ifelse(n2d < 33, "nondurable", "durable"), durable = ifelse((naics == "321///" | naics == "327///"), "durable", durable), place = str_c(fipstate,"",fipscty)) %>%
  group_by(place, durable) %>%
  dplyr::summarize(emp = sum(emp)) %>%
  pivot_wider(names_from = durable, values_from = emp)

jobs = jobs %>%
  left_join(y=jobs2, by="place") %>%
  mutate(pct_durable = durable/jobs, pct_nondurable = nondurable/jobs) %>%
  select(-durable, -nondurable)

```

#Racial Opportunity gap

```{r}

#TO DO: Update file paths

pop_clean = pop_clean = read.csv("data/RRG_data/cc-est2015-alldata.csv")

pop = pop_clean %>%
  mutate(FIPS = str_c(sprintf("%02d", STATE),"",sprintf("%03d", COUNTY)),
         pop_black = BA_MALE + BA_FEMALE, pop_asian = AA_MALE + AA_FEMALE, pop_ind = IA_MALE + IA_FEMALE, pop_hisp = H_MALE + H_FEMALE, pop = TOT_POP, pop_white = WA_MALE + WA_FEMALE) %>%
  filter(YEAR == 5 & AGEGRP == 0) %>%
  dplyr::select(FIPS, pop, pop_black, pop_asian, pop_hisp, pop_ind, pop_white)

mobile25_clean = read.csv("data/RRG_data/Table_4_cz_by_cohort_estimates.csv")
xwalk = read.csv("data/RRG_data/czlma903.csv") %>%
  mutate(CZ = sprintf("%05d", CZ90), FIPS = sprintf("%05d", County.FIPS.Code)) %>%
  dplyr::select(CZ, FIPS)

mobile25 = mobile25_clean %>%
  filter(cohort == "1992") %>%
  dplyr::select("CZ"=cz, "name"=cz_name, kfr_aian_pooled_p25, kfr_aian_pooled_p25_se, kfr_asian_pooled_p25, kfr_asian_pooled_p25_se, kfr_black_pooled_p25, kfr_black_pooled_p25_se, kfr_hisp_pooled_p25, kfr_hisp_pooled_p25_se, kfr_white_pooled_p25, kfr_white_pooled_p25_se) %>%
  dplyr::select(CZ, name, "aian"=kfr_aian_pooled_p25, "asian"=kfr_asian_pooled_p25, "black"=kfr_black_pooled_p25, "hisp"=kfr_hisp_pooled_p25, "white"=kfr_white_pooled_p25) %>%
  mutate(CZ = sprintf("%05d",CZ)) %>%
  left_join(y=xwalk, by="CZ") %>%
  left_join(pop, by="FIPS") %>%
  mutate(tot = pop_black + pop_asian + pop_ind + pop_hisp, pct_black = pop_black/tot, pct_asian = pop_asian/tot, pct_ind = pop_ind/tot, pct_hisp = pop_hisp/tot, pct_white = pop_white/tot)


temp = mobile25 %>%
  dplyr::select(FIPS, "rate_aian"=aian, "rate_asian"=asian, "rate_black"=black, "rate_hisp"=hisp, pct_black, pct_asian, "pct_aian"=pct_ind, pct_hisp) %>%
  pivot_longer(!FIPS, names_to="var", values_to="val") %>% 
  separate_wider_delim(var, "_", names = c("var", "race")) %>%
  pivot_wider(names_from = var, values_from = val) %>%
  group_by(FIPS) %>%
  dplyr::summarize(rrm_nw = weighted.mean(x=rate, w=pct, na.rm=TRUE))

chetty = mobile25 %>%
  dplyr::select(FIPS, pop, rrm_white="white") %>%
  left_join(y=temp, by="FIPS") %>% 
  mutate_all(~ifelse(is.nan(.), NA, .)) %>%
  mutate(rrm_gap = rrm_white-rrm_nw, state = substr(FIPS, 1,2)) %>%
  group_by(state) %>%
  dplyr::summarize(rrm_gap = weighted.mean(x=rrm_gap, w=pop, na.rm=TRUE))

#calcuate race-specific mobility and then race-specific mobility gaps, using white as reference for all non-white racial groups and the white national average for the group racialized white
national_rrm_white <- mobile25 %>%
  filter(!is.na(white), !is.na(pop)) %>%
  dplyr::summarize(national_rrm_white = weighted.mean(white, w = pop)) %>%
  pull(national_rrm_white)

#same calculation for asian population for alt_rrm_gap_asian
national_rrm_asian <- mobile25 %>%
  filter(!is.na(asian), !is.na(pop)) %>%
  dplyr::summarize(national_rrm_asian = weighted.mean(asian, w = pop)) %>%
  pull(national_rrm_asian)

# Modify alt_chetty to include race-specific ROGs
alt_chetty <- mobile25 %>%
  mutate(state = substr(FIPS, 1, 2)) %>%
  drop_na(pop) %>%
  dplyr::group_by(state) %>%
  dplyr::summarize(
    rrm_aian  = weighted.mean(aian,  w = pop, na.rm = TRUE),
    rrm_asian = weighted.mean(asian, w = pop, na.rm = TRUE),
    rrm_black = weighted.mean(black, w = pop, na.rm = TRUE),
    rrm_hisp  = weighted.mean(hisp,  w = pop, na.rm = TRUE),
    rrm_white = weighted.mean(white, w = pop, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    rrm_gap_aian  = rrm_white - rrm_aian,
    rrm_gap_asian = rrm_white - rrm_asian,
    rrm_gap_black = rrm_white - rrm_black,
    rrm_gap_hisp  = rrm_white - rrm_hisp,
    rrm_gap_white = national_rrm_white - rrm_white, 
    rrm_gap_asian_alt = national_rrm_asian - rrm_asian
  )



chetty = chetty %>%
  left_join(y=alt_chetty, by="state")


```

##Alt ROG

```{r}
### overriding prior calc of ROG by grouping asian with white
# pop_clean = pop_clean = read.csv("data/RRG_data/cc-est2015-alldata.csv")
# 
# pop = pop_clean %>%
#   mutate(FIPS = str_c(sprintf("%02d", STATE),"",sprintf("%03d", COUNTY)),
#          pop_black = BA_MALE + BA_FEMALE, pop_asian = AA_MALE + AA_FEMALE, pop_ind = IA_MALE + IA_FEMALE, pop_hisp = H_MALE + H_FEMALE, pop = TOT_POP, pop_white = WA_MALE + WA_FEMALE) %>%
#   filter(YEAR == 5 & AGEGRP == 0) %>%
#   dplyr::select(FIPS, pop, pop_black, pop_asian, pop_hisp, pop_ind, pop_white)
# 
# mobile25_clean = read.csv("data/RRG_data/Table_4_cz_by_cohort_estimates.csv")
# xwalk = read.csv("data/RRG_data/czlma903.csv") %>%
#   mutate(CZ = sprintf("%05d", CZ90), FIPS = sprintf("%05d", County.FIPS.Code)) %>%
#   dplyr::select(CZ, FIPS)
# 
# mobile25 = mobile25_clean %>%
#   filter(cohort == "1992") %>%
#   dplyr::select("CZ"=cz, "name"=cz_name, kfr_aian_pooled_p25, kfr_aian_pooled_p25_se, kfr_asian_pooled_p25, kfr_asian_pooled_p25_se, kfr_black_pooled_p25, kfr_black_pooled_p25_se, kfr_hisp_pooled_p25, kfr_hisp_pooled_p25_se, kfr_white_pooled_p25, kfr_white_pooled_p25_se) %>%
#   dplyr::select(CZ, name, "aian"=kfr_aian_pooled_p25, "asian"=kfr_asian_pooled_p25, "black"=kfr_black_pooled_p25, "hisp"=kfr_hisp_pooled_p25, "white"=kfr_white_pooled_p25) %>%
#   mutate(CZ = sprintf("%05d",CZ)) %>%
#   left_join(y=xwalk, by="CZ") %>%
#   left_join(pop, by="FIPS") %>%
#   mutate(tot = pop_black + pop_asian + pop_ind + pop_hisp, pct_black = pop_black/tot, pct_asian = pop_asian/tot, pct_ind = pop_ind/tot, pct_hisp = pop_hisp/tot, pct_white = pop_white/tot)
# # 
# temp = mobile25 %>%
#   dplyr::select(FIPS, "rate_aian"=aian, "rate_black"=black, "rate_hisp"=hisp, pct_black, "pct_aian"=pct_ind, pct_hisp) %>%
#   pivot_longer(!FIPS, names_to="var", values_to="val") %>% 
#   separate_wider_delim(var, "_", names = c("var", "race")) %>%
#   pivot_wider(names_from = var, values_from = val) %>%
#   group_by(FIPS) %>%
#   dplyr::summarize(rrm_nw = weighted.mean(x=rate, w=pct, na.rm=TRUE))
# 
# temp2 = mobile25 %>%
#   dplyr::select(FIPS, "rate_asian"=asian, "rate_white"=white, pct_white, pct_asian) %>%
#   pivot_longer(!FIPS, names_to="var", values_to="val") %>% 
#   separate_wider_delim(var, "_", names = c("var", "race")) %>%
#   pivot_wider(names_from = var, values_from = val) %>%
#   group_by(FIPS) %>%
#   dplyr::summarize(rrm_white = weighted.mean(x=rate, w=pct, na.rm=TRUE))
# 
# chetty = mobile25 %>%
#   dplyr::select(FIPS, pop) %>%
#   left_join(y=temp, by="FIPS") %>% 
#   left_join(y=temp2, by="FIPS") %>% 
#   mutate_all(~ifelse(is.nan(.), NA, .)) %>%
#   mutate(rrm_gap = rrm_white-rrm_nw, state = substr(FIPS, 1,2)) %>%
#   group_by(state) %>%
#   dplyr::summarize(rrm_gap = weighted.mean(x=rrm_gap, w=pop, na.rm=TRUE))
# 
# alt_chetty = mobile25 %>%
#   mutate(state = substr(FIPS, 1,2)) %>%
#   drop_na(pop) %>%
#   group_by(state) %>%
#   dplyr::summarize(
#     rrm_aian  = weighted.mean(x = aian,  w = pop, na.rm = TRUE),
#     rrm_asian = weighted.mean(x = asian, w = pop, na.rm = TRUE),
#     rrm_black = weighted.mean(x = black, w = pop, na.rm = TRUE),
#     rrm_hisp  = weighted.mean(x = hisp,  w = pop, na.rm = TRUE),
#     rrm_white = weighted.mean(x = white, w = pop, na.rm = TRUE),
#     .groups = "drop"  
#   ) %>%
#   mutate(
#     rrm_gap_aian  = rrm_white - rrm_aian,
#     rrm_gap_asian = rrm_white - rrm_asian,
#     rrm_gap_black = rrm_white - rrm_black,
#     rrm_gap_hisp  = rrm_white - rrm_hisp,
#     rrm_gap_white = national_rrm_white - rrm_white, 
#     rrm_gap_asian_alt = national_rrm_asian - rrm_asian
#   )
# 
# chetty = chetty %>%
#   left_join(y=alt_chetty, by="state")
```

##Racial composition
```{r}

rcomp = mobile25 %>%
  dplyr::select("place"=FIPS, pct_white, pct_black, pct_asian, pct_hisp, pct_ind)


```


# racial PAAM
```{r}
rpaam_clean = read.csv("data/projects/industry_health/rpaam_output_2025_06_30.csv")

rpaam = rpaam_clean %>% 
  mutate(rpaam_orig = age_adjusted_rate,
         p95_val = quantile(rpaam_orig, 0.95, na.rm = TRUE),
         rpaam_top = ifelse(rpaam_orig > p95_val, p95_val, rpaam_orig),
         rpaam = log(1+age_adjusted_rate))

temp = rpaam %>%
  filter(rpaam != 0)
temp = min(temp$rpaam)

rpaam = rpaam %>% 
  mutate(rpaam = ifelse(rpaam == 0, temp, rpaam),
         rpaam = (rpaam - mean(rpaam, na.rm=TRUE))/sd(rpaam, na.rm=TRUE),
         FIPS = sprintf("%05d", FIPS),
         racegr = Group) %>% 
  dplyr::select("place"=FIPS, racegr, rpaam, rpaam_orig, rpaam_top)


rpaam_wide = rpaam %>% 
  select (place, racegr, rpaam, rpaam_orig) %>% 
  pivot_wider(
    names_from = racegr, 
    values_from = c(rpaam, rpaam_orig),
    names_sep = "_"
  )




```



# data joins

```{r include = FALSE}
chr<-ih_dp$call_chr(2017) 

pop<-ih_dp$call_population(2012) 

data<- left_join (chr, pop, by = "place")

laborforce_part_rate<-ih_dp$call_laborforce_rate(2012)

data<- left_join (data, laborforce_part_rate, by = "place")

unempr<-ih_dp$call_unemp_rate(2012) 

data<- left_join (data, unempr, by = "place")

incr<-ih_dp$call_income_rate(2012)

data<- left_join (data, incr, by = "place")

povr<-ih_dp$call_poverty_rate(2012) 

data<- left_join (data, povr, by = "place")

# edur<-ih_dp$call_highschool_attainment_rate(2012) 

rucc<- ih_dp$call_ruc (2013) %>% 
  rename(place = fips)  


data<- left_join (data, rucc, by = "place")

data = data %>% 
mutate(metro_nonmetro = if_else(data$ruc_code < 4, "metro", "nonmetro"),
       logpop = log(population))


data <- data %>%
  mutate(
    three_metro = case_when(
        ruc_code %in% c(1) ~ "large_metro",
        ruc_code %in% c(2,3) ~ "small_metro",
      ruc_code >= 4 ~ "nonmetro")
  )

data = data %>% 
  mutate(
    four_metro = case_when(
      ruc_code %in% c(1) ~ "large_metro",
      ruc_code %in% c(2, 3) ~ "small_metro",
      ruc_code %in% c(4, 5) ~ "large_nonmetro",
      ruc_code >= 6 ~ "small_nonmetro")
  )
  

ind_struct<- ih_dp$call_industry_structure(2012)

data<- left_join (data, ind_struct, by = "place")

data<- left_join (data, age, by = "place")

data<- left_join (data, ers, by = "place")

data<- left_join (data, jobs, by = "place")

data<- left_join (data, bach, by = "place")

#create state code

data$state<- substr(data$place, 1, 2)

#join chetty data with data

data <-left_join (data, chetty, by = "state")
data <-left_join (data, rcomp, by = "place")

# Convert 'state' to a factor for fixed effects
data$state_fe <- as.factor(data$state)

data <- left_join (data, rpaam_wide, by = "place")

print(data)



# circularity_import <- circularity$get_circularity()
# 
# 
# YR = 2012
# circu = circularity_import %>%  
#   filter(year == YR & ilevel == "det" & bus_data == "cbp_imp") %>%
#   select(place, retention, autonomy, excess_supply, intermediate_supply, excess_demand, intermediate_demand)
  

# data<- left_join (data, circu, by = "place")

```


#log paam for descriptives

```{r}

data <- data %>%
  mutate(log_paam_des = log(1 + paam))

#compare logged rpaam 


```


## 7/9/24 circularity

Commented code is to use infogroup data in sensitivity analysis

```{r}
#circu <- ih_dp$call_circularity(2012, bus_data = "infogroup", ilevel = "det") %>%
# circu <- ih_dp$call_circularity(2012, bus_data = "cbp_imp", ilevel = "det") %>%
#   select(place, retention = retention, autonomy = autonomy)

circu_new <- arrow::read_parquet("data/place_io/outsupdem/2012_det_cbp_imp.pq")  %>%
  mutate(exsup = pmax(0, supply - demand), exdem = pmax(0, demand - supply)) %>%
  dplyr::summarize(across(output:exdem, sum), .by = "place") %>%
  mutate(
    production_capacity = supply / output,
    trade_capacity = exsup / output,
    retention = 1 - exsup / supply,
    production_dependency = demand / output,
    trade_dependency = exdem / output,
    autonomy = 1 - exdem / demand,
    trade_balance = (exsup - exdem) / output,
    trade_openness = (exsup + exdem) / output,
    method = "after"
  ) %>%
  select(place, retention = retention, autonomy = autonomy)

data <- left_join (data, circu_new, by = "place")




```

## community prosperity index
```{r}

# Column to delete
column_to_delete <- "prosperity"

if (column_to_delete %in% colnames(data)) {
  data <- data %>%
    select(-all_of(column_to_delete))
}

# here I'm making the prosperity index
# in the prior chunk, we z-score the variables
# first, we define the prosperity concept
m1a  <- ' prosperity  =~ laborforce_part_rate + bach + poverty_rate + income_rate'

# next, run confirmatory factor analysis
factor1 <- cfa(m1a, data=data,std.lv=TRUE)
summary(factor1)

# extracting factor results
PE <- parameterEstimates(factor1) %>%
  filter(lhs == "prosperity")

loading.laborforce_part_rate = PE %>%
  filter(rhs == "laborforce_part_rate") %>%
  select(est)
loading.laborforce_part_rate = loading.laborforce_part_rate$est

loading.bach = PE %>%
  filter(rhs == "bach") %>%
  select(est)
loading.bach = loading.bach$est

loading.poverty_rate = PE %>%
  filter(rhs == "poverty_rate") %>%
  select(est)
loading.poverty_rate = loading.poverty_rate$est

loading.income_rate = PE %>%
  filter(rhs == "income_rate") %>%
  select(est)
loading.income_rate = loading.income_rate$est


# adding loading (correlations) for each indictor
# using these to build weighted average of prosperity
data = data %>%
  mutate(prosperity = ((laborforce_part_rate*loading.laborforce_part_rate)+(income_rate*loading.income_rate)+(poverty_rate*loading.poverty_rate)+(bach*loading.bach))/4, prosperity = (prosperity-mean(prosperity, na.rm=TRUE))/sd(prosperity, na.rm=TRUE))

```


# Summary Statistics- three regimes

```{r}

# library(openxlsx)
# 
# ##summary statistics- global
# summary_stats = data %>% 
#   select(paam, log_paam_des, rpaam_AIAN, rpaam_API, rpaam_Black, rpaam_Latine, rpaam_White, retention, rrm_gap, rrm_gap_aian, rrm_gap_asian, rrm_gap_black, rrm_gap_hisp, rrm_gap_white, rrm_gap_asian_alt, prosperity, pct_mfg, pct_mine, pct_ag, laborforce_part_rate, age, bach, poverty_rate, income_rate, logpop, uninsured) %>%
#   get_summary_stats(, type = "common") %>% 
#   relocate(variable, n, mean, median, min, max)
# summary_stats = as.data.frame(summary_stats)
# summary_stats
# 
# 
# # Summary statistics for metro cases 
# summary_stats_lgmetro = data %>%
#    filter(three_metro == "large_metro") %>% 
#   select(paam, log_paam_des, rpaam_AIAN, rpaam_API, rpaam_Black, rpaam_Latine, rpaam_White, retention, rrm_gap, rrm_gap_aian, rrm_gap_asian, rrm_gap_black, rrm_gap_hisp, rrm_gap_white, rrm_gap_asian_alt, prosperity, pct_mfg, pct_mine, pct_ag, laborforce_part_rate, age, bach, poverty_rate, income_rate, logpop, uninsured) %>%
#   get_summary_stats(type = "common") %>%  
#   relocate(variable, n, mean, median, min, max)  
# summary_stats_lgmetro = as.data.frame(summary_stats_lgmetro)  
# summary_stats_lgmetro  
# 
# # Summary statistics for small metro cases 
# summary_stats_smallmetro = data %>%
#    filter(three_metro == "small_metro") %>% 
#   select(paam, log_paam_des, rpaam_AIAN, rpaam_API, rpaam_Black, rpaam_Latine, rpaam_White, retention, rrm_gap, rrm_gap_aian, rrm_gap_asian, rrm_gap_black, rrm_gap_hisp, rrm_gap_white, rrm_gap_asian_alt, prosperity, pct_mfg, pct_mine, pct_ag, laborforce_part_rate, age, bach, poverty_rate, income_rate, logpop, uninsured) %>%
#   get_summary_stats(type = "common") %>%  
#   relocate(variable, n, mean, median, min, max)  
# summary_stats_smallmetro = as.data.frame(summary_stats_smallmetro)  
# summary_stats_smallmetro  
# 
# 
# # Summary statistics for nonmetro cases 
# summary_stats_nonmetro = data %>%
#   filter(three_metro == "nonmetro") %>% 
#   select(paam, log_paam_des, rpaam_AIAN, rpaam_API, rpaam_Black, rpaam_Latine, rpaam_White, retention, rrm_gap, rrm_gap_aian, rrm_gap_asian, rrm_gap_black, rrm_gap_hisp, rrm_gap_white, rrm_gap_asian_alt, prosperity, pct_mfg, pct_mine, pct_ag, laborforce_part_rate, age, bach, poverty_rate, income_rate, logpop, uninsured) %>%
#   get_summary_stats(type = "common") %>%  
#   relocate(variable, n, mean, median, min, max)  
# summary_stats_nonmetro = as.data.frame(summary_stats_nonmetro)  
# summary_stats_nonmetro
# 
# # # Write all summary statistics to Excel
# # write.xlsx(
# #   list(
# #     "Global Summary" = summary_stats,
# #     "Metro Summary" = summary_stats_lgmetro,
# #     "Small Metro Summary" = summary_stats_smallmetro,
# #     "Nonmetro Summary" = summary_stats_nonmetro
#   ),
#   file = "IH2_summary_statistics_3R.xlsx",
#   overwrite = TRUE
# )



```
# Summary Statistics- four regimes

```{r}

library(openxlsx)

##summary statistics- global
summary_stats = data %>% 
  select(paam, log_paam_des, rpaam_AIAN, rpaam_API, rpaam_Black, rpaam_Latine, rpaam_White, retention, rrm_gap, rrm_gap_aian, rrm_gap_asian, rrm_gap_black, rrm_gap_hisp, rrm_gap_white, rrm_gap_asian_alt, prosperity, pct_mfg, pct_mine, pct_ag, laborforce_part_rate, age, bach, poverty_rate, income_rate, logpop, uninsured) %>%
  get_summary_stats(, type = "common") %>% 
  relocate(variable, n, mean, median, min, max)
summary_stats = as.data.frame(summary_stats)
summary_stats


# Summary statistics for large metro cases 
summary_stats_lgmetro = data %>%
   filter(four_metro == "large_metro") %>% 
  select(paam, log_paam_des, rpaam_AIAN, rpaam_API, rpaam_Black, rpaam_Latine, rpaam_White, retention, rrm_gap, rrm_gap_aian, rrm_gap_asian, rrm_gap_black, rrm_gap_hisp, rrm_gap_white, rrm_gap_asian_alt, prosperity, pct_mfg, pct_mine, pct_ag, laborforce_part_rate, age, bach, poverty_rate, income_rate, logpop, uninsured) %>%
  get_summary_stats(type = "common") %>%  
  relocate(variable, n, mean, median, min, max)  
summary_stats_lgmetro = as.data.frame(summary_stats_lgmetro)  
summary_stats_lgmetro  

# Summary statistics for small metro cases 
summary_stats_smallmetro = data %>%
   filter(four_metro == "small_metro") %>% 
  select(paam, log_paam_des, rpaam_AIAN, rpaam_API, rpaam_Black, rpaam_Latine, rpaam_White, retention, rrm_gap, rrm_gap_aian, rrm_gap_asian, rrm_gap_black, rrm_gap_hisp, rrm_gap_white, rrm_gap_asian_alt, prosperity, pct_mfg, pct_mine, pct_ag, laborforce_part_rate, age, bach, poverty_rate, income_rate, logpop, uninsured) %>%
  get_summary_stats(type = "common") %>%  
  relocate(variable, n, mean, median, min, max)  
summary_stats_smallmetro = as.data.frame(summary_stats_smallmetro)  
summary_stats_smallmetro  


# Summary statistics for nonmetro cases 
summary_stats_nonmetro = data %>%
  filter(four_metro == "large_nonmetro") %>% 
  select(paam, log_paam_des, rpaam_AIAN, rpaam_API, rpaam_Black, rpaam_Latine, rpaam_White, retention, rrm_gap, rrm_gap_aian, rrm_gap_asian, rrm_gap_black, rrm_gap_hisp, rrm_gap_white, rrm_gap_asian_alt, prosperity, pct_mfg, pct_mine, pct_ag, laborforce_part_rate, age, bach, poverty_rate, income_rate, logpop, uninsured) %>%
  get_summary_stats(type = "common") %>%  
  relocate(variable, n, mean, median, min, max)  
summary_stats_nonmetro = as.data.frame(summary_stats_nonmetro)  
summary_stats_nonmetro

# Summary statistics for nonmetro cases 
summary_stats_smallnonmetro = data %>%
  filter(four_metro == "small_nonmetro") %>% 
  select(paam, log_paam_des, rpaam_AIAN, rpaam_API, rpaam_Black, rpaam_Latine, rpaam_White, retention, rrm_gap, rrm_gap_aian, rrm_gap_asian, rrm_gap_black, rrm_gap_hisp, rrm_gap_white, rrm_gap_asian_alt, prosperity, pct_mfg, pct_mine, pct_ag, laborforce_part_rate, age, bach, poverty_rate, income_rate, logpop, uninsured) %>%
  get_summary_stats(type = "common") %>%  
  relocate(variable, n, mean, median, min, max)  
summary_stats_smallnonmetro = as.data.frame(summary_stats_smallnonmetro)  
summary_stats_smallnonmetro
# 
# # Write all summary statistics to Excel
# write.xlsx(
#   list(
#     "Global Summary" = summary_stats,
#     "Metro Summary" = summary_stats_lgmetro,
#     "Small Metro Summary" = summary_stats_smallmetro,
#     "Nonmetro Summary" = summary_stats_nonmetro, 
#     "Small Nonmetro Summary" = summary_stats_smallnonmetro
#   ),
#   file = "IH2_summary_statistics_4R.xlsx",
#   overwrite = TRUE
# )



```

## N for R by metro 

```{r}
# Identify all rpaam_* variables
rpaam_vars <- data %>%
  select(starts_with("rpaam_")) %>%
  names()

# Long-format data: group, metro, and whether that group has a non-missing value
df_long <- data %>%
  pivot_longer(cols = all_of(rpaam_vars), names_to = "group", values_to = "rpaam_value") %>%
  filter(!is.na(rpaam_value)) %>%
  group_by(group, four_metro) %>%
  summarise(N = n(), .groups = "drop")

# Optional: reshape to wide for easier viewing
table_N <- df_long %>%
  pivot_wider(names_from = four_metro, values_from = N, values_fill = 0)

# View the result
print(table_N)

library(writexl)

write_xlsx(table_N, path = "rpaam_N_by_four_metro.xlsx")

```


# Histograms

```{r}
data %>% select(paam, log_paam_des, rpaam_AIAN, rpaam_API, rpaam_Black, rpaam_Latine, rpaam_White) %>% hist.data.frame()

data %>% select(rrm_gap, rrm_gap_aian, rrm_gap_asian, rrm_gap_black, rrm_gap_hisp, rrm_gap_white, rrm_gap_asian_alt) %>% hist.data.frame()

data %>% select(retention, prosperity, pct_mfg, pct_mine, pct_ag, laborforce_part_rate, age, bach, poverty_rate, income_rate, logpop, uninsured) %>% hist.data.frame()


```
# Density plots- three regimes

```{r}
#paam, rpaam_AIAN, rpaam_API, rpaam_Black, rpaam_Latine, rpaam_White, retention, rrm_gap, pct_mfg, pct_mine, pct_ag, laborforce_part_rate, income_rate, bach

# Define the number of colors you want from the "rocket" palette
num_colors <- 3  # Adjust the number of colors as needed

# Create a vector of colors from the "rocket" palette excluding yellow
my_colors <- viridis_pal(option = "magma", begin = 0.1, end = 0.7)(num_colors)



#"log_paam_des",
 # Define the variables and titles
vars = c("paam", "log_paam_des", "rpaam_AIAN", "rpaam_API", "rpaam_Black", "rpaam_Latine", "rpaam_White", "retention", "rrm_gap","rrm_gap_aian", "rrm_gap_asian", "rrm_gap_black", "rrm_gap_hisp", "rrm_gap_white", "rrm_gap_asian_alt", "prosperity", "pct_mfg", "pct_ag", 
           "laborforce_part_rate", "age", "bach", "poverty_rate",  "income_rate", "logpop", "uninsured")

#"Log PAAM",

titles = c("Total Premature\n Death", "Log PAAM", "AIAN Premature\n Death", "API Premature\n Death","Black Premature\n Death", "Latine Premature\n Death","White Premature\n Death", "Retention", "Racial Opportunity Gap", "AIAN-White ROG", "API-White ROG", "Black-White ROG", "Latine-White ROG", "White-White OG", "API-API OG", "Prosperity", "%\n Manufacturing", "%\n Agriculture", "Labor \nForce\n Participation Rate", "% \nOver 65", 
"% \nBachelors Plus", "Poverty\n Rate", "Income \nRate", "Log\n Population", "Uninsured \n Rate \nUnder 65")

# Function to create density plots
create_density_plots <- function(data, vars, group_var, my_colors, titles) {
  plots <- list()
  
  for (i in seq_along(vars)) {
    var <- vars[i]
    title <- titles[i]
    
    plot <- ggplot(data, aes(
      x = !!sym(var),
      group = !!sym(group_var),
      color = as.factor(!!sym(group_var))
    )) +
      geom_density() +
      scale_color_manual(name = "Rural-Urban Gradient", values = my_colors) +
      labs(
        title = title,
        x = var,
        y = "Density"
      ) +
      theme_minimal()
    
    plots[[var]] <- plot
  }
  
  return(plots)
}

# Call the function
density_plots <- create_density_plots(data, vars, "three_metro", my_colors, titles)

for (plot in density_plots) {
  print(plot)
}
```

# Density plots- four regimes

```{r}
#paam, retention, rrm_gap, pct_mfg, pct_mine, pct_ag, laborforce_part_rate, income_rate, bach

# Define the number of colors you want from the "rocket" palette
num_colors <- 4  # Adjust the number of colors as needed

# Create a vector of colors from the "rocket" palette excluding yellow
my_colors <- viridis_pal(option = "magma", begin = 0.1, end = 0.7)(num_colors)

#"log_paam_des",
 # Define the variables and titles
vars = c("paam", "log_paam_des", "rpaam_AIAN", "rpaam_API", "rpaam_Black", "rpaam_Latine", "rpaam_White", "retention", "rrm_gap","rrm_gap_aian", "rrm_gap_asian", "rrm_gap_black", "rrm_gap_hisp", "rrm_gap_white", "rrm_gap_asian_alt", "prosperity", "pct_mfg", "pct_ag", 
           "laborforce_part_rate", "age", "bach", "poverty_rate",  "income_rate", "logpop", "uninsured")

#"Log PAAM",

titles = c("Total Premature\n Death", "Log PAAM", "AIAN Premature\n Death", "API Premature\n Death","Black Premature\n Death", "Latine Premature\n Death","White Premature\n Death", "Retention", "Racial Opportunity Gap", "AIAN-White ROG", "API-White ROG", "Black-White ROG", "Latine-White ROG", "White-White OG", "API-API OG", "Prosperity", "%\n Manufacturing", "%\n Agriculture", "Labor \nForce\n Participation Rate", "% \nOver 65", 
"% \nBachelors Plus", "Poverty\n Rate", "Income \nRate", "Log\n Population", "Uninsured \n Rate \nUnder 65")

create_density_plots <- function(data, vars, group_var, my_colors, titles) {
  plots <- list()
  
  for (i in seq_along(vars)) {
    var <- vars[i]
    title <- titles[i]
    
    # Drop NA values for both var and group_var, then drop the lowest var value
    data_filtered <- data %>%
      filter(!is.na(!!sym(var)), !is.na(!!sym(group_var))) %>%
      filter(!!sym(var) != min(!!sym(var), na.rm = TRUE))
    
    plot <- ggplot(data_filtered, aes(
      x = !!sym(var),
      group = !!sym(group_var),
      color = as.factor(!!sym(group_var))
    )) +
      geom_density() +
      scale_color_manual(name = "Rural-Urban Gradient", values = my_colors) +
      labs(
        title = title,
        x = var,
        y = "Density"
      ) +
      theme_minimal()
    
    plots[[var]] <- plot
  }
  
  return(plots)
}

# Call the function
density_plots <- create_density_plots(data, vars, "four_metro", my_colors, titles)

for (plot in density_plots) {
  print(plot)
}



# #For Presentation loop
# # Function
# create_density_plots2 <- function(data, vars, four_metro, titles) {
#   plots <- list()
#   for (i in seq_along(vars)) {
#     plots[[vars[i]]] <- ggplot(data[!is.na(data[[four_metro]]), ],
#                                aes_string(x = vars[i], group = four_metro, color = paste0("as.factor(", four_metro, ")"))) +
#       geom_density() +
#       scale_color_manual(
#         name = "Rural-Urban Gradient",
#         values = c("large_metro" = "#8A1B47", "large_nonmetro" = "#885C6E", 
#                    "small_metro" = "#888888", "small_nonmetro" = "#1A1A1A"),
#         labels = c("Large Metro", "Large Nonmetro", "Small Metro", "Small Nonmetro")
#       ) +
#       labs(title = titles[i], x = vars[i], y = "Density") +
#       theme_minimal() +
#       theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
#             legend.position = "left", "center")
#   }
#   return(plots)
# }
# 
# # Call and print
# density_plots2 <- create_density_plots2(data, vars, "four_metro", titles)
# for (p in density_plots2) print(p)


#For presentation (single variables of interest)
#PAAM Plot


paam_plot <- ggplot(data[!is.na(data[["four_metro"]]), ],
                    aes(x = log_paam_des, group = four_metro, color = as.factor(four_metro))) +
  geom_density(linewidth = .75) +
  scale_color_manual(
    name = "Rural-Urban Gradient",
    values = c("large_metro" = "#f4b6b6", "large_nonmetro" = "#2c7fb8", 
               "small_metro" = "#d5303e", "small_nonmetro" = "#08306B"),
    labels = c("Large Metro", "Large Nonmetro", "Small Metro", "Small Nonmetro")
  ) +
  labs(title = "", x = "Premature Age-Adjusted Mortality", y = "Density") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    legend.position = "left",
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10),
    plot.margin = margin(t = 20, r = 10, b = 30, l = 10)
  )

print(paam_plot)


#Retention plot
retention_plot <- ggplot(data[!is.na(data[["four_metro"]]), ],
                    aes(x = retention, group = four_metro, color = as.factor(four_metro))) +
  geom_density(linewidth = .75) +  
  scale_color_manual(
    name = "Rural-Urban Gradient",
    values = c("large_metro" = "#f4b6b6", "large_nonmetro" = "#2c7fb8", 
               "small_metro" = "#d5303e", "small_nonmetro" = "#08306B"),
    labels = c("Large Metro", "Large Nonmetro", "Small Metro", "Small Nonmetro")
  ) +
  labs(title = "", x = "Retention", y = "Density") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    legend.position = "left",
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10),
    plot.margin = margin(t = 20, r = 10, b = 30, l = 10)
  )

print(retention_plot)

#ROG plot
#Retention plot
rog_plot <- ggplot(data[!is.na(data[["four_metro"]]), ],
                    aes(x = rrm_gap, group = four_metro, color = as.factor(four_metro))) +
  geom_density(linewidth = .75) +  
  scale_color_manual(
    name = "Rural-Urban Gradient",
    values = c("large_metro" = "#f4b6b6", "large_nonmetro" = "#2c7fb8", 
               "small_metro" = "#d5303e", "small_nonmetro" = "#08306B"),
    labels = c("Large Metro", "Large Nonmetro", "Small Metro", "Small Nonmetro")
  ) +
  labs(title = "", x = "ROG", y = "Density") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    legend.position = "left",
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10),
    plot.margin = margin(t = 20, r = 10, b = 30, l = 10)
  )

print(rog_plot)


```

#RPAAM Density Plots- Consistent X

```{r}

library(patchwork)

# Define rpaam variables and corresponding titles
rpaam_vars <- c("rpaam_AIAN", "rpaam_API", "rpaam_Black", "rpaam_Latine", "rpaam_White")
rpaam_titles <- c("AIAN Premature Mortality", "API Premature Mortality", "Black Premature Mortality", "Latine Premature Mortality", "White Premature Mortality")

create_rpaam_facet_plot <- function(data, vars, group_var, my_colors, titles) {
  plots <- list()
  
  # Calculate global x-axis range
  global_min <- Inf
  global_max <- -Inf
  
  for (var in vars) {
    temp_data <- data[[var]]
    temp_data <- temp_data[!is.na(temp_data)]
    temp_data <- temp_data[temp_data != min(temp_data, na.rm = TRUE)]
    if (length(temp_data) > 0) {
      global_min <- min(global_min, min(temp_data, na.rm = TRUE))
      global_max <- max(global_max, max(temp_data, na.rm = TRUE))
    }
  }
  
  # Generate each density plot with shared axis limits
  for (i in seq_along(vars)) {
    var <- vars[i]
    title <- titles[i]
    
    data_filtered <- data %>%
      filter(!is.na(!!sym(var)), !is.na(!!sym(group_var))) %>%
      filter(!!sym(var) != min(!!sym(var), na.rm = TRUE))
    
    plot <- ggplot(data_filtered, aes(
      x = !!sym(var),
      group = !!sym(group_var),
      color = as.factor(!!sym(group_var))
    )) +
      geom_density() +
      scale_color_manual(name = "Rural-Urban Gradient", values = my_colors) +
      labs(
        title = title,
        x = NULL,
        y = "Density"
      ) +
      xlim(global_min, global_max) +
      theme_minimal() +
      theme(legend.position = "none")
    
    plots[[i]] <- plot
  }
  
  # Combine using patchwork
  combined_plot <- wrap_plots(plots, ncol = 2) + 
    plot_layout(guides = "collect") & 
    theme(legend.position = "bottom")

  return(combined_plot)
}

# Call and print the faceted plot
combined_rpaam_plot <- create_rpaam_facet_plot(data, rpaam_vars, "four_metro", my_colors, rpaam_titles)
print(combined_rpaam_plot)


##Black and White Version

# Define variables and titles
rpaam_vars <- c("rpaam_AIAN", "rpaam_API", "rpaam_Black", "rpaam_Latine", "rpaam_White")
rpaam_titles <- c("AIAN", "API", "Black", "Latine", "White")

# Function
create_rpaam_facet_plot_bw <- function(data, vars, group_var, titles) {
  plots <- list()
  
  # Recode group variable with readable labels and correct order
  data[[group_var]] <- factor(data[[group_var]],
                              levels = c("large_metro", "small_metro", "large_nonmetro", "small_nonmetro"),
                              labels = c("Large Metro", "Small Metro", "Large Nonmetro", "Small Nonmetro"))

  # Define linetype mapping
  linetype_values <- c("solid", "dotted", "dashed", "dotdash")
  names(linetype_values) <- c("Large Metro", "Small Metro", "Large Nonmetro", "Small Nonmetro")

  # Global x range across all variables
  global_min <- min(sapply(vars, function(v) min(data[[v]], na.rm = TRUE)))
  global_max <- max(sapply(vars, function(v) max(data[[v]], na.rm = TRUE)))
  
  # Build plots
  for (i in seq_along(vars)) {
    var <- vars[i]
    title <- titles[i]
    
    data_filtered <- data %>%
      filter(!is.na(!!sym(var)), !is.na(!!sym(group_var))) %>%
      filter(!!sym(var) != min(!!sym(var), na.rm = TRUE))  # drop lowest if desired
    
    p <- ggplot(data_filtered, aes(x = !!sym(var), linetype = !!sym(group_var))) +
      geom_density(color = "black", size = 0.8) +
      scale_linetype_manual(name = "Rural-Urban Gradient", values = linetype_values) +
      labs(title = title, x = NULL, y = "Density") +
      xlim(global_min, global_max) +
      theme_minimal(base_size = 12) +
      theme(
        plot.title = element_text(size = 11, hjust = 0.5),
        axis.title.x = element_blank()
      )
    
    plots[[i]] <- p
  }

  # Combine plots and add global title
  combined_plot <- wrap_plots(plots, ncol = 2) +
    plot_layout(guides = "collect") &
    theme(legend.position = "bottom")

  final_plot <- combined_plot + 
    plot_annotation(
      title = "Premature Age-Adjusted Mortality",
      theme = theme(
        plot.title = element_text(size = 14, hjust = 0.5, face = "bold"),
        plot.margin = margin(10, 10, 10, 10)
      )
    )
  
  return(final_plot)
}

# Call the function
combined_rpaam_plot_bw <- create_rpaam_facet_plot_bw(data, rpaam_vars, "four_metro", rpaam_titles)

# Print the plot
print(combined_rpaam_plot_bw)

```


# Maps

```{r}


map = ih_dp$call_geog(2012)
df_map <- left_join(map, data, by = "place") %>% shift_geometry()

sum(is.na(df_map$retention))

# install.packages("RColorBrewer")
# library(RColorBrewer)

my_palette <- colorRampPalette(c("#8A1B47", "#888888ff"))(6)
  print(my_palette)
 
 # Define the variables and titles
vars = c("paam", "log_paam_des","rpaam_AIAN", "rpaam_API", "rpaam_Black", "rpaam_Latine", "rpaam_White", "retention", "rrm_gap", "prosperity", "pct_mfg", "pct_ag", 
           "laborforce_part_rate", "age", "bach", "poverty_rate",  "income_rate", "logpop", "uninsured")

titles = c("Total Premature\n Death", "Log PAAM", "AIAN Premature\n Death", "API Premature\n Death","Black Premature\n Death", "Latine Premature\n Death","White Premature\n Death", "Retention", "Racial Opportunity Gap", "Prosperity", "%\n Manufacturing",
           "%\n Agriculture", 
           "Labor \nForce\n Participation Rate", "% \nOver 65", 
           "% \nBachelors Plus", "Poverty\n Rate", "Income \nRate", 
           "Log\n Population", "Uninsured \n Rate \nUnder 65")
#  
# for (i in seq_along(vars)) {
#   v = vars[[i]]
#   legend_title = titles[i]
# 
#  mdn = median(df_map[[v]], na.rm = TRUE)

  # Filter out NA and the minimum value for the variable
  #df_filtered <- df_map %>%
   # filter(!is.na(.data[[v]])) %>%
   # filter(.data[[v]] != min(.data[[v]], na.rm = TRUE))
# 
#  tmap_mode("plot")
#  output = df_map %>%
#    tm_shape() +
#   tm_polygons(col = v, style = "quantile", n = 4, border.alpha = 0.1, style = "cont", id = v,
#                palette = c("#f0f9e8","#ccebc5", "#a8ddb5", "#7bccc4", "#43a2ca","#0868ac")) +
#    tm_layout(legend.title.size = 1.0, fontface = 2, legend.position = c("LEFT","top"), frame = FALSE) +
#     tm_layout(legend.title.size = 1.0, legend.position = c("LEFT","top"), frame = FALSE) +
 #tm_legend(title = legend_title, title.fontface = 2)
# 
# print(output)
# 
#  }


 tmap_mode("plot")
# 
for (i in seq_along(vars)) {
  v <- vars[[i]]
  legend_title <- titles[i]
# 
#   # Filter out NA and the minimum value for the variable
df_filtered <- df_map %>%
  filter(!is.na(.data[[v]])) %>%
   filter(.data[[v]] != min(.data[[v]], na.rm = TRUE))
# 
  output <- tm_shape(df_map) +  
    tm_borders(lwd = 0.1, col = "gray80") +  
    tm_shape(df_filtered) +  
  tm_polygons( col = v, style = "quantile",  n = 4, border.alpha = 0.3,  id = v,
               palette = c("#a8ddb5", "#7bccc4", "#43a2ca", "#0868ac") ) +
  tm_layout(legend.title.size = 1.0, 
      fontface = 2, legend.position = c("LEFT", "top"),
    frame = FALSE   ) +
     tm_legend(
      title = legend_title,
      title.fontface = 2
     )
# 
 print(output)
 }
 
#  output = df_map %>%
#    tm_shape() +
#   tm_polygons(col = "pct_mine", n = 4, border.alpha = 0.1, style = "jenks", id = "pct_mine",
#                palette = c("#ccebc5", "#a8ddb5", "#7bccc4", "#43a2ca","#0868ac")) +
#   tm_layout( legend.title.size = 1.0, legend.position = c("LEFT","top"), frame = FALSE) +
#   tm_legend(title = "% \n Mining", title.fontface = 2)
# 
# print(output)

#red color scheme
# for (i in seq_along(vars)) {
#   v = vars[[i]]
#   legend_title = titles[i]
# 
#  mdn = median(df_map[[v]], na.rm = TRUE)
# 
#  tmap_mode("plot")
#  output = df_map %>%
#    tm_shape() +
#   tm_polygons(col = v, style = "quantile", n = 4, border.alpha = 0.1, style = "cont", id = v,
#                palette = c("#888888","#88727B", "#885C6E", "#885C6E", "#894661","#8A1B47")) +
#    tm_layout(legend.title.size = 1.0, fontface = 2, legend.position = c("LEFT","top"), frame = FALSE) +
#     tm_layout(legend.title.size = 1.0, legend.position = c("LEFT","top"), frame = FALSE) +
#     tm_legend(title = legend_title, title.fontface = 2)
# 
# print(output)
# 
#  }

#Maps for presenting

#library(sf)

#blue-red color scheme
# tmap_mode("plot")
# 
# # fix paam title (if using)
# title_sf <- st_sf(geometry = st_sfc(st_point(c(mean(st_bbox(df_map)[c("xmin", "xmax")]), st_bbox(df_map)["ymax"] + 1))), 
#                   label = "Premature Mortality Rate", crs = st_crs(df_map))
# 
# n_na <- sum(is.na(df_map$paam)) #determine NA value
# 
# paam_map <- df_map %>%
#   tm_shape() +
#   tm_polygons(
#     col = "paam", style = "quantile", n = 4, border.alpha = 0.1,
#     palette = c("#d0e1f2", "#a6c8e1", "#2c7fb8", "#f4b6b6", "#d5303e"),
#     title = "Deaths <75 \nper 100,000",
#     showNA = FALSE  
#   ) +
#   tm_add_legend( #manually add NA value
#     type = "fill", 
#     labels = paste0("Missing (n = ", n_na, ")"), 
#     col = "gray",
#     group = "Deaths <75 \nper 100,000"
#   ) +
#   tm_layout(
#     inner.margins = c(0.01, 0.25, 0.01, 0.01),
#     outer.margins = c(0.01, 0.01, 0.01, 0.01),
#     legend.position = c("left", "center"),
#     legend.title.size = 1.2,
#     legend.text.size = 1.0,
#     frame = FALSE
#   )
# 
# print(paam_map)
# 
# 
# # fix Retention title (if using)
# title_sf <- st_sf(geometry = st_sfc(st_point(c(mean(st_bbox(df_map)[c("xmin", "xmax")]), st_bbox(df_map)["ymax"] + 1))), 
#                   label = "Economic Resource Retention", crs = st_crs(df_map))
# n_na <- sum(is.na(df_map$retention))
# 
# retention_map <- df_map %>%
#   tm_shape() +
#   tm_polygons(
#     col = "retention", style = "quantile", n = 4, border.alpha = 0.1,
#     palette = c("#d0e1f2", "#a6c8e1", "#2c7fb8", "#f4b6b6", "#d5303e"),
#     title = "Intermediate \nRetention \nRate",
#     legend.format = list(digits = 2, scientific = FALSE),
#     showNA = FALSE 
#   ) +
#   tm_add_legend( #Manually add NA values
#     type = "fill", 
#     labels = paste0("Missing (n = ", n_na, ")"), 
#     col = "gray",
#     group = "Intermediate \nRetention \nRate"
#   ) +
#   tm_layout(
#     inner.margins = c(0.01, 0.25, 0.01, 0.01),
#     outer.margins = c(0.01, 0.01, 0.01, 0.01),
#     legend.position = c("left", "center"),
#     legend.title.size = 1.2,
#     legend.text.size = 1.0,
#     frame = FALSE
#   )
# 
# print(retention_map)
# 
# # fix ROG title (if using)
# title_sf <- st_sf(geometry = st_sfc(st_point(c(mean(st_bbox(df_map)[c("xmin", "xmax")]), st_bbox(df_map)["ymax"] + 1))), 
#                   label = "Racial Opportunity Gap", crs = st_crs(df_map))
# 
# n_na <- sum(is.na(df_map$rrm_gap))
# 
# rog_map <- df_map %>%
#   tm_shape() +
#   tm_polygons(
#     col = "rrm_gap", style = "quantile", n = 4, border.alpha = 0.1,
#     palette = c("#d0e1f2", "#a6c8e1", "#2c7fb8", "#f4b6b6", "#d5303e", "#8A1B47"),
#     title = "Rank-rank \nmobility gap",
#     legend.format = list(digits = 2, scientific = FALSE),
#     showNA = FALSE 
#   ) +
#   tm_add_legend( #Manually add NA values
#     type = "fill", 
#     labels = paste0("Missing (n = ", n_na, ")"), 
#     col = "gray",
#     group = "Rank-rank \nmobility gap"
#   ) +
#   tm_layout(
#     inner.margins = c(0.01, 0.25, 0.01, 0.01),
#     outer.margins = c(0.01, 0.01, 0.01, 0.01),
#     legend.position = c("left", "center"),
#     legend.title.size = 1.2,
#     legend.text.size = 1.0,
#     frame = FALSE
#   )
# 
# print(rog_map)
# 
# 


# #red-grey color scheme
# palette = c("#888888", "#88727B", "#885C6E", "#885C6E", "#894661", "#8A1B47"), 

# #green-blue color scheme
 #palette = c("#f0f9e8","#ccebc5", "#a8ddb5", "#7bccc4", "#43a2ca","#0868ac"),




```

```{r}

# creating maps
 # map(val = df_map$paam, title = "Premature Age Adjusted Mortality", rev_scale = FALSE)
# map(val = df_map$ypll75, title = "Years of Potential Life Lost before 75", rev_scale = FALSE)
# map(val = df_map$retention, title = "Retention", rev_scale = FALSE)
# map(val = df_map$autonomy, title = "Autonomy", rev_scale = FALSE)
# map(val = df_map$emp_to_va, title = "Employee Share of Value Added", rev_scale = FALSE)
# map(val = df_map$emp_to_output, title = "Employee Share of Output", rev_scale = FALSE)
# map(val = df_map$va_to_output, title = "Value Added Share of Output", rev_scale = FALSE)




```


# Scatterplots
ToDO:: create metro/nonmetro scatter plots
ToDO: scatter plots for prosperity measures

```{r}

# Full data regressions

ggplot(data, aes(retention, paam)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention (2012) and \n Premature Age Adjusted Mortality (2013-2015)",
        x = "Retention",
        y = "Premature Age Adjusted Mortality")

ggplot(data, aes(retention, log_paam_des)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention (2012) and \n Premature Age Adjusted Mortality-LOG (2013-2015)",
        x = "Retention",
        y = "Premature Age Adjusted Mortality-LOG")

#set up to drop bottom coded values of rpaam_*
rpaam_vars <- c("rpaam_AIAN", "rpaam_API", "rpaam_Black", "rpaam_Latine", "rpaam_White")

# Create a named vector of minimums
min_vals <- sapply(rpaam_vars, function(var) {
  min(data[[var]], na.rm = TRUE)
})
names(min_vals) <- rpaam_vars

#rpaam x retention plots
ggplot(data %>% filter(rpaam_AIAN > min_vals["rpaam_AIAN"]), 
       aes(retention, rpaam_AIAN)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(
    title = "Scatter Plot of Retention (2012) and \nPremature Age Adjusted Mortality – AIAN (2013–2015)",
    x = "Retention",
    y = "Premature Age Adjusted Mortality – AIAN"
  )

ggplot(data %>% filter(rpaam_API > min_vals["rpaam_API"]), 
       aes(retention, rpaam_API)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention (2012) and \n Premature Age Adjusted Mortality-API (2013-2015)",
        x = "Retention",
        y = "Premature Age Adjusted Mortality-API")

ggplot(data %>% filter(rpaam_Black > min_vals["rpaam_Black"]), 
       aes(retention, rpaam_Black)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention (2012) and \n Premature Age Adjusted Mortality-Black (2013-2015)",
        x = "Retention",
        y = "Premature Age Adjusted Mortality-Black")

ggplot(data %>% filter(rpaam_Latine > min_vals["rpaam_Latine"]), 
       aes(retention, rpaam_Latine)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention (2012) and \n Premature Age Adjusted Mortality-Latine (2013-2015)",
        x = "Retention",
        y = "Premature Age Adjusted Mortality-Latine")

ggplot(data, aes(retention, rpaam_White)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention (2012) and \n Premature Age Adjusted Mortality-White (2013-2015)",
        x = "Retention",
        y = "Premature Age Adjusted Mortality-White")

ggplot(data, aes(retention, paam, color = rrm_gap)) +
  geom_point() +
  scale_color_viridis_c() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention with Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality (2013-2015)",
        x = "Retention",
        y = "Premature Age Adjusted Mortality", 
        color = "Racial Opportunity Gap")

##rpaam retention X rpaam codes colored by rrm_gap
ggplot(data %>% filter(rpaam_AIAN > min_vals["rpaam_AIAN"]), 
       aes(retention, rpaam_AIAN, color = rrm_gap)) +
  geom_point() +
  scale_color_viridis_c() +
  geom_smooth(method = "lm") +
  labs(
    title = "Scatter Plot of Retention with Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality – AIAN (2013–2015)",
    x = "Retention",
    y = "Premature Age Adjusted Mortality – AIAN", 
    color = "Racial Opportunity Gap"
  )

ggplot(data %>% filter(rpaam_AIAN > min_vals["rpaam_AIAN"]), 
       aes(retention, rpaam_AIAN, color = rrm_gap_aian)) +
  geom_point() +
  scale_color_viridis_c() +
  geom_smooth(method = "lm") +
  labs(
    title = "Scatter Plot of Retention with AIAN-White Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality – AIAN (2013–2015)",
    x = "Retention",
    y = "Premature Age Adjusted Mortality – AIAN", 
    color = "AIAN-White Racial Opportunity Gap"
  )


ggplot(data %>% filter(rpaam_API > min_vals["rpaam_API"]), 
       aes(retention, rpaam_API, color = rrm_gap)) +
  geom_point() +
  scale_color_viridis_c() +
  geom_smooth(method = "lm") +
  labs(
    title = "Scatter Plot of Retention with Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality – API (2013–2015)",
    x = "Retention",
    y = "Premature Age Adjusted Mortality – API", 
    color = "Racial Opportunity Gap"
  )

ggplot(data %>% filter(rpaam_API > min_vals["rpaam_API"]), 
       aes(retention, rpaam_API, color = rrm_gap_asian)) +
  geom_point() +
  scale_color_viridis_c() +
  geom_smooth(method = "lm") +
  labs(
    title = "Scatter Plot of Retention with Asian-White Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality – API (2013–2015)",
    x = "Retention",
    y = "Premature Age Adjusted Mortality – API", 
    color = "Asian-White Racial Opportunity Gap"
  )

ggplot(data %>% filter(rpaam_API > min_vals["rpaam_API"]), 
       aes(retention, rpaam_API, color = rrm_gap_asian_alt)) +
  geom_point() +
  scale_color_viridis_c() +
  geom_smooth(method = "lm") +
  labs(
    title = "Scatter Plot of Retention with Asian-White Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality – API (2013–2015)",
    x = "Retention",
    y = "Premature Age Adjusted Mortality – API", 
    color = "Asian-Asian Racial Opportunity Gap"
  )


ggplot(data %>% filter(rpaam_Black > min_vals["rpaam_Black"]), 
       aes(retention, rpaam_Black, color = rrm_gap)) +
  geom_point() +
  scale_color_viridis_c() +
  geom_smooth(method = "lm") +
  labs(
    title = "Scatter Plot of Retention with Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality – Black (2013–2015)",
    x = "Retention",
    y = "Premature Age Adjusted Mortality – Black", 
    color = "Racial Opportunity Gap"
  )


ggplot(data %>% filter(rpaam_Black > min_vals["rpaam_Black"]), 
       aes(retention, rpaam_Black, color = rrm_gap_black)) +
  geom_point() +
  scale_color_viridis_c() +
  geom_smooth(method = "lm") +
  labs(
    title = "Scatter Plot of Retention with Black-White Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality – Black (2013–2015)",
    x = "Retention",
    y = "Premature Age Adjusted Mortality – Black", 
    color = "Black-White Racial Opportunity Gap"
  )


ggplot(data %>% filter(rpaam_Latine > min_vals["rpaam_Latine"]), 
       aes(retention, rpaam_Latine, color = rrm_gap)) +
  geom_point() +
  scale_color_viridis_c() +
  geom_smooth(method = "lm") +
  labs(
    title = "Scatter Plot of Retention with Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality – Latine (2013–2015)",
    x = "Retention",
    y = "Premature Age Adjusted Mortality – Latine", 
    color = "Racial Opportunity Gap"
  )

ggplot(data %>% filter(rpaam_Latine > min_vals["rpaam_Latine"]), 
       aes(retention, rpaam_Latine, color = rrm_gap_hisp)) +
  geom_point() +
  scale_color_viridis_c() +
  geom_smooth(method = "lm") +
  labs(
    title = "Scatter Plot of Retention with Latine-White Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality – Latine (2013–2015)",
    x = "Retention",
    y = "Premature Age Adjusted Mortality – Latine", 
    color = "Latine-White Racial Opportunity Gap"
  )


ggplot(data, aes(retention, rpaam_White, color = rrm_gap)) +
  geom_point() +
  scale_color_viridis_c() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention with Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality-White (2013-2015)",
        x = "Retention",
        y = "Premature Age Adjusted Mortality-White", 
        color = "Racial Opportunity Gap")

ggplot(data, aes(retention, rpaam_White, color = rrm_gap_white)) +
  geom_point() +
  scale_color_viridis_c() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention with White-White Opportunity Gap (2012) \n and Premature Age Adjusted Mortality-White (2013-2015)",
        x = "Retention",
        y = "Premature Age Adjusted Mortality-White", 
        color = "White-White Opportunity Gap")

#prosperity x paam

ggplot(data, aes(prosperity, paam)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Prosperity (2012) and \n Premature Age Adjusted Mortality (2013-2015)",
        x = "Prosperity",
        y = "Premature Age Adjusted Mortality")


#rpaam prosperty x paam scatter plots

ggplot(data %>% filter(rpaam_AIAN > min_vals["rpaam_AIAN"]), 
       aes(prosperity, rpaam_AIAN)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(
    title = "Scatter Plot of Prosperity (2012) and \nPremature Age Adjusted Mortality – AIAN (2013–2015)",
    x = "Prosperity",
    y = "Premature Age Adjusted Mortality – AIAN"
  )

ggplot(data %>% filter(rpaam_API > min_vals["rpaam_API"]), 
       aes(prosperity, rpaam_API)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Prosperity (2012) and \n Premature Age Adjusted Mortality-API (2013-2015)",
        x = "Prosperity",
        y = "Premature Age Adjusted Mortality-API")

ggplot(data %>% filter(rpaam_Black > min_vals["rpaam_Black"]), 
       aes(prosperity, rpaam_Black)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Prosperity (2012) and \n Premature Age Adjusted Mortality-Black (2013-2015)",
        x = "Prosperity",
        y = "Premature Age Adjusted Mortality-Black")

ggplot(data %>% filter(rpaam_Latine > min_vals["rpaam_Latine"]), 
       aes(prosperity, rpaam_Latine)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Prosperity (2012) and \n Premature Age Adjusted Mortality-Latine (2013-2015)",
        x = "Prosperity",
        y = "Premature Age Adjusted Mortality-Latine")

ggplot(data, aes(prosperity, rpaam_White)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Prosperity (2012) and \n Premature Age Adjusted Mortality-White (2013-2015)",
        x = "Prosperity",
        y = "Premature Age Adjusted Mortality-White")



##prosperity, paam, rrm_gap

ggplot(data, aes(prosperity, paam, color = rrm_gap)) +
  geom_point() +
    scale_color_viridis_c() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Prosperity with Racial Opportunity Gap (2012)\n and Premature Age Adjusted Mortality (2013-2015)",
        x = "Prosperity",
        y = "Premature Age Adjusted Mortality", 
        color = "Racial Opportunity Gap")

## prosperity, rpaam, rrm_gap
ggplot(data %>% filter(rpaam_AIAN > min_vals["rpaam_AIAN"]), 
       aes(prosperity, rpaam_AIAN, color = rrm_gap)) +
  geom_point() +
  scale_color_viridis_c() +
  geom_smooth(method = "lm") +
  labs(
    title = "Scatter Plot of Prosperity with Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality – AIAN (2013–2015)",
    x = "Prosperity",
    y = "Premature Age Adjusted Mortality – AIAN", 
    color = "Racial Opportunity Gap"
  )

ggplot(data %>% filter(rpaam_AIAN > min_vals["rpaam_AIAN"]), 
       aes(prosperity, rpaam_AIAN, color = rrm_aian)) +
  geom_point() +
  scale_color_viridis_c() +
  geom_smooth(method = "lm") +
  labs(
    title = "Scatter Plot of Prosperity with Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality – AIAN (2013–2015)",
    x = "Prosperity",
    y = "Premature Age Adjusted Mortality – AIAN", 
    color = "Racial Opportunity Gap"
  )


ggplot(data %>% filter(rpaam_API > min_vals["rpaam_API"]), 
       aes(prosperity, rpaam_API, color = rrm_gap)) +
  geom_point() +
  scale_color_viridis_c() +
  geom_smooth(method = "lm") +
  labs(
    title = "Scatter Plot of Prosperity with Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality – API (2013–2015)",
    x = "Prosperity",
    y = "Premature Age Adjusted Mortality – API", 
    color = "Racial Opportunity Gap"
  )


ggplot(data %>% filter(rpaam_Black > min_vals["rpaam_Black"]), 
       aes(prosperity, rpaam_Black, color = rrm_gap)) +
  geom_point() +
  scale_color_viridis_c() +
  geom_smooth(method = "lm") +
  labs(
    title = "Scatter Plot of Prosperity with Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality – Black (2013–2015)",
    x = "Prosperity",
    y = "Premature Age Adjusted Mortality – Black", 
    color = "Racial Opportunity Gap"
  )


ggplot(data %>% filter(rpaam_Latine > min_vals["rpaam_Latine"]), 
       aes(prosperity, rpaam_Latine, color = rrm_gap)) +
  geom_point() +
  scale_color_viridis_c() +
  geom_smooth(method = "lm") +
  labs(
    title = "Scatter Plot of Prosperity with Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality – Latine (2013–2015)",
    x = "Prosperity",
    y = "Premature Age Adjusted Mortality – Latine", 
    color = "Racial Opportunity Gap"
  )


ggplot(data, aes(prosperity, rpaam_White, color = rrm_gap)) +
  geom_point() +
  scale_color_viridis_c() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Prosperity with Racial Opportunity Gap (2012) \n and Premature Age Adjusted Mortality-White (2013-2015)",
        x = "Prosperity",
        y = "Premature Age Adjusted Mortality-White", 
        color = "Racial Opportunity Gap")

ggplot(data, aes(prosperity, rpaam_White, color = rrm_gap_white)) +
  geom_point() +
  scale_color_viridis_c() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Prosperity with White-White Opportunity Gap (2012) \n and Premature Age Adjusted Mortality-White (2013-2015)",
        x = "Prosperity",
        y = "Premature Age Adjusted Mortality-White", 
        color = "White-White Opportunity Gap")


# Filter the data to include only "metro" cases
metro_data <- subset(data, metro_nonmetro == "metro")

ggplot(metro_data, aes(retention, paam)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention and \n Premature Age Adjusted Mortality for Metro",
        x = "Prosperity",
        y = "Premature Age Adjusted Mortality")

ggplot(metro_data, aes(retention, paam, color = rrm_gap)) +
  geom_point() +
     scale_color_viridis_c() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention with Racial Opportunity Gap and \n Premature Age Adjusted Mortality for Metro",
        x = "Prosperity",
        y = "Premature Age Adjusted Mortality",
        color = "Racial Opportunity Gap")



ggplot(metro_data, aes(prosperity, paam)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Prosperity (2012) and \n Premature Age Adjusted Mortality (2013-2015) for Metro",
        x = "Prosperity",
        y = "Premature Age Adjusted Mortality")

ggplot(metro_data, aes(prosperity, paam, color = rrm_gap)) +
  geom_point() +
    scale_color_viridis_c() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Prosperity with Racial Opportunity Gap (2012)\n and Premature Age Adjusted Mortality (2013-2015) for Metro",
        x = "Prosperity",
        y = "Premature Age Adjusted Mortality", 
        color = "Racial Opportunity Gap")

# Nonmetro plots
# Filter the data to include only "nonmetro" cases
nonmetro_data <- subset(data, metro_nonmetro == "nonmetro")

ggplot(nonmetro_data, aes(retention, paam)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention and \n Premature Age Adjusted Mortality for Non-Metro",
        x = "Retention",
        y = "Premature Age Adjusted Mortality")

ggplot(nonmetro_data, aes(retention, paam, color = rrm_gap)) +
  geom_point() +
  scale_color_viridis_c() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention with Racial Opportunity Gap and \n Premature Age Adjusted Mortality for Non-Metro",
        x = "Retention",
        y = "Premature Age Adjusted Mortality", 
        color = "Racial Opportunity Gap")


##scatter plot of retention and prosperity (2012)
ggplot(nonmetro_data, aes(retention, prosperity)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention (2012) and \n Prosperity (2012) for Non-Metro",
        x = "Retention",
        y = "Prosperity")

ggplot(nonmetro_data, aes(retention, prosperity, color = rrm_gap)) +
  geom_point() +
  scale_color_viridis_c() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention with Racial Opportunity Gap and \n Prosperity for Non-Metro",
        x = "Retention",
        y = "Prosperity", 
        color = "Racial Opportunity Gap")


ggplot(nonmetro_data, aes(prosperity, paam)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Prosperity and \n Premature Age Adjusted Mortality for Non-Metro",
        x = "Prosperity",
        y = "Premature Age Adjusted Mortality")

ggplot(nonmetro_data, aes(prosperity, paam, color = rrm_gap)) +
  geom_point() +
  scale_color_viridis_c() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Prosperity with Racial Opportunity Gap and \n Premature Age Adjusted Mortality for Non-Metro",
        x = "Prosperity",
        y = "Premature Age Adjusted Mortality", 
        color = "Racial Opportunity Gap")

```




# ESDA

```{r}
map = ih_dp$call_geog(2012)
df_map <- left_join(map, data, by = "place") 


nb <- poly2nb(df_map, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]


```

##PAAM
###moran global paam 

```{r}
#Drop NA

df_map_clean <- df_map[!is.na(df_map$paam), ]

# Subset the spatial weights list to match the cleaned data
lw_clean <- subset(lw, !is.na(df_map$paam))

# Run Moran's I test
moran.test(df_map_clean$paam, lw_clean, zero.policy = TRUE)

```


###lisa paam
```{r}
df_lisa<- df_map[!is.na(df_map$paam), ] %>% 
  shift_geometry()


w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['paam'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.1)
title(main = "LISA, Premature Age-Adjusted Mortality")


# Create the legend separately

# legend_labels <- c("Not significant", "High-High", "Low-Low", "High-Low", "Low-High")
# legend_colors <- unlist(lisa_colors)
# legend("bottomleft", border = "#eeeeee")
```

##rpaam-AIAN
```{r}
#Drop NA

df_map_clean <- df_map[!is.na(df_map$rpaam_AIAN), ]

# Subset the spatial weights list to match the cleaned data
lw_clean <- subset(lw, !is.na(df_map$rpaam_AIAN))

# Run Moran's I test
moran.test(df_map_clean$rpaam_AIAN, lw_clean, zero.policy = TRUE)


```

```{r}
df_lisa<- df_map[!is.na(df_map$rpaam_AIAN), ] %>% 
  shift_geometry()


w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['rpaam_AIAN'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.1)
title(main = "LISA, Premature Age-Adjusted Mortality-AIAN")





```
##rpaam_API

```{r}
#Drop NA

df_map_clean <- df_map[!is.na(df_map$rpaam_API), ]

# Subset the spatial weights list to match the cleaned data
lw_clean <- subset(lw, !is.na(df_map$rpaam_API))

# Run Moran's I test
moran.test(df_map_clean$rpaam_API, lw_clean, zero.policy = TRUE)


```



```{r}

df_lisa<- df_map[!is.na(df_map$rpaam_API), ] %>% 
  shift_geometry()


w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['rpaam_API'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.1)
title(main = "LISA, Premature Age-Adjusted Mortality-API")



```
##rpaam_Black 

```{r}
#Drop NA

df_map_clean <- df_map[!is.na(df_map$rpaam_Black), ]

# Subset the spatial weights list to match the cleaned data
lw_clean <- subset(lw, !is.na(df_map$rpaam_Black))

# Run Moran's I test
moran.test(df_map_clean$rpaam_Black, lw_clean, zero.policy = TRUE)



```

```{r}


df_lisa<- df_map[!is.na(df_map$rpaam_Black), ] %>% 
  shift_geometry()


w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['rpaam_Black'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.1)
title(main = "LISA, Premature Age-Adjusted Mortality-Black")



```


##rpaam_Latine
```{r}
#Drop NA

df_map_clean <- df_map[!is.na(df_map$rpaam_Latine), ]

# Subset the spatial weights list to match the cleaned data
lw_clean <- subset(lw, !is.na(df_map$rpaam_Latine))

# Run Moran's I test
moran.test(df_map_clean$rpaam_Latine, lw_clean, zero.policy = TRUE)


```

```{r}
df_lisa <- df_map[!is.na(df_map$rpaam_Latine), ] %>% 
  shift_geometry()



w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['rpaam_Latine'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.1)
title(main = "LISA, Premature Age-Adjusted Mortality-Latine")


```

##rpaam_white

```{r}
#Drop NA

df_map_clean <- df_map[!is.na(df_map$rpaam_White), ]

# Subset the spatial weights list to match the cleaned data
lw_clean <- subset(lw, !is.na(df_map$rpaam_White))

# Run Moran's I test
moran.test(df_map_clean$rpaam_White, lw_clean, zero.policy = TRUE)


```


```{r}

df_lisa<- df_map[!is.na(df_map$rpaam_White), ] %>% 
  shift_geometry()


w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['rpaam_White'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.1)
title(main = "LISA, Premature Age-Adjusted Mortality-White")



```


##Retention
###moran global retention 

```{r}
#Drop NA

df_map_clean <- df_map[!is.na(df_map$retention), ]

# Subset the spatial weights list to match the cleaned data
lw_clean <- subset(lw, !is.na(df_map$retention))
# Run Moran's I test
moran.test(df_map_clean$retention, lw_clean, zero.policy = TRUE)

```


###lisa retention
```{r}
df_lisa<- df_map[!is.na(df_map$retention), ] %>% 
  shift_geometry()

w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['retention'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.2)
title(main = "LISA, Retention")


# Create the legend separately

# legend_labels <- c("Not significant", "High-High", "Low-Low", "High-Low", "Low-High")
# legend_colors <- unlist(lisa_colors)
# legend("bottomleft", border = "#eeeeee")
```

##Racial Opportunity Gap
###moran global ROG 

```{r}

#Drop NA

df_map_clean <- df_map[!is.na(df_map$rrm_gap), ]

# Subset the spatial weights list to match the cleaned data
lw_clean <- subset(lw, !is.na(df_map$rrm_gap))
# Run Moran's I test
moran.test(df_map_clean$rrm_gap, lw_clean, zero.policy = TRUE)
```


###lisa ROG
```{r}


w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['rrm_gap'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.2)
title(main = "LISA, Racial Opportunity Gap")


# Create the legend separately

# legend_labels <- c("Not significant", "High-High", "Low-Low", "High-Low", "Low-High")
# legend_colors <- unlist(lisa_colors)
# legend("bottomleft", border = "#eeeeee")
```
##AIAN_rog
```{r}

#Drop NA

df_map_clean <- df_map[!is.na(df_map$rrm_gap_aian), ]

# Subset the spatial weights list to match the cleaned data
lw_clean <- subset(lw, !is.na(df_map$rrm_gap_aian))

# Run Moran's I test
moran.test(df_map_clean$rrm_gap_aian, lw_clean, zero.policy = TRUE)


```


```{r}

df_lisa<- df_map[!is.na(df_map$rrm_gap_aian), ] %>% 
  shift_geometry()

w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['rrm_gap_aian'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.2)
title(main = "LISA, Racial Opportunity Gap-AIAN")
```
##API_ROG

```{r}
#Drop NA

df_map_clean <- df_map[!is.na(df_map$rrm_gap_asian), ]

# Subset the spatial weights list to match the cleaned data
lw_clean <- subset(lw, !is.na(df_map$rrm_gap_asian))

# Run Moran's I test
moran.test(df_map_clean$rrm_gap_asian, lw_clean, zero.policy = TRUE)


```


```{r}

df_lisa<- df_map[!is.na(df_map$rrm_gap_asian), ] %>% 
  shift_geometry()

w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['rrm_gap_asian'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.2)
title(main = "LISA, Racial Opportunity Gap-API")

```
##Black_ROG

```{r}
#Drop NA

df_map_clean <- df_map[!is.na(df_map$rrm_gap_black), ]

# Subset the spatial weights list to match the cleaned data
lw_clean <- subset(lw, !is.na(df_map$rrm_gap_black))

# Run Moran's I test
moran.test(df_map_clean$rrm_gap_black, lw_clean, zero.policy = TRUE)


```

```{r}


df_lisa<- df_map[!is.na(df_map$rrm_gap_black), ] %>% 
  shift_geometry()

w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['rrm_gap_black'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.2)
title(main = "LISA, Racial Opportunity Gap-Black")

```

##Latine_ROG
```{r}

#Drop NA

df_map_clean <- df_map[!is.na(df_map$rrm_gap_hisp), ]

# Subset the spatial weights list to match the cleaned data
lw_clean <- subset(lw, !is.na(df_map$rrm_gap_hisp))

# Run Moran's I test
moran.test(df_map_clean$rrm_gap_hisp, lw_clean, zero.policy = TRUE)


```

```{r}

df_lisa<- df_map[!is.na(df_map$rrm_gap_hisp), ] %>% 
  shift_geometry()

w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['rrm_gap_hisp'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.2)
title(main = "LISA, Racial Opportunity Gap-Latine")


```
<!-- ##White_ROG -->

<!-- ```{r} -->
<!-- #Drop NA -->

<!-- df_map_clean <- df_map[!is.na(df_map$rrm_gap_white), ] -->

<!-- # Subset the spatial weights list to match the cleaned data -->
<!-- lw_clean <- subset(lw, !is.na(df_map$rrm_gap_white)) -->

<!-- # Run Moran's I test -->
<!-- moran.test(df_map_clean$rrm_gap_white, lw_clean, zero.policy = TRUE) -->


<!-- ``` -->


```{r}

# df_lisa<- df_map[!is.na(df_map$rrm_gap_white), ] %>% 
#   shift_geometry()
# 
# w <- queen_weights(df_lisa)
# lisa <- local_moran(w, df_lisa['rrm_gap_white'])
# lisa_colors <- lisa_colors(lisa)
# lisa_labels <- lisa_labels(lisa)
# lisa_clusters <- lisa_clusters(lisa)
# plot(st_geometry(df_lisa), 
#      col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
#      border = "#333333", lwd=0.2)
# title(main = "LISA, Racial Opportunity Gap-White")


```


##Prosperity
###moran global prosperity 

```{r}
#Drop NA

df_map_clean <- df_map[!is.na(df_map$prosperity), ]

# Subset the spatial weights list to match the cleaned data
lw_clean <- subset(lw, !is.na(df_map$prosperity))
# Run Moran's I test
moran.test(df_map_clean$prosperity, lw_clean, zero.policy = TRUE)
```


###lisa prosperity
```{r}
df_lisa<- df_map[!is.na(df_map$prosperity), ] %>% 
  shift_geometry()

w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['prosperity'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.2)
title(main = "LISA, Prosperity")


# Create the legend separately

# legend_labels <- c("Not significant", "High-High", "Low-Low", "High-Low", "Low-High")
# legend_colors <- unlist(lisa_colors)
# legend("bottomleft", border = "#eeeeee")
```



# rpaam, large metro & large nonmetro

#ASA Model Data

```{r}
map = ih_dp$call_geog(2012)
df_map <- left_join(map, data, by = "place") %>% shift_geometry()

temp = df_map %>% drop_na(c(paam, retention, rrm_gap, pct_mfg, pct_mine, pct_ag, pct_fire, pct_edmed, laborforce_part_rate, age, bach, poverty_rate, income_rate, logpop, uninsured, state_fe)) %>% mutate(metro = ifelse(ruc_code >= 4, 1, 0), paam = (paam - mean(paam, na.rm=TRUE))/sd(paam, na.rm=TRUE), retention = (retention - mean(retention, na.rm=TRUE))/sd(retention, na.rm=TRUE), rrm_gap = (rrm_gap - mean(rrm_gap, na.rm=TRUE))/sd(rrm_gap, na.rm=TRUE), rrm_gap_aian = (rrm_gap_aian - mean(rrm_gap_aian, na.rm=TRUE))/sd(rrm_gap_aian, na.rm=TRUE), rrm_gap_asian = (rrm_gap_aian - mean(rrm_gap_aian, na.rm=TRUE))/sd(rrm_gap_aian, na.rm=TRUE), rrm_gap_black = (rrm_gap_black - mean(rrm_gap_black, na.rm=TRUE))/sd(rrm_gap_black, na.rm=TRUE), rrm_gap_hisp = (rrm_gap_hisp - mean(rrm_gap_hisp, na.rm=TRUE))/sd(rrm_gap_hisp, na.rm=TRUE), rrm_gap_white = (rrm_gap_white - mean(rrm_gap_white, na.rm=TRUE))/sd(rrm_gap_white, na.rm=TRUE), rrm_gap_asian_alt = (rrm_gap_asian_alt - mean(rrm_gap_asian_alt, na.rm=TRUE))/sd(rrm_gap_asian_alt, na.rm=TRUE), pct_mfg = (pct_mfg - mean(pct_mfg, na.rm=TRUE))/sd(pct_mfg, na.rm=TRUE), pct_mine = (pct_mine - mean(pct_mine, na.rm=TRUE))/sd(pct_mine, na.rm=TRUE), pct_ag = (pct_ag - mean(pct_ag, na.rm=TRUE))/sd(pct_ag, na.rm=TRUE), pct_fire = (pct_fire - mean(pct_fire, na.rm=TRUE))/sd(pct_fire, na.rm=TRUE), pct_edmed = (pct_edmed - mean(pct_edmed, na.rm=TRUE))/sd(pct_edmed, na.rm=TRUE), laborforce_part_rate = (laborforce_part_rate - mean(laborforce_part_rate, na.rm=TRUE))/sd(laborforce_part_rate, na.rm=TRUE), age = (age - mean(age, na.rm=TRUE))/sd(age, na.rm=TRUE), bach = (bach - mean(bach, na.rm=TRUE))/sd(bach, na.rm=TRUE), poverty_rate = (poverty_rate - mean(poverty_rate, na.rm=TRUE))/sd(poverty_rate, na.rm=TRUE), income_rate = (income_rate - mean(income_rate, na.rm=TRUE))/sd(income_rate, na.rm=TRUE), logpop = (logpop - mean(logpop, na.rm=TRUE))/sd(logpop, na.rm=TRUE), uninsured = (uninsured - mean(uninsured, na.rm=TRUE))/sd(uninsured, na.rm=TRUE)) %>% 
  mutate(sr = metro_nonmetro, sr2 = three_metro, sr3 = four_metro)


df_black = temp %>% left_join(y=rpaam, "place") %>% filter(racegr == "Black")
df_white = temp %>% left_join(y=rpaam, "place") %>% filter(racegr == "White")
df_aian = temp %>% left_join(y=rpaam, "place") %>% filter(racegr == "AIAN")
df_api = temp %>% left_join(y=rpaam, "place") %>% filter(racegr == "API")
df_latine = temp %>% left_join(y=rpaam, "place") %>% filter(racegr == "Latine")


```

####counts data

```{r}
df_counts <- bind_rows(
  Black  = df_black  %>% st_drop_geometry(),
  White  = df_white  %>% st_drop_geometry(),
  AIAN   = df_aian   %>% st_drop_geometry(),
  API    = df_api    %>% st_drop_geometry(),
  Latine = df_latine %>% st_drop_geometry(),
  .id = "Group"
) %>%
  count(Group, sr3)

# Step 2: Pivot to wide format
df_wide <- df_counts %>%
  tidyr::pivot_wider(
    names_from = sr3,
    values_from = n,
    values_fill = 0
  ) %>%
  group_by(Group) %>%
  summarise(
    large_metro     = sum(large_metro, na.rm = TRUE),
    small_metro     = sum(small_metro, na.rm = TRUE),
    large_nonmetro  = sum(large_nonmetro, na.rm = TRUE),
    small_nonmetro  = sum(small_nonmetro, na.rm = TRUE),
    Total = sum(c_across(large_metro:small_nonmetro), na.rm = TRUE),
    .groups = "drop"
  )

# Optional: reorder columns
df_wide <- df_wide %>%
  select(Group, large_metro, small_metro, large_nonmetro, small_nonmetro, Total)

# View result
df_wide

```

####counts M1 and M2
```{r}

df_black_clean <- df_black %>%
  st_drop_geometry() %>%
  filter(complete.cases(rpaam, retention, pct_black, prosperity, pct_ag, pct_mfg, pct_mine, age, logpop, uninsured))

df_white_clean <- df_white %>%
  st_drop_geometry() %>%
  filter(complete.cases(rpaam, retention, pct_white, prosperity, pct_ag, pct_mfg, pct_mine, age, logpop, uninsured)) 

df_aian_clean <- df_aian %>%
  st_drop_geometry() %>%
  filter(complete.cases(rpaam, retention, pct_ind,prosperity, pct_ag, pct_mfg, pct_mine, age, logpop, uninsured))

df_api_clean <- df_api %>%
  st_drop_geometry() %>%
  filter(complete.cases(rpaam, retention, pct_asian, prosperity, pct_ag, pct_mfg, pct_mine, age, logpop, uninsured))  
df_latine_clean <- df_latine %>%
  st_drop_geometry() %>%
  filter(complete.cases(rpaam, retention, pct_hisp, prosperity, pct_ag, pct_mfg, pct_mine, age, logpop, uninsured))  

df_counts_1 <- bind_rows(
  Black  = df_black_clean,
  White  = df_white_clean,
  AIAN   = df_aian_clean,
  API    = df_api_clean,
  Latine = df_latine_clean,
  .id = "Group"
) %>%
  count(Group, sr3)


df_wide_1 <- df_counts_1 %>%
  tidyr::pivot_wider(
    names_from = sr3,
    values_from = n,
    values_fill = 0
  ) %>%
  group_by(Group) %>%
  summarise(
    large_metro     = sum(large_metro, na.rm = TRUE),
    small_metro     = sum(small_metro, na.rm = TRUE),
    large_nonmetro  = sum(large_nonmetro, na.rm = TRUE),
    small_nonmetro  = sum(small_nonmetro, na.rm = TRUE),
    Total = sum(c_across(large_metro:small_nonmetro), na.rm = TRUE),
    .groups = "drop"
  )

# Optional: reorder columns
df_wide_1 <- df_wide_1 %>%
  select(Group, large_metro, small_metro, large_nonmetro, small_nonmetro, Total)

# View result
df_wide_1

```

####counts M3 

```{r}

df_black_clean_2 <- df_black %>%
  st_drop_geometry() %>%
  filter(complete.cases(rpaam, retention, rrm_gap_black, pct_black, prosperity, pct_ag, pct_mfg, pct_mine, age, logpop, uninsured))

df_white_clean_2 <- df_white %>%
  st_drop_geometry() %>%
  filter(complete.cases(rpaam, retention, rrm_gap, pct_white, prosperity, pct_ag, pct_mfg, pct_mine, age, logpop, uninsured)) 

df_aian_clean_2 <- df_aian %>%
  st_drop_geometry() %>%
  filter(complete.cases(rpaam, retention, rrm_gap_aian, pct_ind,prosperity, pct_ag, pct_mfg, pct_mine, age, logpop, uninsured))

df_api_clean_2 <- df_api %>%
  st_drop_geometry() %>%
  filter(complete.cases(rpaam, retention, rrm_gap_asian, pct_asian, prosperity, pct_ag, pct_mfg, pct_mine, age, logpop, uninsured))  

df_latine_clean_2 <- df_latine %>%
  st_drop_geometry() %>%
  filter(complete.cases(rpaam, retention, rrm_gap_hisp, pct_hisp, prosperity, pct_ag, pct_mfg, pct_mine, age, logpop, uninsured))  

df_counts_2 <- bind_rows(
  Black  = df_black_clean_2,
  White  = df_white_clean_2,
  AIAN   = df_aian_clean_2,
  API    = df_api_clean_2,
  Latine = df_latine_clean_2,
  .id = "Group"
) %>%
  count(Group, sr3)


df_wide_2 <- df_counts_2 %>%
  tidyr::pivot_wider(
    names_from = sr3,
    values_from = n,
    values_fill = 0
  ) %>%
  group_by(Group) %>%
  summarise(
    large_metro     = sum(large_metro, na.rm = TRUE),
    small_metro     = sum(small_metro, na.rm = TRUE),
    large_nonmetro  = sum(large_nonmetro, na.rm = TRUE),
    small_nonmetro  = sum(small_nonmetro, na.rm = TRUE),
    Total = sum(c_across(large_metro:small_nonmetro), na.rm = TRUE),
    .groups = "drop"
  )

# Optional: reorder columns
df_wide_2 <- df_wide_2 %>%
  select(Group, large_metro, small_metro, large_nonmetro, small_nonmetro, Total)

# View result
df_wide_2




```



#ASA Models

###OLS Model 1 + sp auto

####Black 

```{r}

#ols1

##Black

Q2ar <- df_black %>%
  dplyr::select(rpaam, retention, pct_black, pct_mfg, pct_ag, pct_mine, age, prosperity, logpop, uninsured, geometry) %>%
  na.omit()

ols1_black = lm(data = Q2ar, rpaam ~ retention + pct_black + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured)

summary(ols1_black)

Q2ar$r = ols1_black$resid
nb <- poly2nb(Q2ar, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(Q2ar$r,lw, zero.policy=TRUE)
w <- queen_weights(Q2ar)
lisa <- local_moran(w, Q2ar['r'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(
  Q2ar["r"],  
  col = sapply(lisa_clusters, function(x) lisa_colors[[x + 1]]),
  border = "#333333", lwd = 0.2
)

```

####AIAN
```{r}

Q2ar <- df_aian %>%
  dplyr::select(rpaam, retention, pct_ind, pct_mfg, pct_ag, pct_mine, age, prosperity, logpop, uninsured, geometry) %>%
  na.omit()

ols1_aian = lm(data = Q2ar, rpaam ~ retention + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured)

summary(ols1_aian)

Q2ar$r = ols1_aian$resid
nb <- poly2nb(Q2ar, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(Q2ar$r,lw, zero.policy=TRUE)
w <- queen_weights(Q2ar)
lisa <- local_moran(w, Q2ar['r'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(
  Q2ar["r"],  
  col = sapply(lisa_clusters, function(x) lisa_colors[[x + 1]]),
  border = "#333333", lwd = 0.2
)


```
####API
```{r}

Q2ar <- df_api %>%
  dplyr::select(rpaam, retention, pct_asian, pct_mfg, pct_ag, pct_mine, age, prosperity, logpop, uninsured, geometry) %>%
  na.omit()

ols1_api = lm(data = Q2ar, rpaam ~ retention + pct_asian + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured)

summary(ols1_api)

Q2ar$r = ols1_api$resid
nb <- poly2nb(Q2ar, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(Q2ar$r,lw, zero.policy=TRUE)
w <- queen_weights(Q2ar)
lisa <- local_moran(w, Q2ar['r'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(
  Q2ar["r"],  
  col = sapply(lisa_clusters, function(x) lisa_colors[[x + 1]]),
  border = "#333333", lwd = 0.2
)

```

####Latine

```{r}

Q2ar <- df_latine %>%
  dplyr::select(rpaam, retention, pct_hisp, pct_mfg, pct_ag, pct_mine, age, prosperity, logpop, uninsured, geometry) %>%
  na.omit()

ols1_latine = lm(data = Q2ar, rpaam ~ retention + pct_hisp + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured)

summary(ols1_latine)

Q2ar$r = ols1_latine$resid
nb <- poly2nb(Q2ar, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(Q2ar$r,lw, zero.policy=TRUE)
w <- queen_weights(Q2ar)
lisa <- local_moran(w, Q2ar['r'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(
  Q2ar["r"],  
  col = sapply(lisa_clusters, function(x) lisa_colors[[x + 1]]),
  border = "#333333", lwd = 0.2
)


```

####White

```{r}

Q2ar <- df_white %>%
  dplyr::select(rpaam, retention, pct_white, pct_mfg, pct_ag, pct_mine, age, prosperity, logpop, uninsured, geometry) %>%
  na.omit()

ols1_white = lm(data = Q2ar, rpaam ~ retention + pct_white + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured)


#summary(ols1_white)


Q2ar$r = ols1_white$resid
nb <- poly2nb(Q2ar, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(Q2ar$r,lw, zero.policy=TRUE)
w <- queen_weights(Q2ar)
lisa <- local_moran(w, Q2ar['r'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(
  Q2ar["r"],  
  col = sapply(lisa_clusters, function(x) lisa_colors[[x + 1]]),
  border = "#333333", lwd = 0.2
)




```




###OLS Model 3 + sp auto

####Black 

```{r}

#ols1

##Black

Q2ar <- df_black %>%
  dplyr::select(rpaam, retention, rrm_gap_black, pct_black, pct_mfg, pct_ag, pct_mine, age, prosperity, logpop, uninsured, geometry) %>%
  na.omit()

ols3_black = lm(data = Q2ar, rpaam ~ retention + rrm_gap_black + retention*rrm_gap_black + pct_black + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured)

summary(ols3_black)

Q2ar$r = ols3_black$resid
nb <- poly2nb(Q2ar, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(Q2ar$r,lw, zero.policy=TRUE)
w <- queen_weights(Q2ar)
lisa <- local_moran(w, Q2ar['r'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(
  Q2ar["r"],  
  col = sapply(lisa_clusters, function(x) lisa_colors[[x + 1]]),
  border = "#333333", lwd = 0.2
)

```

####AIAN
```{r}

Q2ar <- df_aian %>%
  dplyr::select(rpaam, retention, rrm_gap_aian, pct_ind, pct_mfg, pct_ag, pct_mine, age, prosperity, logpop, uninsured, geometry) %>%
  na.omit()


ols3_aian = lm(data = Q2ar, rpaam ~ retention + rrm_gap_aian + retention*rrm_gap_aian +  pct_ind  + pct_ag + pct_mine + age + prosperity + logpop + uninsured)


summary(ols3_aian)

Q2ar$r = ols3_aian$resid
nb <- poly2nb(Q2ar, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(Q2ar$r,lw, zero.policy=TRUE)
w <- queen_weights(Q2ar)
lisa <- local_moran(w, Q2ar['r'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(
  Q2ar["r"],  
  col = sapply(lisa_clusters, function(x) lisa_colors[[x + 1]]),
  border = "#333333", lwd = 0.2
)


```
####API
```{r}

Q2ar <- df_api %>%
  dplyr::select(rpaam, retention, rrm_gap_asian, pct_asian, pct_mfg, pct_ag, pct_mine, age, prosperity, logpop, uninsured, geometry) %>%
  na.omit()


ols3_api = lm(data = Q2ar, rpaam ~ retention + rrm_gap_asian + retention*rrm_gap_asian + pct_asian + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured)

summary(ols3_api)

Q2ar$r = ols3_api$resid
nb <- poly2nb(Q2ar, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(Q2ar$r,lw, zero.policy=TRUE)
w <- queen_weights(Q2ar)
lisa <- local_moran(w, Q2ar['r'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(
  Q2ar["r"],  
  col = sapply(lisa_clusters, function(x) lisa_colors[[x + 1]]),
  border = "#333333", lwd = 0.2
)

```

####Latine

```{r}

Q2ar <- df_latine %>%
  dplyr::select(rpaam, retention, rrm_gap_hisp, pct_hisp, pct_mfg, pct_ag, pct_mine, age, prosperity, logpop, uninsured, geometry) %>%
  na.omit()


ols3_latine = lm(data = Q2ar, rpaam ~ retention + rrm_gap_hisp + retention*rrm_gap_hisp +  pct_hisp + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured)

summary(ols3_latine)

Q2ar$r = ols3_latine$resid
nb <- poly2nb(Q2ar, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(Q2ar$r,lw, zero.policy=TRUE)
w <- queen_weights(Q2ar)
lisa <- local_moran(w, Q2ar['r'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(
  Q2ar["r"],  
  col = sapply(lisa_clusters, function(x) lisa_colors[[x + 1]]),
  border = "#333333", lwd = 0.2
)


```

####White

```{r}

Q2ar <- df_white %>%
  dplyr::select(rpaam, retention, rrm_gap, pct_white, pct_mfg, pct_ag, pct_mine, age, prosperity, logpop, uninsured, geometry) %>%
  na.omit()


ols3_white = lm(data = Q2ar, rpaam ~ retention + rrm_gap + retention*rrm_gap + pct_white + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured)


summary(ols3_white)


Q2ar$r = ols3_white$resid
nb <- poly2nb(Q2ar, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(Q2ar$r,lw, zero.policy=TRUE)
w <- queen_weights(Q2ar)
lisa <- local_moran(w, Q2ar['r'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(
  Q2ar["r"],  
  col = sapply(lisa_clusters, function(x) lisa_colors[[x + 1]]),
  border = "#333333", lwd = 0.2
)




```




###Model SE-ROG + controls > rpaam

```{r}

nb <- poly2nb(df_black, queen=TRUE)
lw_black <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_white, queen=TRUE)
lw_white <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_aian, queen=TRUE)
lw_aian <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_api, queen=TRUE)
lw_api <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_latine, queen=TRUE)
lw_latine <- nb2listw(nb, style="W", zero.policy=TRUE)


black_SE = errorsarlm(rpaam ~ rrm_gap_black + pct_black + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured, data = df_black,
  listw = lw_black,zero.policy = TRUE)
white_SE = errorsarlm(rpaam ~ rrm_gap_white + pct_white + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured, data = df_white,
  listw = lw_white,zero.policy = TRUE)
aian_SE = errorsarlm(rpaam ~ rrm_gap_aian + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured, data = df_aian,
  listw = lw_aian,zero.policy = TRUE)
api_SE = errorsarlm(rpaam ~ rrm_gap_asian + pct_asian + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured, data = df_api,
  listw = lw_api,zero.policy = TRUE)
latine_SE = errorsarlm(rpaam ~ rrm_gap_hisp + pct_hisp + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured, data = df_latine,
  listw = lw_latine,zero.policy = TRUE)


summary(black_SE)
summary(white_SE)
summary(aian_SE)
summary(api_SE)
summary(latine_SE)

```



###Model SR-ROG + controls > rpaam

```{r}
nb <- poly2nb(df_black, queen=TRUE)
lw_black <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_white, queen=TRUE)
lw_white <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_aian, queen=TRUE)
lw_aian <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_api, queen=TRUE)
lw_api <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_latine, queen=TRUE)
lw_latine <- nb2listw(nb, style="W", zero.policy=TRUE)



black_S = errorsarlm(data = df_black, rpaam ~ 0 + sr3/(rrm_gap_black + pct_black  + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
                  lw_black, zero.policy = TRUE)
white_S = errorsarlm(data = df_white, rpaam ~ 0 + sr3/(rrm_gap + pct_white + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
                  lw_white, zero.policy = TRUE)
aian_S = errorsarlm(data = df_aian, rpaam ~ 0 + sr3/(rrm_gap_aian + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
                  lw_aian, zero.policy = TRUE)
api_S = errorsarlm(data = df_api, rpaam ~ 0 + sr3/(rrm_gap_asian +  pct_asian + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
                  lw_api, zero.policy = TRUE)
latine_S = errorsarlm(data = df_latine, rpaam ~ 0 + sr3/(rrm_gap_hisp +  pct_hisp + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
                  lw_latine, zero.policy = TRUE)
# latine_S_top = errorsarlm(data = df_latine_top, rpaam ~ 0 + sr3/(rrm_gap +  pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_latine, zero.policy = TRUE)
# latine_S_orig = errorsarlm(data = df_latine_orig, rpaam ~ 0 + sr3/(rrm_gap + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_latine, zero.policy = TRUE)

summary(black_S)
summary(white_S)
summary(aian_S)
summary(api_S)
summary(latine_S)




```


###Model 1- SE- retention + controls > rpaam

```{r}
nb <- poly2nb(df_black, queen=TRUE)
lw_black <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_white, queen=TRUE)
lw_white <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_aian, queen=TRUE)
lw_aian <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_api, queen=TRUE)
lw_api <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_latine, queen=TRUE)
lw_latine <- nb2listw(nb, style="W", zero.policy=TRUE)


black_1 = errorsarlm(rpaam ~ retention + pct_black + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured, data = df_black,
  listw = lw_black,zero.policy = TRUE)
white_1 = errorsarlm(rpaam ~ retention + pct_white + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured, data = df_white,
  listw = lw_white,zero.policy = TRUE)
aian_1 = errorsarlm(rpaam ~ retention + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured, data = df_aian,
  listw = lw_aian,zero.policy = TRUE)
api_1 = errorsarlm(rpaam ~ retention + pct_asian + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured, data = df_api,
  listw = lw_api,zero.policy = TRUE)
latine_1 = errorsarlm(rpaam ~ retention + pct_hisp + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured, data = df_latine,
  listw = lw_latine,zero.policy = TRUE)

# latine_1_top = errorsarlm(data = df_latine_top, rpaam ~ 0 + sr3/(retention + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_latine, zero.policy = TRUE)
# latine_i_orig = errorsarlm(data = df_latine_orig, rpaam ~ 0 + sr3/(retention + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_latine, zero.policy = TRUE)

summary(black_1)
summary(white_1)
summary(aian_1)
summary(api_1)
summary(latine_1)


```
###sp auto

```{r}

#Black_1
df_black_model <- black_1$X %>%
  as.data.frame() %>%
  mutate(rpaam = black_1$y) 

rows_used <- as.numeric(rownames(black_1$X)) 
df_black_used <- df_black[rows_used, ]    

nb_used <- poly2nb(df_black_used, queen = TRUE)
lw_used <- nb2listw(nb_used, style = "W", zero.policy = TRUE)

resid_black <- residuals(black_1)
moran.test(resid_black, lw_used, zero.policy = TRUE)


#AIAN_1
df_aian_model <- aian_1$X %>%
  as.data.frame() %>%
  mutate(rpaam = aian_1$y) 

rows_used <- as.numeric(rownames(aian_1$X)) 
df_aian_used <- df_aian[rows_used, ]    

nb_used <- poly2nb(df_aian_used, queen = TRUE)
lw_used <- nb2listw(nb_used, style = "W", zero.policy = TRUE)

resid_aian <- residuals(aian_1)
moran.test(resid_aian, lw_used, zero.policy = TRUE)



#API_1
df_api_model <- api_1$X %>%
  as.data.frame() %>%
  mutate(rpaam = api_1$y) 

rows_used <- as.numeric(rownames(api_1$X)) 
df_api_used <- df_api[rows_used, ]    

nb_used <- poly2nb(df_api_used, queen = TRUE)
lw_used <- nb2listw(nb_used, style = "W", zero.policy = TRUE)

resid_api <- residuals(api_1)
moran.test(resid_api, lw_used, zero.policy = TRUE)

#Latine_1

df_latine_model <- latine_1$X %>%
  as.data.frame() %>%
  mutate(rpaam = latine_1$y) 

rows_used <- as.numeric(rownames(latine_1$X)) 
df_latine_used <- df_latine[rows_used, ]    

nb_used <- poly2nb(df_latine_used, queen = TRUE)
lw_used <- nb2listw(nb_used, style = "W", zero.policy = TRUE)

resid_latine <- residuals(latine_1)
moran.test(resid_latine, lw_used, zero.policy = TRUE)


#White_1

df_white_model <- white_1$X %>%
  as.data.frame() %>%
  mutate(rpaam = white_1$y) 

rows_used <- as.numeric(rownames(white_1$X)) 
df_white_used <- df_white[rows_used, ]    

nb_used <- poly2nb(df_white_used, queen = TRUE)
lw_used <- nb2listw(nb_used, style = "W", zero.policy = TRUE)

resid_white <- residuals(white_1)
moran.test(resid_white, lw_used, zero.policy = TRUE)


```



### Model 2 - SR- retention  + Controls > rpaam

```{r}

nb <- poly2nb(df_black, queen=TRUE)
lw_black <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_white, queen=TRUE)
lw_white <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_aian, queen=TRUE)
lw_aian <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_api, queen=TRUE)
lw_api <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_latine, queen=TRUE)
lw_latine <- nb2listw(nb, style="W", zero.policy=TRUE)

black_2 = errorsarlm(data = df_black, rpaam ~ 0 + sr3/(retention + pct_black  + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured), lw_black, zero.policy = TRUE)

white_2 = errorsarlm(data = df_white, rpaam ~ 0 + sr3/(retention  + pct_white + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),lw_white, zero.policy = TRUE)

aian_2 = errorsarlm(data = df_aian, rpaam ~ 0 + sr3/(retention  + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured), lw_aian, zero.policy = TRUE)

api_2 = errorsarlm(data = df_api, rpaam ~ 0 + sr3/(retention + pct_asian + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),lw_api, zero.policy = TRUE)

latine_2 = errorsarlm(data = df_latine, rpaam ~ 0 + sr3/(retention  + pct_hisp + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured), lw_latine, zero.policy = TRUE)
# 
summary(black_2)
summary(white_2)
summary(aian_2)
summary(api_2)
summary(latine_2)



```

###sp auto

```{r}

#Black_2
df_black_model <- black_2$X %>%
  as.data.frame() %>%
  mutate(rpaam = black_2$y) 

rows_used <- as.numeric(rownames(black_2$X)) 
df_black_used <- df_black[rows_used, ]    

nb_used <- poly2nb(df_black_used, queen = TRUE)
lw_used <- nb2listw(nb_used, style = "W", zero.policy = TRUE)

resid_black <- residuals(black_2)
moran.test(resid_black, lw_used, zero.policy = TRUE)


#AIAN_1
df_aian_model <- aian_2$X %>%
  as.data.frame() %>%
  mutate(rpaam = aian_2$y) 

rows_used <- as.numeric(rownames(aian_2$X)) 
df_aian_used <- df_aian[rows_used, ]    

nb_used <- poly2nb(df_aian_used, queen = TRUE)
lw_used <- nb2listw(nb_used, style = "W", zero.policy = TRUE)

resid_aian <- residuals(aian_2)
moran.test(resid_aian, lw_used, zero.policy = TRUE)



#API_1
df_api_model <- api_2$X %>%
  as.data.frame() %>%
  mutate(rpaam = api_2$y) 

rows_used <- as.numeric(rownames(api_2$X)) 
df_api_used <- df_api[rows_used, ]    

nb_used <- poly2nb(df_api_used, queen = TRUE)
lw_used <- nb2listw(nb_used, style = "W", zero.policy = TRUE)

resid_api <- residuals(api_2)
moran.test(resid_api, lw_used, zero.policy = TRUE)

#Latine_1

df_latine_model <- latine_2$X %>%
  as.data.frame() %>%
  mutate(rpaam = latine_2$y) 

rows_used <- as.numeric(rownames(latine_2$X)) 
df_latine_used <- df_latine[rows_used, ]    

nb_used <- poly2nb(df_latine_used, queen = TRUE)
lw_used <- nb2listw(nb_used, style = "W", zero.policy = TRUE)

resid_latine <- residuals(latine_2)
moran.test(resid_latine, lw_used, zero.policy = TRUE)


#White_1

df_white_model <- white_2$X %>%
  as.data.frame() %>%
  mutate(rpaam = white_2$y) 

rows_used <- as.numeric(rownames(white_2$X)) 
df_white_used <- df_white[rows_used, ]    

nb_used <- poly2nb(df_white_used, queen = TRUE)
lw_used <- nb2listw(nb_used, style = "W", zero.policy = TRUE)

resid_white <- residuals(white_2)
moran.test(resid_white, lw_used, zero.policy = TRUE)


```

### Model 3 - full model

```{r}
nb <- poly2nb(df_black, queen=TRUE)
lw_black <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_white, queen=TRUE)
lw_white <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_aian, queen=TRUE)
lw_aian <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_api, queen=TRUE)
lw_api <- nb2listw(nb, style="W", zero.policy=TRUE)
nb <- poly2nb(df_latine, queen=TRUE)
lw_latine <- nb2listw(nb, style="W", zero.policy=TRUE)



black_3 = errorsarlm(data = df_black, rpaam ~ 0 + sr3/(retention + rrm_gap_black + retention*rrm_gap_black + pct_black  + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
                  lw_black, zero.policy = TRUE)
white_3 = errorsarlm(data = df_white, rpaam ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_white + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
                  lw_white, zero.policy = TRUE)
aian_3 = errorsarlm(data = df_aian, rpaam ~ 0 + sr3/(retention + rrm_gap_aian + retention*rrm_gap_aian + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
                  lw_aian, zero.policy = TRUE)
api_3 = errorsarlm(data = df_api, rpaam ~ 0 + sr3/(retention + rrm_gap_asian + retention*rrm_gap_asian + pct_asian + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
                  lw_api, zero.policy = TRUE)
latine_3 = errorsarlm(data = df_latine, rpaam ~ 0 + sr3/(retention + rrm_gap_hisp + retention*rrm_gap_hisp + pct_hisp  + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
                  lw_latine, zero.policy = TRUE)
# latine_i_top = errorsarlm(data = df_latine_top, rpaam ~ 0 + sr3/(retention + rrm_gap_hisp_hisp + retention*rrm_gap + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_latine, zero.policy = TRUE)
# latine_3_orig = errorsarlm(data = df_latine_orig, rpaam ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_latine, zero.policy = TRUE)

summary(black_3)
summary(white_3)
summary(aian_3)
summary(api_3)
summary(latine_3)

```

###sp auto

```{r}

#Black
df_black_model <- black_3$X %>%
  as.data.frame() %>%
  mutate(rpaam = black_3$y) 

rows_used <- as.numeric(rownames(black_3$X)) 
df_black_used <- df_black[rows_used, ]    

nb_used <- poly2nb(df_black_used, queen = TRUE)
lw_used <- nb2listw(nb_used, style = "W", zero.policy = TRUE)

resid_black <- residuals(black_3)
moran.test(resid_black, lw_used, zero.policy = TRUE)


#AIAN
df_aian_model <- aian_3$X %>%
  as.data.frame() %>%
  mutate(rpaam = aian_3$y) 

rows_used <- as.numeric(rownames(aian_3$X)) 
df_aian_used <- df_aian[rows_used, ]    

nb_used <- poly2nb(df_aian_used, queen = TRUE)
lw_used <- nb2listw(nb_used, style = "W", zero.policy = TRUE)

resid_aian <- residuals(aian_3)
moran.test(resid_aian, lw_used, zero.policy = TRUE)



#API_1
df_api_model <- api_3$X %>%
  as.data.frame() %>%
  mutate(rpaam = api_3$y) 

rows_used <- as.numeric(rownames(api_3$X)) 
df_api_used <- df_api[rows_used, ]    

nb_used <- poly2nb(df_api_used, queen = TRUE)
lw_used <- nb2listw(nb_used, style = "W", zero.policy = TRUE)

resid_api <- residuals(api_3)
moran.test(resid_api, lw_used, zero.policy = TRUE)

#Latine_1

df_latine_model <- latine_3$X %>%
  as.data.frame() %>%
  mutate(rpaam = latine_3$y) 

rows_used <- as.numeric(rownames(latine_3$X)) 
df_latine_used <- df_latine[rows_used, ]    

nb_used <- poly2nb(df_latine_used, queen = TRUE)
lw_used <- nb2listw(nb_used, style = "W", zero.policy = TRUE)

resid_latine <- residuals(latine_3)
moran.test(resid_latine, lw_used, zero.policy = TRUE)


#White_1

df_white_model <- white_3$X %>%
  as.data.frame() %>%
  mutate(rpaam = white_3$y) 

rows_used <- as.numeric(rownames(white_3$X)) 
df_white_used <- df_white[rows_used, ]    

nb_used <- poly2nb(df_white_used, queen = TRUE)
lw_used <- nb2listw(nb_used, style = "W", zero.policy = TRUE)

resid_white <- residuals(white_3)
moran.test(resid_white, lw_used, zero.policy = TRUE)


```





##Full model- varying rpaam calc
```{r}
# latine_i = errorsarlm(data = df_latine, rpaam ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_latine, zero.policy = TRUE)
# latine_i_top = errorsarlm(data = df_latine, rpaam_top ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_latine, zero.policy = TRUE)
# latine_i_orig = errorsarlm(data = df_latine, rpaam_orig ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_latine, zero.policy = TRUE)
# 
# summary(latine_i)
# summary(latine_i_top)
# summary(latine_i_orig)
# 
# 
# black_i = errorsarlm(data = df_black, rpaam ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_black, zero.policy = TRUE)
# black_i_top = errorsarlm(data = df_black, rpaam_top ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_black, zero.policy = TRUE)
# black_i_orig = errorsarlm(data = df_black, rpaam_orig ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_black, zero.policy = TRUE)
# 
# summary(black_i)
# summary(black_i_top)
# summary(black_i_orig)
# 
# 
# white_i = errorsarlm(data = df_white, rpaam ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_white + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_white, zero.policy = TRUE)
# white_i_top = errorsarlm(data = df_white, rpaam_top ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_white + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_white, zero.policy = TRUE)
# white_i_orig = errorsarlm(data = df_white, rpaam_orig ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_white + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_white, zero.policy = TRUE)
# 
# summary(white_i)
# summary(white_i_top)
# summary(white_i_orig)
# 
# 
# api_i = errorsarlm(data = df_api, rpaam ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_api + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_api, zero.policy = TRUE)
# api_i_top = errorsarlm(data = df_api, rpaam_top ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_api + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_api, zero.policy = TRUE)
# api_i_orig = errorsarlm(data = df_api, rpaam_orig ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_api + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_api, zero.policy = TRUE)
# 
# summary(api_i)
# summary(api_i_top)
# summary(api_i_orig)
# 
# aian_i = errorsarlm(data = df_aian, rpaam ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_aian + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_aian, zero.policy = TRUE)
# aian_i_top = errorsarlm(data = df_aian, rpaam_top ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_aian + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_aian, zero.policy = TRUE)
# aian_i_orig = errorsarlm(data = df_aian, rpaam_orig ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_aian + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw_aian, zero.policy = TRUE)
# 
# summary(aian_i)
# summary(aian_i_top)
# summary(aian_i_orig)


```



#### ANOVA
```{r}
# anova(black_2, black_3)
# anova(white_2, white_3)
# anova(aian_2, aian_3)
# anova(api_2, api_3)
# anova(latine_2, latine_3)
```


<!-- ### sp auto -->

<!-- ```{r} -->

<!-- Q2ar = df_black -->
<!-- Q2ar$r = black_1$resid -->
<!-- nb <- poly2nb(Q2ar, queen=TRUE) -->
<!-- lw <- nb2listw(nb, style="W", zero.policy=TRUE) -->
<!-- lw$weights[5] -->
<!-- moran.test(Q2ar$r,lw, zero.policy=TRUE) -->
<!-- w <- queen_weights(Q2ar) -->
<!-- lisa <- local_moran(w, Q2ar['r']) -->
<!-- lisa_colors <- lisa_colors(lisa) -->
<!-- lisa_labels <- lisa_labels(lisa) -->
<!-- lisa_clusters <- lisa_clusters(lisa) -->
<!-- Q2ar = Q2ar %>% -->
<!--   filter(STATE_NAME != "Alaska" & STATE_NAME != "Hawaii") -->
<!-- plot(st_geometry(Q2ar), -->
<!--      col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), -->
<!--      border = "#333333", lwd=0.2) -->

<!-- ``` -->

###Print Results to Excel

```{r}

# #  #### print results  -->
# # # Write OLS retention & autonomy results to excel file  -->
# # #
# #install.packages("broom")
# #install.packages("writexl")
# library(broom)
# library(writexl)
# 
# ##--------------------------###
# 
# # #Print AIAN Resupts
# # # ## Tidy AIAN results
# tidy_aian_SE <- tidy(aian_SE)
# tidy_aian_S <- tidy(aian_S)
# tidy_aian_1 <- tidy(aian_1)
# tidy_aian_2 <- tidy(aian_2)
# tidy_aian_3 <- tidy(aian_3)
# # #
# # #
# # #
# # # # Identify each model
# # #
# tidy_aian_SE$model <- "ROG-PAAM-SE"
# tidy_aian_S$model <- "ROG-PAAM"
# tidy_aian_1$model <- "TRADE-PAAM"
# tidy_aian_2$model <- "TRADE-ROG-PAAM"
# tidy_aian_3$model <- "FULL_INT"
# # #
# # #
# # # # # # Combine results into single DF
# tidy_results <- bind_rows(tidy_aian_SE,tidy_aian_S, tidy_aian_1, tidy_aian_2, tidy_aian_3)
# # #
# # #
# # # # Create a list of data frames to be written to different sheets -->
# results_list <- list(
#    "ROG-PAAM-SE" = tidy_aian_SE,
#      "ROG-PAAM" = tidy_aian_S,
#    "TRADE-PAAM" = tidy_aian_1,
#    "TRADE-ROG-PAAM" = tidy_aian_2,
#    "FULL_INT"= tidy_aian_3
#  )
# # 
# # # Write the list of data frames to an Excel file -->
# write_xlsx(results_list, path = "SR_regression_results-AIAN.xlsx")
# 
# 
# ##-----------------------------------##
# # #Print API Resupts
# # # ## Tidy AIAN results
# tidy_api_SE <- tidy(api_SE)
# tidy_api_S <- tidy(api_S)
# tidy_api_1 <- tidy(api_1)
# tidy_api_2<- tidy(api_2)
# tidy_api_3 <- tidy(api_3)
# # #
# # #
# # #
# # # # Identify each model
# # #
# tidy_api_SE$model <- "ROG-PAAM-SE"
# tidy_api_S$model <- "ROG-PAAM"
# tidy_api_1$model <- "TRADE-PAAM"
# tidy_api_2$model <- "TRADE-ROG-PAAM"
# tidy_api_3$model <- "FULL_INT"
# # #
# # #
# # # # # # Combine results into single DF
# tidy_results <- bind_rows(tidy_api_SE, tidy_api_S, tidy_api_1, tidy_api_2, tidy_api_3)
# # #
# # #
# # # # Create a list of data frames to be written to different sheets -->
# results_list <- list(
#    "ROG-PAAM-SE" = tidy_api_SE,
#      "ROG-PAAM" = tidy_api_S,
#    "TRADE-PAAM" = tidy_api_1,
#    "TRADE-ROG-PAAM" = tidy_api_2,
#    "FULL_INT"= tidy_api_3
#  )
# # 
# # # Write the list of data frames to an Excel file -->
# write_xlsx(results_list, path = "SR_regression_results-API.xlsx")
# 
# ##-----------------------------------##
# 
# # #Print Black Results
# # # ## Tidy Black results
# tidy_black_SE <- tidy(black_SE)
# tidy_black_S <- tidy(black_S)
# tidy_black_1 <- tidy(black_1)
# tidy_black_2<- tidy(black_2)
# tidy_black_3 <- tidy(black_3)
# # #
# # #
# # #
# #Identify each model
# # #
# tidy_black_SE$model <- "ROG-PAAM-SE"
# tidy_black_S$model <- "ROG-PAAM"
# tidy_black_1$model <- "TRADE-PAAM"
# tidy_black_2$model <- "TRADE-ROG-PAAM"
# tidy_black_3$model <- "FULL_INT"
# # #
# # #
# # # # # # Combine results into single DF
# tidy_results <- bind_rows(tidy_black_SE, tidy_black_S, tidy_black_1, tidy_black_2, tidy_black_3)
# # #
# # #
# # # # Create a list of data frames to be written to different sheets -->
# results_list <- list(
#      "ROG-PAAM-SE" = tidy_black_SE,
#    "ROG-PAAM" = tidy_black_S,
#    "TRADE-PAAM" = tidy_black_1,
#    "TRADE-ROG-PAAM" = tidy_black_2,
#    "FULL_INT"= tidy_black_3
#  )
# # 
# # # Write the list of data frames to an Excel file -->
# write_xlsx(results_list, path = "SR_regression_results-black.xlsx")
# 
# ##-----------------------------------##
# 
# # #Print latine Results
# # # ## Tidy latine results
# tidy_latine_SE <- tidy(latine_SE)
# tidy_latine_S <- tidy(latine_S)
# tidy_latine_1 <- tidy(latine_1)
# tidy_latine_2<- tidy(latine_2)
# tidy_latine_3 <- tidy(latine_3)
# # #
# # #
# # #
# #Identify each model
# # #
# tidy_latine_SE$model <- "ROG-PAAM-SE"
# tidy_latine_S$model <- "ROG-PAAM"
# tidy_latine_1$model <- "TRADE-PAAM"
# tidy_latine_2$model <- "TRADE-ROG-PAAM"
# tidy_latine_3$model <- "FULL_INT"
# # #
# # #
# # # # # # Combine results into single DF
# tidy_results <- bind_rows(tidy_latine_SE, tidy_latine_S, tidy_latine_1, tidy_latine_2, tidy_latine_3)
# # #
# # #
# # # # Create a list of data frames to be written to different sheets -->
# results_list <- list(
#    "ROG-PAAM-SE" = tidy_latine_SE,
#      "ROG-PAAM" = tidy_latine_S,
#    "TRADE-PAAM" = tidy_latine_1,
#    "TRADE-ROG-PAAM" = tidy_latine_2,
#    "FULL_INT"= tidy_latine_3
#  )
# # 
# # # Write the list of data frames to an Excel file -->
# write_xlsx(results_list, path = "SR_regression_results-latine.xlsx")
# 
# ##-----------------------------------##
# 
# # #Print white Resupts
# # # ## Tidy whiteresults
# tidy_white_SE <- tidy(white_SE)
# tidy_white_S <- tidy(white_S)
# tidy_white_1 <- tidy(white_1)
# tidy_white_2<- tidy(white_2)
# tidy_white_3 <- tidy(white_3)
# # #
# # #
# # #
# #Identify each model
# # #
# tidy_white_SE$model <- "ROG-PAAM-SE"
# tidy_white_S$model <- "ROG-PAAM"
# tidy_white_1$model <- "TRADE-PAAM"
# tidy_white_2$model <- "TRADE-ROG-PAAM"
# tidy_white_3$model <- "FULL_INT"
# # #
# # #
# # # # # # Combine results into single DF
# tidy_results <- bind_rows(tidy_white_SE, tidy_white_S, tidy_white_1, tidy_white_2, tidy_white_3)
# # #
# # #
# # # # Create a list of data frames to be written to different sheets -->
# results_list <- list(
#    "ROG-PAAM-SE" = tidy_white_SE,
#      "ROG-PAAM" = tidy_white_S,
#    "TRADE-PAAM" = tidy_white_1,
#    "TRADE-ROG-PAAM" = tidy_white_2,
#    "FULL_INT"= tidy_white_3
#  )
# # 
# # # Write the list of data frames to an Excel file -->
# write_xlsx(results_list, path = "SR_regression_results-white.xlsx")
# 
# ##-----------------------------------##

```



# margin plots

#Sara's margin plot code: 
```{r}

library(broom)
library(dplyr)
library(ggplot2)
library(purrr)
library(stringr)

## Define your list of models by group name
model_list <- list(
  aian = aian_3,
  api = api_3,
  black = black_3,
  latine = latine_3,
  white = white_3
)


plot_data <- map_dfr(names(model_list), function(group) {
  model <- model_list[[group]]
  
  results <- tidy(model, conf.int = TRUE)

  results$term_clean <- case_when(
    grepl(paste0("sr3.*:retention:rrm_gap_", group, "$"), results$term) ~ "Retention:ROG",
    grepl("retention", results$term) & !grepl("rrm_gap", results$term) ~ "Retention",
    TRUE ~ NA_character_
  )
  
  results <- results %>%
    filter(!is.na(term_clean)) %>%
    mutate(
      significance = ifelse(p.value < 0.05, "Significant", "Not Significant"),
      Regime = case_when(
        grepl("large_metro", term) ~ "Large Metro",
        grepl("small_metro", term) ~ "Small Metro",
        grepl("large_nonmetro", term) ~ "Large Nonmetro",
        grepl("small_nonmetro", term) ~ "Small Nonmetro",
        TRUE ~ "Other"
      ),
      racial_group = str_to_title(group)
    )
  
  return(results)
})


plot_data <- plot_data %>%
  mutate(
    Regime = factor(Regime, levels = c("Large Metro", "Small Metro", "Large Nonmetro", "Small Nonmetro")),
    term_clean = factor(term_clean, levels = c("Retention", "Retention:ROG")),
    racial_group = factor(racial_group, levels = c("White", "Black", "Latine", "Api", "Aian"))
  )

# Split the data by racial group and create plots
plot_data_list <- split(plot_data, plot_data$racial_group)

group_plots <- map(names(plot_data_list), function(group_name) {
  group_df <- plot_data_list[[group_name]]
  
  ggplot(group_df, aes(x = estimate, y = term_clean, color = significance)) +
    geom_point(size = 3) +
    geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2) +
    facet_wrap(~ Regime, ncol = 2) +
    scale_color_manual(values = c("Significant" = "#8b0037ff", "Not Significant" = "gray70")) +
    labs(
      title = paste("Effects for", group_name),
      x = "Premature Age-Adjusted Mortality",
      y = "Variable",
      color = "Significance"
    ) +
    theme_minimal(base_size = 14) +
    theme(legend.position = "bottom")
})


names(group_plots) <- names(plot_data_list)

# Example: Show plot for Black group
group_plots$Black
group_plots$White
group_plots$Latine
group_plots$Api
group_plots$Aian

```

```{r}

library(broom)
library(dplyr)
library(ggplot2)
library(stringr)
library(forcats)
library(purrr)

# Define colors and shapes
color_map <- c(
  "Indigenous" = "#984ea3",
  "Asian Pacific Islander" = "#4daf4a",
  "Black" = "#e41a1c",
  "Latine" = "#ff7f00",
  "White" = "#377eb8"
)
shape_map <- c("Significant" = 17, "Not Significant" = 16)


# Set desired factor order
desired_order <- c("Indigenous", "Asian Pacific Islander", "Black", "Latine", "White")

# # Shared plot components
# base_theme <- theme_minimal(base_size = 13) +
#   theme(
#     axis.text.x = element_text(size = 9),
#     axis.text.y = element_text(size = 11, face = "bold", hjust = 1),
#     strip.text = element_text(face = "bold", size = 12),
#     strip.background = element_rect(fill = "gray95", color = NA),
#     plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
#     legend.position = "bottom",
#     legend.box = "vertical",
#     legend.spacing.y = unit(0.4, "lines"),
#     legend.key.size = unit(0.4, "cm"),
#     panel.spacing = unit(1, "lines")
#   )



```

###Model 1 Margin Plot

```{r}




# List of model_1 objects
model_list_1 <- list(
  Black = black_1,
  White = white_1,
  Latine = latine_1,
  `Asian Pacific Islander` = api_1,
  Indigenous = aian_1
)

# Extract and format results for retention
retention_data_1 <- purrr::map_dfr(names(model_list_1), function(group) {
  model <- model_list_1[[group]]
  tidy(model, conf.int = TRUE) %>%
    filter(term == "retention") %>%
    mutate(
      racial_group = group,
      significance = ifelse(p.value < 0.05, "Significant", "Not Significant")
    )
})

retention_data_1 <- retention_data_1 %>%
  mutate(racial_group = factor(racial_group, levels = desired_order))

# Plot for Model 1
plot_retention_1 <- ggplot(retention_data_1, aes(x = estimate, y = fct_rev(racial_group),
                                                 color = racial_group, shape = significance)) +
  geom_point(size = 3, na.rm = TRUE) +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2, na.rm = TRUE) +
  geom_vline(xintercept = 0, linetype = "solid", color = "black", linewidth = 0.6) +
  scale_color_manual(values = color_map, guide = "none") +
  scale_shape_manual(values = shape_map, na.translate = FALSE) +
  labs(
    title = "Model 1: Economic Resource Retention and\nRace-Specific Premature Age-Adjusted Mortality",
    x = "Estimated Effect",
    y = NULL,
    shape = "Significance"
  ) +
  theme_minimal(base_size = 13) +
  theme(
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 10, face = "bold", hjust = 1),
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5, lineheight = 1.1),
    legend.position = "bottom",
    legend.title = element_text(hjust = 0.5),
    legend.box = "vertical",
    legend.box.just = "center",
    legend.spacing.y = unit(0.3, "lines"),
    legend.key.size = unit(0.4, "cm")
  ) +
  coord_cartesian(clip = "off") +
  guides(
    shape = guide_legend(title.position = "top", title.hjust = 0.5, nrow = 1)
  )

# Print plot
plot_retention_1



```


###Model 2 Margin Plot

```{r}


# Your list of models for the second set (e.g., "_2")
model_list_2 <- list(
  aian = aian_2,
  api = api_2,
  black = black_2,
  latine = latine_2,
  white = white_2
)

# Define a function to clean and label each model's results
retention_data_2 <- map_dfr(names(model_list_2), function(group) {
  tidy(model_list_2[[group]], conf.int = TRUE) %>%
    filter(str_detect(term, "sr3.*_metro:retention|sr3.*nonmetro:retention")) %>%
    mutate(
      racial_group = case_when(
        group == "aian" ~ "Indigenous",
        group == "api" ~ "Asian Pacific Islander",
        group == "black" ~ "Black",
        group == "latine" ~ "Latine",
        group == "white" ~ "White"
      ),
      Regime = case_when(
        str_detect(term, "sr3large_metro") ~ "Large Metro",
        str_detect(term, "sr3small_metro") ~ "Small Metro",
        str_detect(term, "sr3large_nonmetro") ~ "Large Nonmetro",
        str_detect(term, "sr3small_nonmetro") ~ "Small Nonmetro"
      ),
      significance = case_when(
        is.na(p.value) ~ "Not Estimated",
        p.value < 0.05 ~ "Significant",
        TRUE ~ "Not Significant"
      )
    )
})

retention_data_2 <- retention_data_2 %>%
  mutate(racial_group = factor(racial_group,
                               levels = rev(c("Indigenous", "Asian Pacific Islander", "Black", "Latine", "White")))) %>% 
  mutate(Regime = factor(Regime, levels = c("Large Metro", "Small Metro", "Large Nonmetro", "Small Nonmetro")))


#Plot 
plot_retention_2 <- ggplot(retention_data_2, aes(x = estimate, y = racial_group,
                                                 color = racial_group, shape = significance)) +
  geom_point(size = 3, na.rm = TRUE) +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2, na.rm = TRUE) +
  geom_vline(xintercept = 0, linetype = "solid", color = "black", linewidth = 0.6) +
  facet_wrap(~ Regime, ncol = 4) +
  scale_color_manual(values = color_map, guide = "none") +
  scale_shape_manual(values = shape_map, na.translate = FALSE) +
  labs(
    title = "Model 2: Economic Resource Retention and\nRace-Specific Premature Age-Adjusted Mortality",
    x = "Estimated Effect",
    y = NULL,
    shape = "Significance"
  ) +
  theme_minimal(base_size = 13) +
  theme(
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 10, face = "bold", hjust = 1),
    strip.text = element_text(size = 10, face = "bold"),
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5, lineheight = 1.1),
    panel.spacing.x = unit(1.5, "lines"),
    legend.position = "bottom",
    legend.title = element_text(hjust = 0.5),
    legend.box = "vertical",
    legend.box.just = "center",
    legend.spacing.y = unit(0.3, "lines"),
    legend.key.size = unit(0.4, "cm"),
    panel.spacing = unit(1.2, "lines")
  ) +
  coord_cartesian(clip = "off") +
  guides(
    shape = guide_legend(title.position = "top", title.hjust = 0.5, nrow = 1)
  )

plot_retention_2


```



###Model 3 Margin Plots

```{r}


# List of models
model_list <- list(
  aian = aian_3,
  api = api_3,
  black = black_3,
  latine = latine_3,
  white = white_3
)

# Define factor levels
racial_levels <- c("Indigenous", "Asian Pacific Islander", "Black", "Latine", "White")
term_levels <- c("Retention", "Retention × ROG")
regime_levels <- c("Large Metro", "Small Metro", "Large Nonmetro", "Small Nonmetro")

# Extract and annotate model results
plot_data_raw <- map_dfr(names(model_list), function(group) {
  model <- model_list[[group]]
  model_name <- paste0(group, "_3")
  
  results <- tidy(model, conf.int = TRUE)

  results <- results %>%
    mutate(
      term_clean = case_when(
        str_detect(term, ":retention:rrm_gap_asian$") ~ "Retention × ROG",
        str_detect(term, ":retention:rrm_gap_aian$") ~ "Retention × ROG",
        str_detect(term, ":retention:rrm_gap_black$") ~ "Retention × ROG",
        str_detect(term, ":retention:rrm_gap_hisp$") ~ "Retention × ROG",
        str_detect(term, ":retention:rrm_gap$") ~ "Retention × ROG",  # White
        str_detect(term, ":retention\\b") & !str_detect(term, "rrm_gap") ~ "Retention",
        TRUE ~ NA_character_
      ),
      Regime = case_when(
        str_detect(term, "large_metro") ~ "Large Metro",
        str_detect(term, "small_metro") ~ "Small Metro",
        str_detect(term, "large_nonmetro") ~ "Large Nonmetro",
        str_detect(term, "small_nonmetro") ~ "Small Nonmetro",
        TRUE ~ NA_character_
      ),
      racial_group = str_to_title(group),
      model_name = model_name
    ) %>%
    filter(!is.na(term_clean), !is.na(Regime)) %>%
    mutate(
      significance = case_when(
        p.value < 0.05 ~ "Significant",
        TRUE ~ "Not Significant"
      )
    )
})

# Clean group labels
plot_data <- plot_data_raw %>%
  mutate(
    racial_group = recode(racial_group,
      "Aian" = "Indigenous",
      "Api" = "Asian Pacific Islander",
      "Black" = "Black",
      "Latine" = "Latine",
      "White" = "White"
    ),
    racial_group = factor(racial_group, levels = racial_levels),
    term_label = factor(term_clean, levels = term_levels),
    Regime = factor(Regime, levels = regime_levels)
  )

# Create full grid to include all possible combinations
full_grid <- expand.grid(
  racial_group = factor(racial_levels, levels = racial_levels),
  term_label = factor(term_levels, levels = term_levels),
  Regime = factor(regime_levels, levels = regime_levels),
  stringsAsFactors = FALSE
)

# Join and mark missing estimates
plot_data_complete <- full_grid %>%
  left_join(plot_data, by = c("racial_group", "term_label", "Regime")) %>%
  mutate(
    significance = case_when(
      is.na(significance) ~ "Not Estimated",
      TRUE ~ significance
    ),
    model_name = ifelse(is.na(model_name), paste0(tolower(racial_group), "_3"), model_name)
  )



# Retention Data
retention_data <- plot_data_complete %>% filter(term_clean == "Retention") %>% 
   mutate(racial_group = factor(racial_group,
                               levels = rev(c("Indigenous", "Asian Pacific Islander", "Black", "Latine", "White")))) %>% 
   mutate(Regime = factor(Regime, levels = c("Large Metro", "Small Metro", "Large Nonmetro", "Small Nonmetro")))



# Plot 1: Retention only
plot_retention <- ggplot(retention_data, aes(x = estimate, y = racial_group,
                                             color = racial_group, shape = significance)) +
  geom_point(size = 3, na.rm = TRUE) +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2, na.rm = TRUE) +
  geom_vline(xintercept = 0, linetype = "solid", color = "black", linewidth = 0.6) +
  facet_wrap(~ Regime, ncol = 4) +
  scale_color_manual(values = color_map, guide = "none") +
  scale_shape_manual(values = shape_map, na.translate = FALSE) +
  labs(
    title = "Model 3: Economic Resource Retention and\nRace-Specific Premature Age-Adjusted Mortality",
    x = "Estimated Effect",
    y = NULL,
    shape = "Significance"
  ) +
  theme_minimal(base_size = 13) +
  theme(
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 10, face = "bold", hjust = 1),
    strip.text = element_text(size = 10, face = "bold"),
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5, lineheight = 1.1),
    panel.spacing.x = unit(1.5, "lines"),
    legend.position = "bottom",
    legend.title = element_text(hjust = 0.5),
    legend.box = "vertical",
    legend.box.just = "center",
    legend.spacing.y = unit(0.3, "lines"),
    legend.key.size = unit(0.4, "cm"),
    panel.spacing = unit(1.2, "lines")
  ) +
  coord_cartesian(clip = "off") +
  guides(
    shape = guide_legend(title.position = "top", title.hjust = 0.5, nrow = 1)
  )

print(plot_retention)

##Interaction plot 
# Define regime and racial group levels (unique variable names)
rog_regime_levels <- c("Large Metro", "Small Metro", "Large Nonmetro", "Small Nonmetro")
rog_racial_groups <- c("White", "Latine", "Black", "Asian Pacific Islander", "Indigenous")

# Ensure factor levels and isolate ROG plot data
plot_data_rog <- plot_data_complete %>%
  mutate(
    Regime = factor(Regime, levels = rog_regime_levels),
    racial_group = factor(racial_group, levels = rog_racial_groups),
    term_label = as.character(term_label)
  )

# Generate placeholder rows for missing combinations
rog_placeholders <- expand.grid(
  Regime = rog_regime_levels,
  racial_group = rog_racial_groups
) %>%
  mutate(
    estimate = NA_real_,
    conf.low = NA_real_,
    conf.high = NA_real_,
    significance = "Not Estimated",
    term_label = "Retention × ROG"
  )

# Filter interaction data, bind placeholders, and finalize format
plot_data_rog_final <- plot_data_rog %>%
  filter(term_label == "Retention × ROG") %>%
  bind_rows(rog_placeholders) %>%
  distinct(Regime, racial_group, .keep_all = TRUE) %>%
  mutate(
    significance = factor(significance, levels = c("Not Significant", "Significant", "Not Estimated")),
    racial_group = fct_rev(racial_group)
  ) %>%    mutate(racial_group = factor(racial_group,
                               levels = rev(c("Indigenous", "Asian Pacific Islander", "Black", "Latine", "White")))) %>% 
   mutate(Regime = factor(Regime, levels = c("Large Metro", "Small Metro", "Large Nonmetro", "Small Nonmetro")))
  

# Build the plot
plot_retention_rog <- ggplot(plot_data_rog_final, aes(x = estimate, y = racial_group)) +
  geom_point(aes(shape = significance, color = racial_group), size = 3, na.rm = TRUE) +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high, color = racial_group),
                 height = 0.2, na.rm = TRUE) +
   geom_vline(xintercept = 0, linetype = "solid", color = "black", linewidth = .6) +
  facet_wrap(~ Regime, ncol = 4) +
  scale_color_manual(values = c(
    "White" = "#377eb8",
    "Latine" = "#ff7f00",
    "Black" = "#e41a1c",
    "Asian Pacific Islander" = "#4daf4a",
    "Indigenous" = "#984ea3"
  ), guide = "none") +  
  scale_shape_manual(values = c("Not Significant" = 16, "Significant" = 17, "Not Estimated" = NA)) +
  labs(
    title = "Model 3: Racial Opportunity Gap Moderation of Economic \nResource Retention and Race-Specific Premature Age-Adjusted Mortality",
    x = "Estimated Effect",
    y = NULL,
    shape = "Significance"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "bottom",
    legend.box = "vertical",
    legend.title.align = 0.5,  
    strip.text = element_text(size = 10, face = "bold"),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 10),
    plot.title = element_text(hjust = 0.5, size = 12, face = "bold"), 
    panel.spacing.x = unit(1.5, "lines")
  )


plot_retention_rog






```

###Model 3- Marginal Effects Plot


```{r}


sr3_labels <- c(
  large_metro = "Large Metro",
  small_metro = "Small Metro",
  large_nonmetro = "Large Nonmetro",
  small_nonmetro = "Small Nonmetro"
)

#compute quantiles for a specific ROG variable in a data frame
 get_rog_quantiles  <- function(df, racial_group, rog_var, regime_var = "sr3", regime_lookup = sr3_labels) {
  if (!rog_var %in% colnames(df) || !regime_var %in% colnames(df)) {
    return(tibble(
      racial_group = racial_group,
      Regime = character(),
      ROG_25 = numeric(),
      ROG_50 = numeric(),
      ROG_75 = numeric()
    ))
  }

  regime_df <- tibble::enframe(regime_lookup, name = "sr3_code", value = "Regime")

  df %>%
    filter(!is.na(.data[[rog_var]]), !is.na(.data[[regime_var]])) %>%
    group_by(sr3_code = .data[[regime_var]]) %>%
    summarise(
      ROG_25 = quantile(.data[[rog_var]], 0.25, na.rm = TRUE),
      ROG_50 = quantile(.data[[rog_var]], 0.50, na.rm = TRUE),
      ROG_75 = quantile(.data[[rog_var]], 0.75, na.rm = TRUE),
      .groups = "drop"
    ) %>%
    left_join(regime_df, by = "sr3_code") %>%
    mutate(racial_group = racial_group) %>%
    select(racial_group, Regime, ROG_25, ROG_50, ROG_75)
}


 #model dataframes
df_list <- list(
  "Black" = df_black,
  "White" = df_white,
  "Latine" = df_latine,
  "API" = df_api,
  "AIAN" = df_aian
)


# Lookup for the ROG variable used in each model
rog_lookup <- list(
  "Black" = "rrm_gap_black",
  "White" = "rrm_gap",
  "Latine" = "rrm_gap_hisp",
  "API" = "rrm_gap_asian",
  "AIAN" = "rrm_gap_aian"
)


# Apply quantile function to each model
rog_quants <- map2_dfr(
  names(df_list),
  df_list,
  ~ get_rog_quantiles (
      df = .y,
      racial_group = .x,
      rog_var = rog_lookup[[.x]],
      regime_lookup = sr3_labels
    )
)

rog_quants <- rog_quants %>%
  mutate(
    racial_group = recode(racial_group,
      "API" = "Asian Pacific Islander",
      "AIAN" = "Indigenous"
    )
  )

plot_data_complete_ME <- plot_data_complete %>%
  left_join(rog_quants, by = c("racial_group", "Regime"))



#create dataframe for easier ME calcuation: 
rog_long <- plot_data_complete_ME %>%
  pivot_longer(
    cols = starts_with("ROG_"),
    names_to = "quantile",
    names_prefix = "ROG_",
    values_to = "rog_value"
  )

estimates_wide <- plot_data_complete %>%
  filter(term_label %in% c("Retention", "Retention × ROG")) %>%
  select(racial_group, Regime, term_label, estimate, std.error) %>%
  pivot_wider(names_from = term_label, values_from = c(estimate, std.error)) %>%
  left_join(rog_quants, by = c("racial_group", "Regime")) 

estimates_wide <- estimates_wide %>%
  rename(
    estimate_interaction = `estimate_Retention × ROG`,
    std_error_interaction = `std.error_Retention × ROG`
  )


## calculate marginal effects
marginal_effects_df <- estimates_wide %>%
 pivot_longer(
    cols = starts_with("ROG_"),
    names_to = "quantile",
    names_prefix = "ROG_",
    values_to = "rog_value"
  ) %>%
  mutate(
    estimate = estimate_Retention + estimate_interaction * rog_value,
    se = sqrt(std.error_Retention^2 + (rog_value^2) * std_error_interaction^2),
    conf.low = estimate - 1.96 * se,
    conf.high = estimate + 1.96 * se,
    significance = if_else(conf.low > 0 | conf.high < 0, "Significant", "Not Significant")
  )


plot_marginal_effects<- ggplot(marginal_effects_df, aes(x = estimate, y = racial_group)) +
  geom_point(aes(shape = significance, color = racial_group), size = 3) +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high, color = racial_group), height = 0.2) +
  facet_wrap(~ Regime, ncol = 4) +
  geom_vline(xintercept = 0, color = "black") +
  # add your preferred styling from previous versions here
  labs(title = "Marginal Effects of Retention on Premature Mortality\nat Different ROG Quantiles")

## plot marginal effects


marginal_effects_df <- marginal_effects_df %>%
  mutate(racial_group = factor(racial_group, levels = c(
    "Indigenous", "Asian Pacific Islander", "Black", "Latine", "White"
  )))


marginal_effects_df <- marginal_effects_df %>%
  mutate(Regime = factor(Regime, levels = c(
    "Large Metro", "Small Metro", "Large Nonmetro", "Small Nonmetro"
  )))

marginal_effects_df$quantile <- factor(marginal_effects_df$quantile, levels = c("25", "50", "75"))

plot_marginal_effects <- ggplot(marginal_effects_df, aes(x = estimate, y = racial_group)) +
  geom_point(
    aes(shape = significance, color = racial_group),
    size = 3,
    position = position_dodge(width = 0.6),
    na.rm = TRUE
  ) +
  geom_errorbarh(
    aes(xmin = conf.low, xmax = conf.high, color = racial_group),
    height = 0.2,
    position = position_dodge(width = 0.6),
    na.rm = TRUE
  ) +
  geom_vline(xintercept = 0, linetype = "solid", color = "black", linewidth = 0.6) +
  facet_wrap(~ Regime, ncol = 4) +
  scale_color_manual(values = c(
    "White" = "#377eb8",
    "Latine" = "#ff7f00",
    "Black" = "#e41a1c",
    "Asian Pacific Islander" = "#4daf4a",
    "Indigenous" = "#984ea3"
  ), guide = "none") +
  scale_shape_manual(values = c("Not Significant" = 16, "Significant" = 17, "Not Estimated" = NA)) +
  labs(
    title = "Marginal Effects of Retention on Premature Mortality\nat Different ROG Quantiles",
    x = "Estimated Effect",
    y = NULL,
    shape = "Significance"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "bottom",
    legend.box = "vertical",
    legend.title.align = 0.5,
    strip.text = element_text(size = 10, face = "bold"),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 10),
    plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
    panel.spacing.x = unit(1.5, "lines")
  )

plot_marginal_effects

###separate plots with patchwork 

plot_by_regime <- function(df, regime_label) {
  df %>%
    filter(Regime == regime_label) %>%
    mutate(
      racial_group = factor(
        racial_group,
        levels = rev(c("Indigenous", "Asian Pacific Islander", "Black", "Latine", "White"))
      ),
      shape = case_when(
        quantile == 25 ~ 21,
        quantile == 50 ~ 22,
        quantile == 75 ~ 24
      ),
      fill =  "white"
    ) %>%
    ggplot(aes(x = estimate, y = racial_group)) +
    geom_errorbarh(aes(xmin = conf.low, xmax = conf.high, color = racial_group),
                   height = 0.2, na.rm = TRUE) +
    geom_point(aes(shape = factor(quantile), fill = fill, color = racial_group),
               size = 3, stroke = 1, na.rm = TRUE) +
    geom_vline(xintercept = 0, linetype = "solid", color = "black", linewidth = 0.6) +
    scale_shape_manual(
      name = "ROG Quantile",
      values = c("25" = 21, "50" = 22, "75" = 24)
    ) +
    scale_fill_identity() +
    scale_color_manual(
      values = c(
        "White" = "#377eb8",
        "Latine" = "#ff7f00",
        "Black" = "#e41a1c",
        "Asian Pacific Islander" = "#4daf4a",
        "Indigenous" = "#984ea3"
      ),
      guide = "none"
    ) +
    labs(
      title = regime_label,
      x = NULL,
      y = NULL
    ) +
    theme_minimal(base_size = 14) +
theme(
  legend.position = "bottom",
  legend.title = element_text(size = 12),
  strip.text = element_text(size = 10, face = "bold"),
  axis.text.x = element_text(size = 8),
  axis.text.y = if (regime_label %in% c("Small Metro", "Small Nonmetro")) element_blank() else element_text(size = 10),
  plot.title = element_text(hjust = 0.5, size = 10, face = "bold"),
  panel.spacing.x = unit(1.5, "lines")
)
}
  
LMP <- plot_by_regime(marginal_effects_df, "Large Metro")
SMP <- plot_by_regime(marginal_effects_df, "Small Metro")
LNP <- plot_by_regime(marginal_effects_df, "Large Nonmetro")
SNP <- plot_by_regime(marginal_effects_df, "Small Nonmetro")

print(LMP)
print(SMP)
print(LNP)
print(SNP)


LMPp <- LMP + theme(legend.position = "none") + labs(x = NULL)
SMPp <- SMP + theme(legend.position = "none") + labs(x = NULL)
LNPp <- LNP + theme(legend.position = "none") + labs(x = NULL)

final_plot <- (LMPp + SMPp) / (LNPp + SNP) +
  plot_annotation(
    title = "Marginal Effects of Retention on Premature Mortality\n by ROG Quantile and Rurality Regime",
    theme = theme(
      plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
    )
  )

final_plot

```

####Alt Marginal Effects Code
```{r}

# Ensure racial group is ordered as desired
marginal_effects_df$racial_group <- factor(
  marginal_effects_df$racial_group,
  levels = c("White", "Latine", "Black", "Asian Pacific Islander", "Indigenous")
)

# Plot
alt_margins_plot <- ggplot(marginal_effects_df, aes(x = rog_value, y = estimate,
                                color = racial_group, shape = racial_group)) +
  geom_line(linewidth = 1) +
  geom_point(size = 2) +
  facet_wrap(~ Regime, ncol = 2) +
  scale_color_manual(values = c(
    "White" = "#377eb8",
    "Latine" = "#ff7f00",
    "Black" = "#e41a1c",
    "Asian Pacific Islander" = "#4daf4a",
    "Indigenous" = "#984ea3"
  )) +
  labs(
    title = "Marginal Effect of Retention on Premature Mortality\nAcross ROG Levels by Regime and Racial Group",
    x = "ROG Value (Quantile Level)",
    y = "Estimated Marginal Effect",
    color = "Racial Group",
    shape = "Racial Group"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "right",
    legend.box = "vertical",
    legend.title = element_text(size = 12),
    strip.text = element_text(size = 12, face = "bold"),
    axis.text = element_text(size = 10),
    plot.title = element_text(hjust = 0.5, face = "bold")
  )


alt_margins_plot

```



clayton's notes:
okay, so I think I figured out to do something similar to margin plots manually. What I'm doing is extracting the predicted (fitted) values from our models, reading in other data, and plotting fitted values as our Y axis and a number of X vars as our X axis and colors.

First example here, I am creating a new dataframe for testing purposes, running an OLS model "testols", and then extracting and combining with the new dataframe, and finally using the "prepackaged" ggpredict command to plot margins plot.

```{r}
# testdata = mi1 %>% mutate(rucc = as.numeric(ruc_code), sr = metro_nonmetro, sr2 = ifelse((rucc == 1 | rucc == 2), "large.metro",
#         ifelse((rucc == 3), "small.metro",                                       ifelse((rucc >= 4), "nonmetro", NA))),
# sr3 = ifelse((rucc == 1 | rucc == 2), "large.metro",
#        ifelse((rucc == 3), "small.metro",                                       ifelse((rucc == 4 | rucc == 5), "large.nonmetro",
#        ifelse((rucc >= 6), "small.nonmetro", NA)))))
# 
# testols = lm(data = testdata, paam ~ retention + rrm_gap + pct_ag + pct_mine + pct_mfg + prosperity + age + logpop + uninsured + pct_black + pct_hisp + pct_ind + metro)
# 
# cca = as.data.frame(testols$fitted.values) %>%
#   rename("fitted"=1)
# cca2a = as.data.frame(testols$model$paam) %>%
#   rename("paam"=1)
# cca2b = as.data.frame(testols$model$retention) %>%
#   rename("retention"=1)
# 
# cca3 = cbind(cca, cca2a, cca2b) %>%
#   left_join(y=testdata, by=c("paam","retention"))
# ggpredict(testols, terms = c("retention", "metro")) |> plot()
# 


```


Let us now compare this to me manually plotting the fitted values using ggplot. Decently similar, but not exactly the same (from what I can tell).

```{r}
# ggplot(cca3,aes(y=fitted,x=retention,color=sr))+geom_point()+stat_smooth(method="lm",se=FALSE)

```


Okay, now I can apply this same process for our spatial regime models

```{r}
# 
# cca = as.data.frame(sr3a$fitted.values) %>%
#   rename("fitted"=1)
# cca2a = as.data.frame(sr3a$y) %>%
#   rename("paam"=1)
# cca2b = as.data.frame(sr3a$X) %>%
#   rename("cca1"=3, "cca2"=4) %>%
#   mutate(retention = cca1 + cca2) %>%
#   dplyr::select(retention)
# temp = sr_data %>%
#   st_drop_geometry()
# cca3 = cbind(cca, cca2a, cca2b) %>%
#   left_join(y=temp, by=c("paam","retention"))
#   
# ggplot(cca3,aes(y=fitted,x=retention,color=sr))+geom_point()+stat_smooth(method="lm",se=FALSE)


```



Okay, and you can see here that I can customize colors, and switch around the desired plot features. I didn't play around with plotting by more than 2 features simultaneously, but it is doable.

```{r}
# ggplot(cca3, aes(y = fitted, x = retention, color = sr)) +
#   geom_point() +
#   stat_smooth(method = "lm", se = FALSE) +
#   scale_color_manual(values = c("#8576AC", "#83A396")) +  # Apply custom colors
#   theme_minimal() +
#   labs(color = "metro status")  # Optional, to label the color scale
# 
# ggplot(cca3, aes(y = fitted, x = retention, color = rrm_gap)) +
#   geom_point() +
#   stat_smooth(method = "lm", se = FALSE) +
#   scale_color_gradient2(low = "#351c75", mid = "white", high = "#04442A", midpoint = median(cca3$rrm_gap)) +
#   theme_minimal() +
#   labs(color = "RRM Gap")  # optional, to label the color scale

```



## revised code

```{r}

# sr_data_temp = mi1 %>% mutate(sr = metro_nonmetro, sr2 = three_metro, sr3 = four_metro)
# 
# nb <- poly2nb(sr_data_temp, queen=TRUE)
# lw <- nb2listw(nb, style="W", zero.policy=TRUE)
# 
# # sr3a_margins = errorsarlm(data = sr_data, paam ~ 0 + sr3/(retention + rrm_gap + pct_black + pct_hisp + pct_ind +  pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
# #                   lw, zero.policy = TRUE)
# # 
# # summary(sr3a_margins)
# 
# 
# sr3ai_margins = errorsarlm(data = sr_data_temp, paam ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured),
#                   lw, zero.policy = TRUE)
# 
# summary(sr3ai_margins)
```


```{r}
# cca = as.data.frame(sr3ai_margins$fitted.values) %>%
#   rename("fitted"=1)
# cca2a = as.data.frame(sr3ai_margins$y) %>%
#   rename("paam"=1)
# cca2b = as.data.frame(sr3ai_margins$X) %>%
#   rename("cca1"=53, "cca2"=54, "cca3"=55, "cca4"=56) %>%
#   mutate(retentionint = cca1 + cca2 + cca3 + cca4) %>%
#   dplyr::select(retentionint)
# temp = sr_data_temp %>%
#   st_drop_geometry() %>%
#   mutate(retentionint = retention*rrm_gap)
# cca3 = cbind(cca, cca2a, cca2b) %>%
#   left_join(y=temp, by=c("paam","retentionint"))
#   
# 
# ggplot(cca3,aes(y=fitted,x=retention,color=sr))+geom_point()+stat_smooth(method="lm",se=FALSE)
```


```{r}
# cca4 = cca3
# cca4$sr3 <- factor(cca3$sr3, levels = c("large_metro", "small_metro", "large_nonmetro", "small_nonmetro"))
# 
# ggplot(cca4, aes(y = fitted, x = retentionint, color = sr3)) +
#   geom_point(aes(shape = factor(sr3)), size = 1.5) +  # Reduce point size by adjusting 'size'
#   stat_smooth(method = "lm", size = 1.5, se = FALSE) +
#   scale_color_manual(values = c("#ea9999","#990000","#9fc5e8", "#073763")) +  # Apply custom colors
#   scale_shape_manual(values = c(16, 16, 17, 17)) +  # 16 = circle (dot), 17 = triangle
#   theme_minimal() +
#   labs(color = "metro status", shape = "metro status", y = "fitted values (PAAM, standardized)", x = "retention x ROG interaction (both standardized)")  # Optional, to label the shape legend
```



<!-- # PAA Models -->
<!-- ```{r} -->

<!-- # Column to delete -->
<!-- column_to_delete <- "prosperity" -->

<!-- if (column_to_delete %in% colnames(df_map)) { -->
<!--   df_map <- df_map %>% -->
<!--     select(-all_of(column_to_delete)) -->
<!-- } -->


<!-- mi1 = df_map %>% drop_na(c(paam, retention, rrm_gap, pct_mfg, pct_mine, pct_ag, pct_fire, pct_edmed, laborforce_part_rate, age, bach, poverty_rate, income_rate, logpop, uninsured, state_fe)) %>% mutate(metro = ifelse(ruc_code >= 4, 1, 0), paam = (paam - mean(paam, na.rm=TRUE))/sd(paam, na.rm=TRUE), retention = (retention - mean(retention, na.rm=TRUE))/sd(retention, na.rm=TRUE), rrm_gap = (rrm_gap - mean(rrm_gap, na.rm=TRUE))/sd(rrm_gap, na.rm=TRUE), pct_mfg = (pct_mfg - mean(pct_mfg, na.rm=TRUE))/sd(pct_mfg, na.rm=TRUE), pct_mine = (pct_mine - mean(pct_mine, na.rm=TRUE))/sd(pct_mine, na.rm=TRUE), pct_ag = (pct_ag - mean(pct_ag, na.rm=TRUE))/sd(pct_ag, na.rm=TRUE), pct_fire = (pct_fire - mean(pct_fire, na.rm=TRUE))/sd(pct_fire, na.rm=TRUE), pct_edmed = (pct_edmed - mean(pct_edmed, na.rm=TRUE))/sd(pct_edmed, na.rm=TRUE), laborforce_part_rate = (laborforce_part_rate - mean(laborforce_part_rate, na.rm=TRUE))/sd(laborforce_part_rate, na.rm=TRUE), age = (age - mean(age, na.rm=TRUE))/sd(age, na.rm=TRUE), bach = (bach - mean(bach, na.rm=TRUE))/sd(bach, na.rm=TRUE), poverty_rate = (poverty_rate - mean(poverty_rate, na.rm=TRUE))/sd(poverty_rate, na.rm=TRUE), income_rate = (income_rate - mean(income_rate, na.rm=TRUE))/sd(income_rate, na.rm=TRUE), logpop = (logpop - mean(logpop, na.rm=TRUE))/sd(logpop, na.rm=TRUE), uninsured = (uninsured - mean(uninsured, na.rm=TRUE))/sd(uninsured, na.rm=TRUE)) -->


<!-- # here I'm making the prosperity index -->
<!-- # in the prior chunk, we z-score the variables -->


<!-- # first, we define the prosperity concept -->
<!-- m1a  <- ' prosperity  =~ laborforce_part_rate + bach + poverty_rate + income_rate' -->

<!-- # next, run confirmatory factor analysis -->
<!-- factor1 <- cfa(m1a, data=mi1,std.lv=TRUE) -->
<!-- summary(factor1) -->

<!-- # extracting factor results -->
<!-- PE <- parameterEstimates(factor1) %>% -->
<!--   filter(lhs == "prosperity") -->

<!-- loading.laborforce_part_rate = PE %>% -->
<!--   filter(rhs == "laborforce_part_rate") %>% -->
<!--   select(est) -->
<!-- loading.laborforce_part_rate = loading.laborforce_part_rate$est -->

<!-- loading.bach = PE %>% -->
<!--   filter(rhs == "bach") %>% -->
<!--   select(est) -->
<!-- loading.bach = loading.bach$est -->

<!-- loading.poverty_rate = PE %>% -->
<!--   filter(rhs == "poverty_rate") %>% -->
<!--   select(est) -->
<!-- loading.poverty_rate = loading.poverty_rate$est -->

<!-- loading.income_rate = PE %>% -->
<!--   filter(rhs == "income_rate") %>% -->
<!--   select(est) -->
<!-- loading.income_rate = loading.income_rate$est -->

<!-- # adding loading (correlations) for each indictor -->
<!-- # using these to build weighted average of prosperity -->
<!-- mi1 = mi1 %>% -->
<!--   mutate(prosperity = ((laborforce_part_rate*loading.laborforce_part_rate)+(income_rate*loading.income_rate)+(poverty_rate*loading.poverty_rate)+(bach*loading.bach))/4, prosperity = (prosperity-mean(prosperity, na.rm=TRUE))/sd(prosperity, na.rm=TRUE)) -->

<!-- ``` -->


<!-- ## paam, large metro & large nonmetro -->

<!-- ### part 1 - industry > trade -->
<!-- ```{r} -->
<!-- nb <- poly2nb(mi1, queen=TRUE) -->
<!-- lw <- nb2listw(nb, style="W", zero.policy=TRUE) -->

<!-- sr_data = mi1 %>% mutate(sr = metro_nonmetro, sr2 = three_metro, sr3 = four_metro) -->

<!-- sr1b = errorsarlm(data = sr_data, rrm_gap ~ 0 + sr3/(pct_ag + pct_mine + pct_mfg + logpop + pct_black + pct_hisp + pct_ind), -->
<!--                   lw, zero.policy = TRUE) -->
<!-- summary(sr1b) -->


<!-- ``` -->


<!-- ### part 2 - industry + trade > prosperity -->
<!-- ```{r} -->
<!-- nb <- poly2nb(mi1, queen=TRUE) -->
<!-- lw <- nb2listw(nb, style="W", zero.policy=TRUE) -->

<!-- sr2a = errorsarlm(data = sr_data, prosperity ~ 0 + sr3/(retention + rrm_gap + pct_black + pct_hisp + pct_ind  + pct_ag + pct_mine + pct_mfg + logpop), -->
<!--                   lw, zero.policy = TRUE) -->

<!-- summary(sr2a) -->


<!-- sr2ai = errorsarlm(data = sr_data, prosperity ~ 0 + sr3/(retention + rrm_gap + pct_black + pct_hisp + pct_ind + retention*rrm_gap + pct_ag + pct_mine + pct_mfg + logpop), -->
<!--                   lw, zero.policy = TRUE) -->

<!-- summary(sr2ai) -->

<!-- ``` -->


<!-- #### ANOVA -->
<!-- ```{r} -->
<!-- anova(sr2ai, sr2a) -->
<!-- ``` -->

<!-- ### part 2b- Industry + Trade + Controls > PAAM -->


<!-- ```{r} -->
<!-- nb <- poly2nb(mi1, queen=TRUE) -->
<!-- lw <- nb2listw(nb, style="W", zero.policy=TRUE) -->

<!-- sr2b = errorsarlm(data = sr_data, paam ~ 0 + sr3/(retention + rrm_gap + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + logpop + uninsured), -->
<!--                   lw, zero.policy = TRUE) -->

<!-- summary(sr2b) -->


<!-- sr2bi = errorsarlm(data = sr_data, paam ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + logpop + uninsured), -->
<!--                   lw, zero.policy = TRUE) -->

<!-- summary(sr2bi) -->

<!-- ``` -->

<!-- #### ANOVA -->
<!-- ```{r} -->
<!-- anova(sr2bi, sr2b) -->
<!-- ``` -->


<!-- ### part 3 - full model -->

<!-- ```{r} -->
<!-- nb <- poly2nb(mi1, queen=TRUE) -->
<!-- lw <- nb2listw(nb, style="W", zero.policy=TRUE) -->

<!-- sr3a = errorsarlm(data = sr_data, paam ~ 0 + sr3/(retention + rrm_gap + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured), -->
<!--                   lw, zero.policy = TRUE) -->

<!-- summary(sr3a) -->

<!-- sr3ai = errorsarlm(data = sr_data, paam ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured), -->
<!--                   lw, zero.policy = TRUE) -->

<!-- summary(sr3ai) -->

<!-- ``` -->

<!-- #### ANOVA -->
<!-- ```{r} -->
<!-- anova(sr3ai, sr3a) -->
<!-- ``` -->


<!-- ### sp auto -->

<!-- ```{r} -->

<!-- # sr_data = mi1 %>% mutate(sr = metro_nonmetro) -->
<!-- #  -->
<!-- # sr3a = errorsarlm(data = sr_data, paam ~ 0 + sr3/(retention + rrm_gap +retention*rrm_gap + pct_ag + pct_mine + pct_mfg + age + prosperity + logpop + uninsured), -->
<!-- #                   lw, zero.policy = TRUE) -->
<!-- #  -->
<!-- #  -->
<!-- # temp1 = data.frame(as.list(sr3a$coefficients)) %>% mutate(var = "coef") %>% pivot_longer(cols=!var, names_to = "name", values_to = "coef") %>% select(-var) %>% filter(name != "srmetro" & name != "srnonmetro") %>% mutate(rurality = substr(name, 1, 5), name = gsub('srmetro.', '', name), name = gsub('srnonmetro.', '', name), rurality = ifelse(rurality == "srmet", "metro", "nonmetro")) -->
<!-- # temp2 = data.frame(as.list(sr3a$rest.se)) %>% mutate(var = "se") %>% pivot_longer(cols=!var, names_to = "name", values_to = "se") %>% select(-var) %>% mutate(name = gsub('I.x...lambda...WX.', '', name), name = ifelse(name == ".Intercept.", "X.Intercept.", name)) %>% filter(name != "srmetro" & name != "srnonmetro") %>% mutate(rurality = substr(name, 1, 5), name = gsub('srmetro.', '', name), name = gsub('srnonmetro.', '', name), rurality = ifelse(rurality == "srmet", "metro", "nonmetro")) -->
<!-- #  -->
<!-- #  -->
<!-- # viz_regime = temp1 %>% left_join(y=temp2, by=c("name","rurality")) %>% rename("var"="name") -->
<!-- #  -->
<!-- #  -->
<!-- # # global and local autocorrelation -->
<!-- # Q2ar = mi1 -->
<!-- # Q2ar$r = sr3a$resid -->
<!-- # nb <- poly2nb(Q2ar, queen=TRUE) -->
<!-- # lw <- nb2listw(nb, style="W", zero.policy=TRUE) -->
<!-- # lw$weights[5] -->
<!-- # moran.test(Q2ar$r,lw, zero.policy=TRUE) -->
<!-- # w <- queen_weights(Q2ar) -->
<!-- # lisa <- local_moran(w, Q2ar['r']) -->
<!-- # lisa_colors <- lisa_colors(lisa) -->
<!-- # lisa_labels <- lisa_labels(lisa) -->
<!-- # lisa_clusters <- lisa_clusters(lisa) -->
<!-- # Q2ar = Q2ar %>% -->
<!-- #   filter(STATE_NAME != "Alaska" & STATE_NAME != "Hawaii") -->
<!-- # plot(st_geometry(Q2ar), -->
<!-- #      col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), -->
<!-- #      border = "#333333", lwd=0.2) -->

<!-- ``` -->

<!-- ###Print Results to Excel -->

<!-- ```{r} -->

<!-- #  #### print results  --> 
<!-- # # Write OLS retention & autonomy results to excel file  --> 
<!-- # # -->
<!-- # # install.packages("broom") -->
<!-- # # install.packages("writexl") -->
<!-- # library(broom) -->
<!-- # library(writexl) -->
<!-- # # -->
<!-- # # ## Tidy results -->
<!-- # tidy_sr1a <- tidy(sr1a) -->
<!-- # tidy_sr1b <- tidy(sr1b) -->
<!-- # tidy_sr2a <- tidy(sr2a) -->
<!-- # tidy_sr2b <- tidy(sr2b) -->
<!-- # tidy_sr3a <- tidy(sr3a) -->
<!-- # # -->
<!-- # # -->
<!-- # # -->
<!-- # # # Identify each model -->
<!-- # # -->
<!-- # tidy_sr1a$model <- "Retention-Industry" -->
<!-- # tidy_sr1b$model <- "RRG-Industry" -->
<!-- # tidy_sr2a$model <- "Trade-Industry-Prosperity" -->
<!-- # tidy_sr2b$model <- "Trade-Industry-PAAM" -->
<!-- # tidy_sr3a$model <- "FULL" -->
<!-- # # -->
<!-- # # -->
<!-- # # # # # Combine results into single DF -->
<!-- # # tidy_results <- bind_rows(tidy_sr1a, tidy_sr1b, tidy_sr2a, tidy_sr2b, tidy_sr3a) -->
<!-- # # -->
<!-- # # -->
<!-- # # # Create a list of data frames to be written to different sheets --> 
<!-- # results_list <- list( -->
<!-- #   "Retention-Industry" = tidy_sr1a, -->
<!-- #   "RRG-Industry" = tidy_sr1b, -->
<!-- #   "Trade-Industry-Prosperity" = tidy_sr2a, -->
<!-- #     "Trade-Industry-PAAM" = tidy_sr2b, -->
<!-- #   "FULL" = tidy_sr3a -->
<!-- # ) -->
<!-- #  -->
<!-- # # Write the list of data frames to an Excel file --> 
<!-- #   write_xlsx(results_list, path = "SR_regression_results-rural1.xlsx") -->
<!-- #  -->
<!-- #  -->
<!-- #    #### print interaction results  -->
<!-- # # Write OLS retention and rrm_gap results to excel file  --> 
<!-- # # -->
<!-- #  -->
<!-- # # -->
<!-- # # ## Tidy results -->
<!-- # tidy_sr1a <- tidy(sr1a) -->
<!-- # tidy_sr1b <- tidy(sr1b) -->
<!-- # tidy_sr2ai <- tidy(sr2ai) -->
<!-- # tidy_sr2bi <- tidy(sr2bi) -->
<!-- # tidy_sr3ai <- tidy(sr3ai) -->
<!-- # # -->
<!-- # # -->
<!-- # # -->
<!-- # # # Identify each model -->
<!-- # # -->
<!-- # tidy_sr1a$model <- "Retention-Industry_int" -->
<!-- # tidy_sr1b$model <- "RRG-Industry_int" -->
<!-- # tidy_sr2ai$model <- "Trade-Industry-Prosperity_int" -->
<!-- # tidy_sr2bi$model <- "Trade-Industry-PAAM_int" -->
<!-- # tidy_sr3ai$model <- "FULL_int" -->
<!-- # # -->
<!-- # # -->
<!-- # # # # # Combine results into single DF -->
<!-- # # tidy_results <- bind_rows(tidy_sr1a, tidy_sr1b, tidy_sr2a, tidy_sr2b, tidy_sr3a) -->
<!-- # # -->
<!-- # # -->
<!-- # # # Create a list of data frames to be written to different sheets --> 
<!-- # results_list <- list( -->
<!-- #   "Retention-Industry_int" = tidy_sr1a, -->
<!-- #   "RRG-Industry_int" = tidy_sr1b, -->
<!-- #   "Trade-Industry-Prosperity_int" = tidy_sr2ai, -->
<!-- #     "Trade-Industry-PAAM_int" = tidy_sr2bi, -->
<!-- #   "FULL_int" = tidy_sr3ai -->
<!-- # ) -->
<!-- #  -->
<!-- # # Write the list of data frames to an Excel file --> 
<!-- #   write_xlsx(results_list, path = "SR_regression_results-rural1_int.xlsx") -->

<!-- ``` -->

<!-- #Sara's margin plot code:  -->

<!-- ```{r} -->

<!-- # Extract coefficients from spatial error model -->
<!-- results <- tidy(sr3ai, conf.int = TRUE) -->

<!-- # Filter relevant terms -->
<!-- results <- results %>% -->
<!--   filter(grepl("retention|rrm_gap|prosperity", term)) %>% -->
<!--   mutate(significance = ifelse(p.value < 0.05, "Significant", "Not Significant")) -->

<!-- # Extract regime from term name (assuming terms follow "sr3{regime}:{variable}" pattern) -->
<!-- results <- results %>% -->
<!--   mutate( -->
<!--     Regime = case_when( -->
<!--       grepl("sr3large\\.metro", term) ~ "Large Metro", -->
<!--       grepl("sr3small\\.metro", term) ~ "Small Metro", -->
<!--       grepl("sr3large\\.nonmetro", term) ~ "Large Nonmetro", -->
<!--       grepl("sr3small\\.nonmetro", term) ~ "Small Nonmetro", -->
<!--       TRUE ~ "Overall" -->
<!--     ) -->
<!--   ) -->

<!-- # Ensure Regime is a factor to control order in plots -->
<!-- results$Regime <- factor(results$Regime, -->
<!--                          levels = c("Large Metro", "Small Metro", "Large Nonmetro", "Small Nonmetro")) -->

<!-- # Clean variable names for clarity -->
<!-- results$term <- gsub("sr3large\\.metro:|sr3small\\.metro:|sr3large\\.nonmetro:|sr3small\\.nonmetro:", "", results$term) -->

<!-- # Ensure no empty rows remain after filtering -->
<!-- results <- results %>% filter(!is.na(estimate)) -->

<!-- # Create coefficient plots faceted by Regime (2x2 grid layout) -->
<!-- plot2 <- ggplot(results, aes(x = estimate, y = term, color = significance)) + -->
<!--   geom_point(size = 3) + -->
<!--   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2) + -->
<!--   facet_wrap(~Regime, ncol = 2, scales = "free_y") + -->
<!--   theme_minimal() + -->
<!--   scale_color_manual(values = c("Significant" = "#8b0037ff", "Not Significant" = "gray")) + -->
<!--   labs( -->
<!--     title = "Effects of Retention, ROG, and Interaction on Premature Mortality", -->
<!--     x = "Premature Age-Adjusted Mortality", -->
<!--     y = "Variable", -->
<!--     color = "Significance" -->
<!--   ) + -->
<!--   theme(legend.position = "bottom") -->

<!-- # plot2 -->


<!-- ``` -->


<!-- # margin plots -->

<!-- clayton's notes: -->
<!-- okay, so I think I figured out to do something similar to margin plots manually. What I'm doing is extracting the predicted (fitted) values from our models, reading in other data, and plotting fitted values as our Y axis and a number of X vars as our X axis and colors. -->

<!-- First example here, I am creating a new dataframe for testing purposes, running an OLS model "testols", and then extracting and combining with the new dataframe, and finally using the "prepackaged" ggpredict command to plot margins plot. -->

<!-- ```{r} -->
<!-- # testdata = mi1 %>% mutate(rucc = as.numeric(ruc_code), sr = metro_nonmetro, sr2 = ifelse((rucc == 1 | rucc == 2), "large.metro", -->
<!-- #         ifelse((rucc == 3), "small.metro",                                       ifelse((rucc >= 4), "nonmetro", NA))), -->
<!-- # sr3 = ifelse((rucc == 1 | rucc == 2), "large.metro", -->
<!-- #        ifelse((rucc == 3), "small.metro",                                       ifelse((rucc == 4 | rucc == 5), "large.nonmetro", -->
<!-- #        ifelse((rucc >= 6), "small.nonmetro", NA))))) -->
<!-- #  -->
<!-- # testols = lm(data = testdata, paam ~ retention + rrm_gap + pct_ag + pct_mine + pct_mfg + prosperity + age + logpop + uninsured + pct_black + pct_hisp + pct_ind + metro) -->
<!-- #  -->
<!-- # cca = as.data.frame(testols$fitted.values) %>% -->
<!-- #   rename("fitted"=1) -->
<!-- # cca2a = as.data.frame(testols$model$paam) %>% -->
<!-- #   rename("paam"=1) -->
<!-- # cca2b = as.data.frame(testols$model$retention) %>% -->
<!-- #   rename("retention"=1) -->
<!-- #  -->
<!-- # cca3 = cbind(cca, cca2a, cca2b) %>% -->
<!-- #   left_join(y=testdata, by=c("paam","retention")) -->
<!-- # ggpredict(testols, terms = c("retention", "metro")) |> plot() -->
<!-- #  -->


<!-- ``` -->


<!-- Let us now compare this to me manually plotting the fitted values using ggplot. Decently similar, but not exactly the same (from what I can tell). -->

<!-- ```{r} -->
<!-- # ggplot(cca3,aes(y=fitted,x=retention,color=sr))+geom_point()+stat_smooth(method="lm",se=FALSE) -->

<!-- ``` -->


<!-- Okay, now I can apply this same process for our spatial regime models -->

<!-- ```{r} -->
<!-- #  -->
<!-- # cca = as.data.frame(sr3a$fitted.values) %>% -->
<!-- #   rename("fitted"=1) -->
<!-- # cca2a = as.data.frame(sr3a$y) %>% -->
<!-- #   rename("paam"=1) -->
<!-- # cca2b = as.data.frame(sr3a$X) %>% -->
<!-- #   rename("cca1"=3, "cca2"=4) %>% -->
<!-- #   mutate(retention = cca1 + cca2) %>% -->
<!-- #   dplyr::select(retention) -->
<!-- # temp = sr_data %>% -->
<!-- #   st_drop_geometry() -->
<!-- # cca3 = cbind(cca, cca2a, cca2b) %>% -->
<!-- #   left_join(y=temp, by=c("paam","retention")) -->
<!-- #    -->
<!-- # ggplot(cca3,aes(y=fitted,x=retention,color=sr))+geom_point()+stat_smooth(method="lm",se=FALSE) -->


<!-- ``` -->



<!-- Okay, and you can see here that I can customize colors, and switch around the desired plot features. I didn't play around with plotting by more than 2 features simultaneously, but it is doable. -->

<!-- ```{r} -->
<!-- # ggplot(cca3, aes(y = fitted, x = retention, color = sr)) + -->
<!-- #   geom_point() + -->
<!-- #   stat_smooth(method = "lm", se = FALSE) + -->
<!-- #   scale_color_manual(values = c("#8576AC", "#83A396")) +  # Apply custom colors -->
<!-- #   theme_minimal() + -->
<!-- #   labs(color = "metro status")  # Optional, to label the color scale -->
<!-- #  -->
<!-- # ggplot(cca3, aes(y = fitted, x = retention, color = rrm_gap)) + -->
<!-- #   geom_point() + -->
<!-- #   stat_smooth(method = "lm", se = FALSE) + -->
<!-- #   scale_color_gradient2(low = "#351c75", mid = "white", high = "#04442A", midpoint = median(cca3$rrm_gap)) + -->
<!-- #   theme_minimal() + -->
<!-- #   labs(color = "RRM Gap")  # optional, to label the color scale -->

<!-- ``` -->



<!-- ## revised code -->

<!-- ```{r} -->

<!-- sr_data_temp = mi1 %>% mutate(sr = metro_nonmetro, sr2 = three_metro, sr3 = four_metro) -->

<!-- nb <- poly2nb(sr_data_temp, queen=TRUE) -->
<!-- lw <- nb2listw(nb, style="W", zero.policy=TRUE) -->

<!-- # sr3a_margins = errorsarlm(data = sr_data, paam ~ 0 + sr3/(retention + rrm_gap + pct_black + pct_hisp + pct_ind +  pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured), -->
<!-- #                   lw, zero.policy = TRUE) -->
<!-- #  -->
<!-- # summary(sr3a_margins) -->


<!-- sr3ai_margins = errorsarlm(data = sr_data_temp, paam ~ 0 + sr3/(retention + rrm_gap + retention*rrm_gap + pct_black + pct_hisp + pct_ind + pct_mfg + pct_ag + pct_mine + age + prosperity + logpop + uninsured), -->
<!--                   lw, zero.policy = TRUE) -->

<!-- summary(sr3ai_margins) -->
<!-- ``` -->


<!-- ```{r} -->
<!-- cca = as.data.frame(sr3ai_margins$fitted.values) %>% -->
<!--   rename("fitted"=1) -->
<!-- cca2a = as.data.frame(sr3ai_margins$y) %>% -->
<!--   rename("paam"=1) -->
<!-- cca2b = as.data.frame(sr3ai_margins$X) %>% -->
<!--   rename("cca1"=53, "cca2"=54, "cca3"=55, "cca4"=56) %>% -->
<!--   mutate(retentionint = cca1 + cca2 + cca3 + cca4) %>% -->
<!--   dplyr::select(retentionint) -->
<!-- temp = sr_data_temp %>% -->
<!--   st_drop_geometry() %>% -->
<!--   mutate(retentionint = retention*rrm_gap) -->
<!-- cca3 = cbind(cca, cca2a, cca2b) %>% -->
<!--   left_join(y=temp, by=c("paam","retentionint")) -->


<!-- ggplot(cca3,aes(y=fitted,x=retention,color=sr))+geom_point()+stat_smooth(method="lm",se=FALSE) -->
<!-- ``` -->


<!-- ```{r} -->
<!-- cca4 = cca3 -->
<!-- cca4$sr3 <- factor(cca3$sr3, levels = c("large_metro", "small_metro", "large_nonmetro", "small_nonmetro")) -->

<!-- ggplot(cca4, aes(y = fitted, x = retentionint, color = sr3)) + -->
<!--   geom_point(aes(shape = factor(sr3)), size = 1.5) +  # Reduce point size by adjusting 'size' -->
<!--   stat_smooth(method = "lm", size = 1.5, se = FALSE) + -->
<!--   scale_color_manual(values = c("#ea9999","#990000","#9fc5e8", "#073763")) +  # Apply custom colors -->
<!--   scale_shape_manual(values = c(16, 16, 17, 17)) +  # 16 = circle (dot), 17 = triangle -->
<!--   theme_minimal() + -->
<!--   labs(color = "metro status", shape = "metro status", y = "fitted values (PAAM, standardized)", x = "retention x ROG interaction (both standardized)")  # Optional, to label the shape legend -->
<!-- ``` -->

