---
title: "Industry-Health"
editor: source
format:
  html:
    self-contained: true
    page-layout: full
    code-fold: true
    code-tools: true
    code_download: yes
params:
  geography_year: 2013
  focus_county: "55025"
  map_imped_show: false
  map_imped_shape: "gaus" # prox, power, expo, gau, hyper, bisquare
  map_imped_param: 500 # scale parameter of the impedance function
  econ_dynam_data: TRUE
  basic_geog_feature: TRUE
---

```{r include = FALSE}



source("projects/industry_health/dataprep.R", local = (ih_dp <- new.env()))
source("datasets/circularity/circularity.R", local = (circularity <- new.env()))
source("R/geography.R", local = (geo <- new.env()))
source("R/basic_utilities.R", local = (util <- new.env()))

# install.packages("vtable")
# install.packages("dplyr")
# install.packages("tidyverse")
# install.packages("ggplot2")
# install.packages("stringr")
# install.packages("spdep")
# install.packages("tidycensus")
# install.packages("tigris")
# install.packages("viridis")
# install.packages("cowplot")
# install.packages("estimatr")
# install.packages("huxtable")
# #install.packages("margins")
# install.packages(c("lmtest", "sandwich"))
# install.packages("spatialreg")
# install.packages("gridExtra")
# install.packages("rgeoda") 
# install.packages("spgwr")
# install.packages("lavaan")
# install.packages("lavaanPlot")



library(vtable)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(spdep)
library(tidycensus)
library(tigris)
library(viridis)
library(cowplot)
library(lmtest)
library(sandwich)
library(estimatr)
library(huxtable)
#library(margins)
library(spatialreg)
library(logger)
library(moments)
library(PerformanceAnalytics)
library(correlation)
library(estimatr)
library(Hmisc)
library(rstatix)
library(glue)
library(sf)
library(units)
library(leaflet)
library(htmltools)
library(tmap)
library(gridExtra)
library(tidycensus) 
library(rgeoda) 
library(spgwr)
library(lavaan)
library(lavaanPlot)


# chunk behavior 
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 

# nonscientific notation
options(scipen=999)

# log output 
log_threshold(DEBUG)



##Load Hard Coded Data Sets 

##Median Age of County 2012
age = get_acs(geography = "county",
                   survey = "acs5",
                   variables = c("S0101_C01_030E"
                   ),
                   year = 2012) %>%
  select("place"=GEOID, "age"=estimate)

##pct over 65
age = get_acs(geography = "county",
                   survey = "acs5",
                   variables = c("S0101_C01_028E"
                   ),
                   year = 2012) %>%
  mutate(age = estimate/100) %>%
  select("place"=GEOID, age)




##ERS County Typologies 

ers = read.csv("https://www.ers.usda.gov/webdocs/DataFiles/48652/2015CountyTypologyCodes.csv?v=8831.8") %>%
  mutate(place = sprintf("%05d", FIPStxt)) %>%
  select(place, "ers_ag"=Farming_2015_Update, "ers_mine"=Mining_2015.Update, "ers_mfg"=Manufacturing_2015_Update, "ers_gov"=Government_2015_Update, "ers_rec"=Recreation_2015_Update, "ers_nonsp"=Nonspecialized_2015_Update)



# ##Industry Structure
# 
# industry = get_acs(geography = "county",
#                    survey = "acs5",
#                    variables = c("DP03_0032E","DP03_0033E","DP03_0034E"
#                                         ,"DP03_0035E","DP03_0036E","DP03_0037E"
#                                         ,"DP03_0038E","DP03_0039E","DP03_0040E"
#                                         ,"DP03_0041E","DP03_0042E","DP03_0043E"
#                                         ,"DP03_0044E","DP03_0045E"
#                    ),
#                    year = 2012) %>%
#   select("place"=GEOID, variable, estimate) %>%
#   pivot_wider(names_from = variable, values_from = estimate) %>%
#   mutate(pct_afm = DP03_0033/DP03_0032, pct_mfg = DP03_0034/DP03_0032, pct_fire = DP03_0039/DP03_0032, pct_edmed = DP03_0041/DP03_0032, pct_rec = DP03_0042/DP03_0032, pct_gov = DP03_0044/DP03_0032) %>%
#   select(place, pct_afm, pct_mfg, pct_fire, pct_edmed, pct_rec, pct_gov)


```

```{r}

# # not working
# abc = ih_dp$call_agcensus12()

agc_clean = read.delim2("data/projects/industry_health/jobs/qs.census2012.txt") #import ag census
jobs_clean <- read_delim("data/projects/industry_health/jobs/cbp12co.txt") #import cbp

agwork = agc_clean %>%
  filter(AGG_LEVEL_DESC == "COUNTY" & SHORT_DESC == "LABOR, HIRED, GE 150 DAYS - NUMBER OF WORKERS" & DOMAIN_DESC == "TOTAL") %>%
  mutate(place = str_c(sprintf("%02d",STATE_FIPS_CODE),"",sprintf("%03d",COUNTY_CODE)), agwork = as.numeric(gsub(",","",VALUE))) %>%
  select(place, agwork)


agops = agc_clean %>%
  filter(AGG_LEVEL_DESC == "COUNTY" & SHORT_DESC == "OPERATORS, (ALL) - NUMBER OF OPERATORS") %>%
  mutate(place = str_c(sprintf("%02d",STATE_FIPS_CODE),"",sprintf("%03d",COUNTY_CODE)), agops = as.numeric(gsub(",","",VALUE))) %>%
  select(place, agops)

agc = agwork %>%
  left_join(y=agops, by="place") %>%
  mutate(agwork = ifelse(is.na(agwork), 0, agwork), agops = ifelse(is.na(agops), 0, agwork), ag_emp = agwork + agops) %>%
  select(place, ag_emp)

jobs = jobs_clean %>%
  filter(naics != "------") %>%
  mutate(naicsfilt = substr(naics,3,3), place = str_c(fipstate,"",fipscty)) %>%
  filter(naicsfilt == "-") %>%
  mutate(naics = str_c("n","",substr(naics,1,2))) %>%
  select(place, naics, emp) %>%
  pivot_wider(names_from = naics, values_from = emp)

jobs_temp = jobs_clean %>%
  filter(naics == "------") %>%
  mutate(place = str_c(fipstate,"",fipscty)) %>%
  select(place, "cbp.tot"=emp)

jobs = jobs %>%
  left_join(y=jobs_temp, by="place") %>%
  replace(is.na(.), 0) %>%
  mutate(cbp.no.ag = cbp.tot - n11, n_fire = n52 + n53, n_edmed = n61 + n62, n_prof = n54 + n55) %>%
  select(place, cbp.no.ag, "n_mine"=n22, "n_mfg"=n31, n_fire, n_edmed, n_prof) %>%
  left_join(y=agc, by="place") %>%
  mutate(totemp = cbp.no.ag + ag_emp, pct_ag = ag_emp/totemp, pct_mine = n_mine/totemp, pct_mfg = n_mfg/totemp, pct_fire = n_fire/totemp, pct_edmed = n_edmed/totemp, pct_prof = n_prof/totemp) %>%
  select(place, "jobs"=totemp, pct_ag, pct_mine, pct_mfg, pct_fire, pct_prof, pct_edmed) %>%
  mutate(pct_edmed = ifelse(pct_edmed == "Inf", NA, pct_edmed), pct_fire = ifelse(pct_fire == "Inf", NA, pct_fire))

jobs2 = jobs_clean %>%
  mutate(n2d = substr(naics,1,2)) %>%
  mutate(filt3 = substr(naics,4,6)) %>%
  filter(n2d == "31"|n2d == "32"|n2d == "33") %>%
  filter(filt3 == "///") %>%
  mutate(durable = ifelse(n2d < 33, "nondurable", "durable"), durable = ifelse((naics == "321///" | naics == "327///"), "durable", durable), place = str_c(fipstate,"",fipscty)) %>%
  group_by(place, durable) %>%
  dplyr::summarize(emp = sum(emp)) %>%
  pivot_wider(names_from = durable, values_from = emp)

jobs = jobs %>%
  left_join(y=jobs2, by="place") %>%
  mutate(pct_durable = durable/jobs, pct_nondurable = nondurable/jobs) %>%
  select(-durable, -nondurable)

```

# data

```{r include = FALSE}
chr<-ih_dp$call_chr(2017) 

pop<-ih_dp$call_population(2012) 

data<- left_join (chr, pop, by = "place")

lfpr<-ih_dp$call_laborforce_rate(2012)

data<- left_join (data, lfpr, by = "place")

unempr<-ih_dp$call_unemp_rate(2012) 

data<- left_join (data, unempr, by = "place")

incr<-ih_dp$call_income_rate(2012)

data<- left_join (data, incr, by = "place")

povr<-ih_dp$call_poverty_rate(2012) 

data<- left_join (data, povr, by = "place")

edur<-ih_dp$call_highschool_attainment_rate(2012) 

data<- left_join (data, edur, by = "place")

rucc<- ih_dp$call_ruc (2013) %>% 
  rename(place = fips)  


data<- left_join (data, rucc, by = "place")

data = data %>% 
mutate(metro_nonmetro = if_else(data$ruc_code < 4, "metro", "nonmetro"),
       logpop = log(population))

ind_struct<- ih_dp$call_industry_structure(2012)

data<- left_join (data, ind_struct, by = "place")

data<- left_join (data, age, by = "place")

data<- left_join (data, ers, by = "place")

data<- left_join (data, jobs, by = "place")

circularity <- circularity$get_circularity()


YR = 2012
circu = circularity %>%  
  filter(year == YR) %>%
  select(county_fips, retention, autonomy, excess_supply, intermediate_supply, excess_demand, intermediate_demand) %>% 
  rename (place = county_fips)
  

data<- left_join (data, circu, by = "place")

print(data)


```

##construct alternate retention and autonomy

```{r}

data <- data %>%
  mutate(retention_calc = 1 - (excess_supply / intermediate_supply),
         autonomy_calc = 1 - (excess_demand / intermediate_demand))

print(data)

```



##create access to healthcare index

```{r}
# Access to health care----------

# Identify columns of interest for imputation
columns_of_interest <- c("uninsured", "pcp", "dentists", "mhp")
# 
# # Impute missing values with mean for numeric/logical columns in the specified columns
# for (col in columns_of_interest) {
#   if (is.numeric(data[[col]]) || is.logical(data[[col]])) {
#     data[is.na(data[[col]]), col] <- mean(data[[col]], na.rm = TRUE)
#   }
# }

# Z-score normalization (standardization) with NA handling
standardize <- function(x) {
  na_rm_x <- x[!is.na(x)]  # Remove NAs from x
  (x - mean(na_rm_x)) / sd(na_rm_x)
}

data$pcp_norm <- standardize(data$pcp)
data$dentists_norm <- standardize(data$dentists)
data$mhp_norm <- standardize(data$mhp)
data$uninsured_norm <- standardize(data$uninsured)

# Calculate the composite score using standardized values
# data$HCaccess_score_ss <- (data$uninsured_norm + data$pcp_norm + data$dentists_norm + data$mhp_norm) / 4
data = data %>% mutate(HCaccess_score = rowMeans(pick(ends_with("_norm")), na.rm = TRUE))

print(data)
```

#summary statistics

```{r}

##summary statistics
summary_stats = data %>% 
  get_summary_stats(, type = "common") %>% relocate(variable, n, mean, median, min, max)
summary_stats = as.data.frame(summary_stats)
summary_stats


# 
# 
# retention_ones <- mean(data$retention == 1, na.rm = TRUE) * 100
# autonomy_ones <- mean(data$autonomy == 1, na.rm = TRUE) * 100
# 
# print(retention_ones)
# print(autonomy_ones)

```

#histograms

```{r}
data %>% select(paam, ypll75, retention_calc, autonomy_calc, emp_to_va, emp_to_output, va_to_output) %>% hist.data.frame()


#density plots
variables_to_plot <- c("paam", "ypll75", "retention_calc", "autonomy_calc", "emp_to_va", "emp_to_output", "va_to_output")
data_subset <- data[, variables_to_plot, drop = FALSE]

# Function to plot density plots for each variable
plot_density <- function(data) {
  plots <- lapply(names(data), function(var) {
    ggplot(data, aes_string(x = var)) +
      geom_density() +
      labs(title = paste("Density Plot of", var))
  })
  return(plots)
}

# Create a list of density plots for each variable
density_plots <- plot_density(data_subset)

# Plot the density plots
grid.arrange(grobs = density_plots, ncol = 3)  


```

#maps

```{r}

# creating function to streamline creation of maps

ipath <- list(
  geo_county_ = glue(geo$opath$county_, year = "{year}", scale = "20m", geometry = TRUE),
  geo_state = glue(geo$opath$state_, scale = "20m", geometry = "{geometry}")
)

ipath
call_geo <- function() {
  df <- geo$call_geog(params$geography_year) |>
    rename_with(str_to_lower)
  d <- geo$pubdata$get_state_df(FALSE) |>
    rename_with(str_to_lower) |>
    select(code, contiguous, bea_region_name) |>
    rename(state_code = code)
  df <- left_join(df, d, "state_code")
  df
}
df_map = data 
df = call_geo()
df_map <- left_join(df, df_map, by = "place")

map = function(val, title, rev_scale){
  lab <- glue(
        "{county}",
        "Premature Age Adjusted Mortality: {paam}", 
        "Years of Potential Life Lost before 75: {ypll75}", 
        "Retention: {retention_calc}", 
        "Autonomy: {autonomy_calc}",
        "Employee share of Value Added: {emp_to_va}",
        "Employee share of Output: {emp_to_output}", 
        "Value added share of Output: {va_to_output}",
        .sep = "<br>",
        .envir = df_map)
  
  pal = colorNumeric("magma", val, reverse = rev_scale)
  
  leaflet() |>
    addTiles() |>
    addPolygons(
      data = df_map,
      stroke = FALSE,
      fillColor = ~pal(val),
      fillOpacity = 0.6,
      label = lab,
      popup = val
    ) |>
    addLegend(pal = colorNumeric("magma", val, reverse = rev_scale), 
              values = val, 
              title = title)
}



```

```{r}

# creating maps
 map(val = df_map$paam, title = "Premature Age Adjusted Mortality", rev_scale = FALSE)
# map(val = df_map$ypll75, title = "Years of Potential Life Lost before 75", rev_scale = FALSE)
# map(val = df_map$retention, title = "Retention", rev_scale = FALSE)
# map(val = df_map$autonomy, title = "Autonomy", rev_scale = FALSE)
# map(val = df_map$emp_to_va, title = "Employee Share of Value Added", rev_scale = FALSE)
# map(val = df_map$emp_to_output, title = "Employee Share of Output", rev_scale = FALSE)
# map(val = df_map$va_to_output, title = "Value Added Share of Output", rev_scale = FALSE)




```


#nonspatial regressions

```{r}

# Full data regressions
ns_model1 <- lm(paam ~ retention,
        data = data,
        na.action = na.exclude)

ns_model2<- lm(paam ~ autonomy, 
               data = data, 
               na.action = na.exclude) 

ns_model3<- lm(ypll75 ~ retention, 
               data = data, 
               na.action = na.exclude)

ns_model4<- lm(ypll75 ~ autonomy, 
               data = data, 
               na.action = na.exclude)


summary(ns_model1)
summary(ns_model2)
summary(ns_model3)
summary(ns_model4)

ggplot(data, aes(retention_calc, paam)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention (2012) and \n Premature Age Adjusted Mortality (2013-2015)",
        x = "Retention",
        y = "Premature Age Adjusted Mortality")

ggplot(data, aes(autonomy_calc, paam)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Autonomy (2012) and \n Premature Age Adjusted Mortality (2013-2015)",
        x = "Autonomy",
        y = "Premature Age Adjusted Mortality")

ggplot(data, aes(retention_calc, ypll75)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention (2012) and \n Years of Life lost (2012-2014)",
        x = "Retention",
        y = "Years of Life Lost")

ggplot(data, aes(autonomy_calc, ypll75)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Autonomy (2012) and \n Years of Life Lost (2012-2014)",
        x = "Autonomy",
        y = "Years of Life Lost")


# Filter the data to include only "nonmetro" cases
nonmetro_data <- subset(data, metro_nonmetro == "nonmetro")

# Nonmetro regressions
ns_model1_nm <- lm(paam ~ retention,
                   data = nonmetro_data, 
                   na.action = na.exclude)

ns_model2_nm<- lm(paam ~ autonomy, 
               data = nonmetro_data, 
               na.action = na.exclude) 

ns_model3_nm<- lm(ypll75 ~ retention, 
               data = nonmetro_data,
               na.action = na.exclude)

ns_model4_nm<- lm(ypll75 ~ autonomy, 
               data = nonmetro_data,
               na.action = na.exclude)

summary(ns_model1_nm)
summary(ns_model2_nm)
summary(ns_model3_nm)
summary(ns_model4_nm)

ggplot(nonmetro_data, aes(retention_calc, paam)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention and \n Premature Age Adjusted Mortality for Non-Metro",
        x = "Retention",
        y = "Premature Age Adjusted Mortality")

ggplot(nonmetro_data, aes(autonomy_calc, paam)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Autonomy and \n Premature Age Adjusted Mortality for Non-Metro",
        x = "Autonomy",
        y = "Premature Age Adjusted Mortality")

ggplot(nonmetro_data, aes(retention_calc, ypll75)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Retention and \n Years of Life Lost for Non-Metro",
        x = "Retention",
        y = "Years of Life Lost")

ggplot(nonmetro_data, aes(autonomy_calc, ypll75)) +
  geom_point() +
   geom_smooth(method = "lm") +
   labs(title = "Scatter Plot of Autonomy and \n Years of Life Lost for Non-Metro",
        x = "Autonomy",
        y = "Years of Life Lost")


```

```{r}

# SARA -- made a loop with an updated map. I also recreated austin's off-the-shelf map below, but, I didn't like the colors so I remade. Feel free to use either (and update colors). You'll have to ask Austin how to tuck Alaska and Hawaii under; I've excluded for  now.

map = ih_dp$call_geog(2012)
df_map <- left_join(map, data, by = "place") %>% filter(STATE_NAME != "Alaska" & STATE_NAME != "Hawaii" & STATE_NAME != "Puerto Rico")

#install.packages("RColorBrewer")
# library(RColorBrewer)
 
 vars = list("paam", "ypll75", "retention_calc", "autonomy_calc", "emp_to_va", "emp_to_output", "va_to_output")
 for (v in vars) {
 
 mdn = median(df_map[[v]], na.rm = TRUE)
   
 tmap_mode("plot")
 output = df_map %>%
   tm_shape() + 
  tm_polygons(col = v, midpoint = mdn, border.alpha = 0.1, style = "cont", id = v,
               palette = c("#f0f9e8","#ccebc5", "#a8ddb5", "#7bccc4", "#43a2ca","#0868ac")) +
   tm_layout(legend.title.size = 1.5, fontface = 2, legend.position = c("right","bottom"), frame = FALSE)

print(output)

 }

# # Define a color-blind friendly palette from ColorBrewer
# color_palette <- brewer.pal(4, "Set2")  # Change 4 to the number of quartile bins
# 
# for (v in vars) {
#   # Remove missing values from the variable 'v'
#   df_map_clean <- df_map[!is.na(df_map[[v]]), ]
#   
#   if (nrow(df_map_clean) > 0) {
#     # Calculate median for each variable
#     mdn <- median(df_map_clean[[v]], na.rm = TRUE)
#     
#     # Create quartile bins for the variable 'v'
#     df_map_clean$bins <- cut(df_map_clean[[v]], 
#                               breaks = quantile(df_map_clean[[v]], 
#                                                 probs = seq(0, 1, by = 0.25), 
#                                                 na.rm = TRUE, 
#                                                 dig.lab = 5),  # Increase digits for breaks
#                               include.lowest = TRUE)
#     
#     # Set up the tmap visualization with color-blind friendly palette
#     output <- df_map_clean %>%
#       tm_shape() + 
#       tm_polygons(col = "bins", 
#                   border.alpha = 0.1, 
#                   style = "cat", 
#                   palette = color_palette,
#                   legend.hist = FALSE,  # Remove the histogram
#                   legend.format = list(format = list(fun = function(x) { paste0(format(x, scientific = FALSE, trim = TRUE, digits = 2), " - ", format(x + 1, scientific = FALSE, trim = TRUE, digits = 2)) })),  # Format legend bins as "Value - Value"
#                   legend.title = paste("Quartiles of", v)) +  # Add title to the bins
#       tm_layout(legend.title.size = 1.5, 
#                 fontface = 2, 
#                 legend.position = c("right","bottom"), 
#                 frame = FALSE)
#     
#     print(output)
#   } else {
#     warning(paste("No data available for variable", v))
#   }
# }


```


```{r}

map = ih_dp$call_geog(2012)
df_map <- left_join(map, data, by = "place")

df_map <- drop_na()


p <- ih_dp$viz$nominal_choro_map(df_map, "paam", interactive = FALSE)
print(p)


```



##exploratory spatial data analysis

```{r}
map = ih_dp$call_geog(2012)
df_map <- left_join(map, data, by = "place") %>% 
  drop_na(paam, ypll75, retention_calc, autonomy_calc, emp_to_va, emp_to_output, va_to_output)


nb <- poly2nb(df_map, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]


```

#moran global paam 

```{r}
moran.test(df_map$paam,lw, zero.policy=TRUE)

```


#lisa paam
```{r}
df_lisa<- df_map %>% 
  filter(STATE_NAME != "Alaska" & STATE_NAME != "Hawaii" & STATE_NAME != "Puerto Rico")


w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['paam'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.2)
title(main = "LISA, Premature Age-Adjusted Mortality")

# Create the legend separately
legend_labels <- c("Not significant", "High-High", "Low-Low", "High-Low", "Low-High")
legend_colors <- unlist(lisa_colors)
legend("bottomleft", border = "#eeeeee")
```
#moran global retention 

```{r}
moran.test(df_map$retention_calc,lw, zero.policy=TRUE)

```


#lisa retention
```{r}


w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['retention_calc'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.2)
title(main = "LISA, Retention")

# Create the legend separately
legend_labels <- c("Not significant", "High-High", "Low-Low", "High-Low", "Low-High")
legend_colors <- unlist(lisa_colors)
legend("bottomleft", border = "#eeeeee")
```


#moran global autonomy 

```{r}
moran.test(df_map$autonomy_calc,lw, zero.policy=TRUE)

```


#lisa autonomy
```{r}


w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['autonomy_calc'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.2)
title(main = "LISA, Autonomy")

# Create the legend separately
legend_labels <- c("Not significant", "High-High", "Low-Low", "High-Low", "Low-High")
legend_colors <- unlist(lisa_colors)
legend("bottomleft", border = "#eeeeee")
```

#moran global % value added of output

```{r}
moran.test(df_map$va_to_output,lw, zero.policy=TRUE)

```


#lisa % value added of output
```{r}


w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['va_to_output'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.2)
title(main = "LISA, % Value Added of Output")

# Create the legend separately
legend_labels <- c("Not significant", "High-High", "Low-Low", "High-Low", "Low-High")
legend_colors <- unlist(lisa_colors)
legend("bottomleft", border = "#eeeeee")
```


#moran global % worker share of value added

```{r}
moran.test(df_map$emp_to_va,lw, zero.policy=TRUE)

```


#lisa % worker share of value added
```{r}


w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['emp_to_va'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.2)
title(main = "LISA, % Employee Share of Value Added")

# Create the legend separately
legend_labels <- c("Not significant", "High-High", "Low-Low", "High-Low", "Low-High")
legend_colors <- unlist(lisa_colors)
legend("bottomleft", border = "#eeeeee")
```



#moran global % worker share of output 

```{r}
moran.test(df_map$emp_to_output,lw, zero.policy=TRUE)

```


#lisa % worker share of output
```{r}


w <- queen_weights(df_lisa)
lisa <- local_moran(w, df_lisa['emp_to_output'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(df_lisa), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "#333333", lwd=0.2)
title(main = "LISA, % Employee Share of Output")

# Create the legend separately
legend_labels <- c("Not significant", "High-High", "Low-Low", "High-Low", "Low-High")
legend_colors <- unlist(lisa_colors)
legend("bottomleft", border = "#eeeeee")
```

# Clean models (no interact)
## OLS
```{r}

mi1 = df_map %>% drop_na(c(paam, retention_calc, pct_nondurable, pct_durable, pct_mine, pct_ag, pct_fire, pct_edmed, laborforce_part_rate, age, highschool_attainment_rate, poverty_rate, income_rate, logpop, uninsured))



ols2 = lm(data = mi1, paam ~ retention_calc + pct_ag + pct_mine + pct_mfg + laborforce_part_rate + age + highschool_attainment_rate + poverty_rate + income_rate + logpop + uninsured)

ols2 = lm(data = mi1, paam ~ retention_calc + pct_ag + pct_mine + pct_durable + pct_nondurable + laborforce_part_rate + age + highschool_attainment_rate + poverty_rate + income_rate + logpop + uninsured)


summary(ols2)


```

## Sp Error
```{r}
nb <- poly2nb(mi1, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)

err2 = errorsarlm(data = mi1, paam ~ retention_calc + pct_durable + pct_nondurable + pct_ag + laborforce_part_rate + pct_mine + age + highschool_attainment_rate + poverty_rate + income_rate + logpop + uninsured,
                  lw, zero.policy = TRUE)


summary(err2)


```

## Aspatial SEM
```{r}

temp = df_map %>%
  mutate(z_lfpr = scale(laborforce_part_rate),
         z_pov = scale(poverty_rate),
         z_hs = scale(highschool_attainment_rate),
         z_inc.rt = scale(income_rate))


model5 <- '
  prosperity =~ z_lfpr + z_pov + z_hs + z_inc.rt

  retention_calc ~ pct_durable + pct_nondurable + pct_ag + pct_mine
  prosperity ~ pct_durable + pct_nondurable + pct_ag + pct_mine + a*retention_calc + logpop
  paam ~ logpop + uninsured + b*prosperity + pct_durable + pct_nondurable + pct_ag + pct_mine + c*retention_calc + age
  
  # indirect (a*b)
  ab := a*b
  
  # total
  total := c + (a*b)
'

model5.fit <- sem(model5, data = temp) 
summary(model5.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model5, data=temp)


```

## Sp Error SEM
```{r}
mi1 = df_map %>% drop_na(c(paam, retention_calc, pct_durable, pct_nondurable, pct_mine, pct_ag, pct_fire, pct_edmed, laborforce_part_rate, age, highschool_attainment_rate, poverty_rate, income_rate, logpop, uninsured))

sem_pvy = lavPredictY(fit, ynames = c("paam"),
                 xnames = c("pct_durable", "pct_nondurable", "pct_ag", "retention_calc", "logpop", "uninsured", "age", "z_lfpr", "z_pov", "z_hs", "z_inc.rt"))

sem_pvy2 = as.data.frame(sem_pvy)
sem_pvy3 = sem_pvy2$paam

mi2 <- cbind(mi1, sem_pvy) %>%
  mutate(r_paam = paam - paam.1)

temp_r = mi2 %>%
  select(r_paam) %>%
  st_drop_geometry() %>%
  mutate(to = row_number())

temp_place = mi2 %>%
  select(place) %>%
  st_drop_geometry() %>%
  mutate(from = row_number())

splagerr <- listw2sn(lw) %>%
  left_join(y=temp_r, by="to") %>%
  left_join(y=temp_place, by="from") %>%
  group_by(place) %>%
  dplyr::summarize(splagerr = weighted.mean(r_paam, weights, na.rm = TRUE))

mi3 = mi2 %>%
  left_join(y=splagerr, by="place") %>%
  mutate(z_lfpr = scale(laborforce_part_rate),
         z_pov = scale(poverty_rate),
         z_hs = scale(highschool_attainment_rate),
         z_inc.rt = scale(income_rate))

model6 <- '
  prosperity =~ z_lfpr + z_pov + z_hs + z_inc.rt

  retention_calc ~ pct_durable + pct_nondurable + pct_ag + pct_mine
  prosperity ~ pct_durable + pct_nondurable + pct_ag + pct_mine + a*retention_calc + logpop
  paam ~ logpop + uninsured + b*prosperity + pct_durable + pct_nondurable + pct_ag + pct_mine + c*retention_calc + age + splagerr
  
  # indirect (a*b)
  ab := a*b
  
  # total
  total := c + (a*b)
'

model6.fit <- sem(model6, data = mi3) 
summary(model6.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model6, data=mi3)


```

# Clean models (interact)
## OLS
```{r}

ols2 = lm(data = mi1, paam ~ retention_calc + retention_calc*pct_durable + retention_calc*pct_nondurable + retention_calc*pct_mine + retention_calc*pct_ag + pct_ag + pct_mine + pct_durable + pct_nondurable + laborforce_part_rate + age + highschool_attainment_rate + poverty_rate + income_rate + logpop + uninsured)


summary(ols2)

```

## Sp Error
```{r}

err2 = errorsarlm(data = mi1, paam ~ retention_calc + pct_durable + pct_nondurable + pct_mine + pct_ag + laborforce_part_rate + age + highschool_attainment_rate + poverty_rate + income_rate + logpop + uninsured + retention_calc*pct_durable + retention_calc*pct_nondurable + retention_calc*pct_mine + retention_calc*pct_ag,
                  lw, zero.policy = TRUE)


summary(err2)


```

## Aspatial SEM
```{r}

temp = df_map %>%
  mutate(z_lfpr = scale(laborforce_part_rate),
         z_pov = scale(poverty_rate),
         z_hs = scale(highschool_attainment_rate),
         z_inc.rt = scale(income_rate))


model5 <- '
  prosperity =~ z_lfpr + z_pov + z_hs + z_inc.rt

  retention_calc ~ pct_durable + pct_nondurable + pct_ag + pct_mine
  prosperity ~ pct_durable + pct_nondurable + pct_ag + pct_mine + a*retention_calc + logpop + retention_calc:pct_durable + retention_calc:pct_nondurable + retention_calc:pct_ag
  paam ~ logpop + uninsured + b*prosperity + pct_durable + pct_nondurable + pct_ag + pct_mine + c*retention_calc + age
  
  # indirect (a*b)
  ab := a*b
  
  # total
  total := c + (a*b)
'

model5.fit <- sem(model5, data = temp) 
summary(model5.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model5, data=temp)


```

## Sp Error SEM
```{r}
mi1 = df_map %>% drop_na(c(paam, retention_calc, pct_nondurable, pct_durable, pct_mine, pct_ag, pct_fire, pct_edmed, laborforce_part_rate, income_rate, age, highschool_attainment_rate, poverty_rate, logpop, uninsured))

sem_pvy = lavPredictY(fit, ynames = c("paam"),
                 xnames = c("pct_durable", "pct_nondurable", "pct_ag", "retention_calc", "logpop", "uninsured", "age", "z_lfpr", "z_pov", "z_hs", "z_inc.rt"))

sem_pvy2 = as.data.frame(sem_pvy)
sem_pvy3 = sem_pvy2$paam

mi2 <- cbind(mi1, sem_pvy) %>%
  mutate(r_paam = paam - paam.1)

temp_r = mi2 %>%
  select(r_paam) %>%
  st_drop_geometry() %>%
  mutate(to = row_number())

temp_place = mi2 %>%
  select(place) %>%
  st_drop_geometry() %>%
  mutate(from = row_number())

splagerr <- listw2sn(lw) %>%
  left_join(y=temp_r, by="to") %>%
  left_join(y=temp_place, by="from") %>%
  group_by(place) %>%
  dplyr::summarize(splagerr = weighted.mean(r_paam, weights, na.rm = TRUE))

mi3 = mi2 %>%
  left_join(y=splagerr, by="place") %>%
  mutate(z_lfpr = scale(laborforce_part_rate),
         z_pov = scale(poverty_rate),
         z_hs = scale(highschool_attainment_rate),
         z_inc.rt = scale(income_rate))

model6 <- '
  prosperity =~ z_lfpr + z_pov + z_hs + z_inc.rt

  retention_calc ~ pct_nondurable + pct_durable + pct_ag + pct_mine
  prosperity ~ pct_nondurable + pct_durable + pct_ag + pct_mine + a*retention_calc + logpop + retention_calc:pct_nondurable + retention_calc:pct_durable + retention_calc:pct_ag
  paam ~ logpop + uninsured + b*prosperity + pct_nondurable + pct_durable + pct_ag + pct_mine + c*retention_calc + age + splagerr
    
  # indirect (a*b)
  ab := a*b
  
  # total
  total := c + (a*b)
'

model6.fit <- sem(model6, data = mi3) 
summary(model6.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model6, data=mi3)


```



# clay - extra modeling

```{r include = FALSE}

hist(data$paam)


```

## ols
```{r}

ols1 = lm(data = df_map, paam ~ retention_calc + pct_ag + pct_mine + pct_mfg + laborforce_part_rate + age + highschool_attainment_rate + poverty_rate + income_rate + logpop + uninsured)

ols2 = lm(data = df_map, paam ~ retention_calc + retention_calc*pct_mfg + retention_calc*pct_mine + retention_calc*pct_ag + pct_ag + pct_mine + pct_mfg + laborforce_part_rate + age + highschool_attainment_rate + poverty_rate + income_rate + logpop + uninsured)


summary(ols1)
summary(ols2)


```
```{r}

temp =  ols1$resid


```



## sp autocorrelation
```{r}
mi1 = df_map %>% drop_na(c(paam, retention_calc, pct_mfg, pct_mine, pct_ag, pct_fire, pct_edmed, laborforce_part_rate, age, highschool_attainment_rate, poverty_rate, income_rate, logpop, uninsured))
w <- queen_weights(mi1)
mi1$r = ols1$resid
nb <- poly2nb(mi1, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(mi1$r,lw, zero.policy=TRUE)

lisa <- local_moran(w, mi1['r'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)

abc = sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])})

lisa_map = mi1 %>% filter(state_name != "Alaska" & state_name != "Hawaii")
plot(st_geometry(lisa_map), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "grey80", lwd=0.2)
title(main = "LISA, OLS residuals")
legend('bottomleft', cex=0.7, legend = lisa_labels, fill = lisa_colors)


```


## sp error
```{r}

nb <- poly2nb(mi1, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)

err1 = errorsarlm(data = mi1, paam ~ retention_calc + pct_ag + pct_mine + pct_mfg + laborforce_part_rate + age + highschool_attainment_rate + poverty_rate + income_rate + logpop + uninsured,
                  lw, zero.policy = TRUE)

err2 = errorsarlm(data = mi1, paam ~ retention_calc + retention_calc*pct_mfg + retention_calc*pct_mine + retention_calc*pct_ag + pct_ag + pct_mine + pct_mfg + laborforce_part_rate + age + highschool_attainment_rate + poverty_rate + income_rate + logpop + uninsured,
                  lw, zero.policy = TRUE)


summary(err1)
summary(err2)




```

## la grange / robust la grange
```{r}

ols1 = lm(data = mi1, paam ~ retention_calc + pct_ag + pct_mine + pct_mfg + laborforce_part_rate + age + highschool_attainment_rate + poverty_rate + income_rate + logpop + uninsured)
ols3 = lm(data = mi1, paam ~ autonomy_calc + pct_ag + pct_mine + pct_mfg + laborforce_part_rate + age + highschool_attainment_rate + poverty_rate + income_rate + logpop + uninsured)


nb <- poly2nb(mi1, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)


lm.LMtests(ols1, lw, test = c("LMerr","LMlag","RLMerr","RLMlag"), zero.policy = TRUE)
lm.LMtests(ols3, lw, test = c("LMerr","LMlag","RLMerr","RLMlag"), zero.policy = TRUE)

```


## sp autocorrelation

```{r}
mi1 = df_map %>% drop_na(c(paam, retention_calc, pct_mfg, pct_mine, pct_ag, pct_fire, pct_edmed, laborforce_part_rate, age, highschool_attainment_rate, poverty_rate, income_rate, logpop, uninsured))
mi1$r2 = err2$resid
w <- queen_weights(mi1)
nb <- poly2nb(mi1, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(mi1$r2,lw, zero.policy=TRUE)

lisa <- local_moran(w, mi1['r2'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)

abc = sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])})

lisa_map = mi1 %>% filter(state_name != "Alaska" & state_name != "Hawaii")
plot(st_geometry(lisa_map), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "grey80", lwd=0.2)
title(main = "LISA, spatial error (no SEM) residuals")
legend('bottomleft', cex=0.7, legend = lisa_labels, fill = lisa_colors)


```


## structural eq models (SEM)

```{r}
temp = df_map %>%
  select(paam, retention_calc, pct_mfg, pct_mine, pct_ag, pct_fire, pct_edmed, laborforce_part_rate, age, highschool_attainment_rate, poverty_rate, income_rate, logpop, uninsured) %>%
  st_drop_geometry() %>%
  drop_na()

cov(temp)

```
### simplified (no latent)

```{r}
# fully exogenous: pct_mfg as stand-in for industrial structure vars
# kinda exogenous (kinda endogenous): retention as predictor of prosperity but not mortality
# poverty as stand-in for prosperity latent (endogenous)
# PAAM as endogenous outcome
# logpop and uninsured as exogenous covariates
# no interactions


model1 <- '
  retention_calc ~ pct_ag
  poverty_rate ~ pct_ag + a*retention_calc + logpop
  paam ~ logpop + uninsured + b*poverty_rate + pct_ag + c*retention_calc
  
  # indirect (a*b)
  ab := a*b
  
  # total
  total := c + (a*b)
'



model1.fit <- sem(model1, data = df_map) 
summary(model1.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 


```
```{r}
lavaanPlot(name = "model1", model1.fit, coefs = TRUE)

```


### simplified 2 (no latent)

```{r}
# fully exogenous: all industrial structure vars
# kinda exogenous (kinda endogenous): retention as predictor of both prosperity and mortality
# poverty as stand-in for prosperity latent (endogenous)
# PAAM as endogenous outcome
# logpop and uninsured as exogenous covariates
# no interactions


model2 <- '
  retention_calc ~ pct_mfg + pct_ag + pct_mine
  poverty_rate ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop
  paam ~ logpop + uninsured + poverty_rate + pct_mfg + pct_ag + pct_mine + retention_calc'

model2.fit <- sem(model2, data = df_map) 
summary(model2.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model2, data=df_map)



```

```{r}
lavaanPlot(name = "model2", model2.fit, coefs = TRUE)

```


### latent (no interactions)

```{r}
# fully exogenous: all industrial structure vars
# kinda exogenous (kinda endogenous): retention as predictor of both prosperity and mortality
# all vars (except income_rate) in prosperity latent (endogenous)
# PAAM as endogenous outcome
# logpop and uninsured as exogenous covariates
# no interactions


model3 <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate + age

  retention_calc ~ pct_mfg + pct_ag + pct_mine
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop
  paam ~ logpop + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc
'

model3.fit <- sem(model3, data = df_map) 
summary(model3.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model3, data=df_map)

```

```{r}
lavaanPlot(name = "model3", model3.fit, coefs = TRUE)

```

### latent (w/ interactions)

```{r}
# fully exogenous: all industrial structure vars
# kinda exogenous (kinda endogenous): retention as predictor of both prosperity and mortality
# all vars (except income_rate) in prosperity latent (endogenous)
# PAAM as endogenous outcome
# logpop and uninsured as exogenous covariates
# w/ interactions


model4 <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate + age

  retention_calc ~ pct_mfg + pct_ag + pct_mine
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop + retention_calc:pct_mfg + retention_calc:pct_ag
  paam ~ logpop + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc
'

model4.fit <- sem(model4, data = df_map) 
summary(model4.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model4, data=df_map)

```

```{r}
lavaanPlot(name = "model4", model4.fit, coefs = TRUE)

```

### latent (age as covariate)


```{r}
# fully exogenous: all industrial structure vars
# kinda exogenous (kinda endogenous): retention as predictor of both prosperity and mortality
# all vars (except income_rate) in prosperity latent (endogenous)
# PAAM as endogenous outcome
# logpop and uninsured as exogenous covariates
# w/ interactions

# temp = df_map %>%
#   mutate(z_lfpr = scale(laborforce_part_rate),
#          z_pov = scale(poverty_rate),
#          z_hs = scale(highschool_attainment_rate),
#          z_inc.rt = scale(income_rate))
# 

model5 <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine
  prosperity ~ pct_mfg + pct_ag + pct_mine + a*retention_calc + logpop + retention_calc:pct_mfg + retention_calc:pct_ag
  paam ~ logpop + uninsured + b*prosperity + pct_mfg + pct_ag + pct_mine + c*retention_calc + age
  
    # indirect (a*b)
  ab := a*b
  
  # total
  total := c + (a*b)
'

model5.fit <- sem(model5, data = temp) 
summary(model5.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model5, data=temp)



```

```{r}
lavaanPlot(name = "model5", model5.fit, coefs = TRUE)

```

#### sp autocorrelation

```{r}
mi1 = df_map %>% drop_na(c(paam, retention_calc, pct_mfg, pct_mine, pct_ag, pct_fire, pct_edmed, laborforce_part_rate, age, highschool_attainment_rate, poverty_rate, logpop, uninsured))

sem_pvy = lavPredictY(fit, ynames = c("paam"),
                 xnames = c("pct_mfg", "pct_ag", "retention_calc", "logpop", "uninsured", "age", "laborforce_part_rate", "poverty_rate", "highschool_attainment_rate"))

sem_pvy2 = as.data.frame(sem_pvy)
sem_pvy3 = sem_pvy2$paam

mi2 <- cbind(mi1, sem_pvy) %>%
  mutate(r_paam = paam - paam.1)

temp = mi2$r_paam



```

```{r}
w <- queen_weights(mi2)
nb <- poly2nb(mi2, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(mi2$r_paam,lw, zero.policy=TRUE)

lisa <- local_moran(w, mi2['r_paam'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)

abc = sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])})

lisa_map = mi2 %>% filter(state_name != "Alaska" & state_name != "Hawaii")
plot(st_geometry(lisa_map), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "grey80", lwd=0.2)
title(main = "LISA, aspatial SEM residuals")
legend('bottomleft', cex=0.7, legend = lisa_labels, fill = lisa_colors)


```
```{r}
temp_r = mi2 %>%
  select(r_paam) %>%
  st_drop_geometry() %>%
  mutate(to = row_number())

temp_place = mi2 %>%
  select(place) %>%
  st_drop_geometry() %>%
  mutate(from = row_number())

splagerr <- listw2sn(lw) %>%
  left_join(y=temp_r, by="to") %>%
  left_join(y=temp_place, by="from") %>%
  group_by(place) %>%
  dplyr::summarize(splagerr = weighted.mean(r_paam, weights, na.rm = TRUE))

mi3 = mi2 %>%
  left_join(y=splagerr, by="place")
```

### SP latent (age as covariate)

```{r}
# spatial error on paam model (brute force)
# fully exogenous: all industrial structure vars
# kinda exogenous (kinda endogenous): retention as predictor of both prosperity and mortality
# all vars (except income_rate) in prosperity latent (endogenous)
# PAAM as endogenous outcome
# logpop and uninsured as exogenous covariates
# w/ interactions


model6 <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop + retention_calc:pct_mfg + retention_calc:pct_ag
  paam ~ logpop + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + age + splagerr
'

model6.fit <- sem(model6, data = mi3) 
summary(model6.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model6, data=mi3)


```

#### mediator analysis
```{r}
# spatial error on paam model (brute force)
# fully exogenous: all industrial structure vars
# kinda exogenous (kinda endogenous): retention as predictor of both prosperity and mortality
# all vars (except income_rate) in prosperity latent (endogenous)
# PAAM as endogenous outcome
# logpop and uninsured as exogenous covariates
# w/ interactions


model6b <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine
  prosperity ~ pct_mfg + pct_ag + pct_mine + a*retention_calc + logpop + retention_calc:pct_mfg + retention_calc:pct_ag
  paam ~ logpop + uninsured + b*prosperity + pct_mfg + pct_ag + pct_mine + c*retention_calc + age + splagerr
  
  # indirect (a*b)
  ab := a*b
  
  # total
  total := c + (a*b)
'

model6b.fit <- sem(model6b, data = mi3) 
summary(model6b.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model6b, data=mi3)



```

#### sp autocorrelation

```{r}

mi3a = mi3 %>% drop_na(c(splagerr)) %>% dplyr::select(-paam.1, -r_paam)


sem_pvy = lavPredictY(fit, ynames = c("paam"),
                 xnames = c("pct_mfg", "pct_ag", "retention_calc", "logpop", "uninsured", "age", "laborforce_part_rate", "poverty_rate", "highschool_attainment_rate", "splagerr"))


sem_pvy2 = as.data.frame(sem_pvy)
sem_pvy3 = sem_pvy2$paam

mi4 <- cbind(mi3a, sem_pvy) %>%
  mutate(r_paam = paam - paam.1)

temp = mi4$r_paam

w <- queen_weights(mi4)
nb <- poly2nb(mi4, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(mi4$r_paam,lw, zero.policy=TRUE)

lisa <- local_moran(w, mi4['r_paam'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)

abc = sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])})

lisa_map = mi2 %>% filter(state_name != "Alaska" & state_name != "Hawaii")
plot(st_geometry(lisa_map), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "grey80", lwd=0.2)
title(main = "LISA, spatial SEM residuals")
legend('bottomleft', cex=0.7, legend = lisa_labels, fill = lisa_colors)


```

```{r}

model5 <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop + retention_calc:pct_mfg + retention_calc:pct_ag
  paam ~ logpop + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + age
'

model5.fit <- sem(model5, data = df_map) 
summary(model5.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model5, data=df_map)

mi1 = df_map %>% drop_na(c(paam, retention_calc, pct_mfg, pct_mine, pct_ag, pct_fire, pct_edmed, laborforce_part_rate, age, highschool_attainment_rate, poverty_rate, logpop, uninsured))

sem_pvy = lavPredictY(fit, ynames = c("laborforce_part_rate", "poverty_rate", "highschool_attainment_rate"),
                 xnames = c("pct_mfg", "pct_ag", "retention_calc", "logpop"))

sem_pvy2 = as.data.frame(sem_pvy)
sem_pvy3 = sem_pvy2$paam

mi2 <- cbind(mi1, sem_pvy) %>%
  mutate(r_poverty_rate = poverty_rate - poverty_rate.1)

w <- queen_weights(mi2)
nb <- poly2nb(mi2, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(mi2$r_poverty_rate,lw, zero.policy=TRUE)

lisa <- local_moran(w, mi2['r_poverty_rate'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)

abc = sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])})

lisa_map = mi2 %>% filter(state_name != "Alaska" & state_name != "Hawaii")
plot(st_geometry(lisa_map), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "grey80", lwd=0.2)
title(main = "LISA, aspatial SEM residuals")
legend('bottomleft', cex=0.7, legend = lisa_labels, fill = lisa_colors)


model6 <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop + retention_calc:pct_mfg + retention_calc:pct_ag
  paam ~ logpop + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + age + splagerr
'

model6.fit <- sem(model6, data = mi3) 
summary(model6.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model6, data=mi3)


mi3a = mi3 %>% drop_na(c(splagerr)) %>% dplyr::select(-paam.1, -r_paam)



sem_pvy = lavPredictY(fit, ynames = c("laborforce_part_rate", "poverty_rate", "highschool_attainment_rate"),
                 xnames = c("pct_mfg", "pct_ag", "retention_calc", "logpop", "splagerr"))


sem_pvy2 = as.data.frame(sem_pvy)
sem_pvy3 = sem_pvy2$paam


mi4 <- cbind(mi3a, sem_pvy) %>%
  mutate(r_poverty_rate = poverty_rate - poverty_rate.1)

temp = mi4$r_poverty_rate

w <- queen_weights(mi4)
nb <- poly2nb(mi4, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(mi4$r_poverty_rate,lw, zero.policy=TRUE)

lisa <- local_moran(w, mi4['r_poverty_rate'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)

abc = sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])})

lisa_map = mi2 %>% filter(state_name != "Alaska" & state_name != "Hawaii")
plot(st_geometry(lisa_map), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "grey80", lwd=0.2)
title(main = "LISA, spatial SEM residuals")
legend('bottomleft', cex=0.7, legend = lisa_labels, fill = lisa_colors)




```

#### 3 lags

```{r}
model5 <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop + retention_calc:pct_mfg + retention_calc:pct_ag
  paam ~ logpop + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + age
'

fit <- cfa(model5, data=df_map)

ni1 = df_map %>% drop_na(c(paam, retention_calc, pct_mfg, pct_mine, pct_ag, pct_fire, pct_edmed, laborforce_part_rate, age, highschool_attainment_rate, poverty_rate, logpop, uninsured))

sem_pvy = lavPredictY(fit, ynames = c("paam"),
                 xnames = c("pct_mfg", "pct_ag", "retention_calc", "logpop", "uninsured", "age", "laborforce_part_rate", "poverty_rate", "highschool_attainment_rate"))

sem_pvy2 = as.data.frame(sem_pvy)
sem_pvy3 = sem_pvy2$paam

ni2 <- cbind(ni1, sem_pvy) %>%
  mutate(r_paam = paam - paam.1)

temp_r = ni2 %>%
  select(r_paam) %>%
  st_drop_geometry() %>%
  mutate(to = row_number())

temp_place = ni2 %>%
  select(place) %>%
  st_drop_geometry() %>%
  mutate(from = row_number())

splagerr <- listw2sn(lw) %>%
  left_join(y=temp_r, by="to") %>%
  left_join(y=temp_place, by="from") %>%
  group_by(place) %>%
  dplyr::summarize(splagerr = weighted.mean(r_paam, weights, na.rm = TRUE))

ni3 = ni2 %>%
  left_join(y=splagerr, by="place")

ni1 = df_map %>% drop_na(c(paam, retention_calc, pct_mfg, pct_mine, pct_ag, pct_fire, pct_edmed, laborforce_part_rate, age, highschool_attainment_rate, poverty_rate, logpop, uninsured))

sem_pvyz = lavPredictY(fit, ynames = c("laborforce_part_rate", "poverty_rate", "highschool_attainment_rate"),
                 xnames = c("pct_mfg", "pct_ag", "retention_calc", "logpop"))

sem_pvyz2 = as.data.frame(sem_pvyz)
sem_pvyz3 = sem_pvyz2$paam

ni2 <- cbind(ni1, sem_pvyz) %>%
  mutate(r_paam = ((1*laborforce_part_rate) - (1*laborforce_part_rate.1) + (-1.035*poverty_rate) - (-1.035*poverty_rate.1) + (0.961*highschool_attainment_rate) - (0.961*highschool_attainment_rate.1)))

         
temp_r = ni2 %>%
  select(r_paam) %>%
  st_drop_geometry() %>%
  mutate(to = row_number())

temp_place = ni2 %>%
  select(place) %>%
  st_drop_geometry() %>%
  mutate(from = row_number())

splagerrz <- listw2sn(lw) %>%
  left_join(y=temp_r, by="to") %>%
  left_join(y=temp_place, by="from") %>%
  group_by(place) %>%
  dplyr::summarize(splagerrz = weighted.mean(r_paam, weights, na.rm = TRUE))

ni1 = df_map %>% drop_na(c(paam, retention_calc, pct_mfg, pct_mine, pct_ag, pct_fire, pct_edmed, laborforce_part_rate, age, highschool_attainment_rate, poverty_rate, logpop, uninsured))

sem_pvyzz = lavPredictY(fit, ynames = c("retention_calc"),
                 xnames = c("pct_mfg", "pct_ag"))

sem_pvyzz2 = as.data.frame(sem_pvyzz)
sem_pvyzz3 = sem_pvyzz2$paam

ni2 <- cbind(ni1, sem_pvyzz) %>%
  mutate(r_paam = retention_calc - retention_calc.1)

temp_r = ni2 %>%
  select(r_paam) %>%
  st_drop_geometry() %>%
  mutate(to = row_number())

temp_place = ni2 %>%
  select(place) %>%
  st_drop_geometry() %>%
  mutate(from = row_number())

splagerrzz <- listw2sn(lw) %>%
  left_join(y=temp_r, by="to") %>%
  left_join(y=temp_place, by="from") %>%
  group_by(place) %>%
  dplyr::summarize(splagerrzz = weighted.mean(r_paam, weights, na.rm = TRUE))


ni3 = ni2 %>%
  left_join(y=splagerr, by="place") %>%
  left_join(y=splagerrz, by="place") %>%
  left_join(y=splagerrzz, by="place")

model6.3 <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine + splagerrzz
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop + retention_calc:pct_mfg + retention_calc:pct_ag + splagerrz
  paam ~ logpop + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + age + splagerr
'

model6.3.fit <- sem(model6.3, data = ni3) 
summary(model6.3.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model6.3, data=ni3)

ni3a = ni3 %>% drop_na(c(splagerrz))

sem_pvy = lavPredictY(fit, ynames = c("laborforce_part_rate", "poverty_rate", "highschool_attainment_rate"),
                 xnames = c("pct_mfg", "pct_ag", "retention_calc", "logpop", "splagerrz"))



sem_pvy2 = as.data.frame(sem_pvy)
sem_pvy3 = sem_pvy2$paam


mi4 <- cbind(ni3a, sem_pvy) %>%
  mutate(r_poverty_rate = poverty_rate - poverty_rate.1)


w <- queen_weights(mi4)
nb <- poly2nb(mi4, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)
lw$weights[5]
moran.test(mi4$r_poverty_rate,lw, zero.policy=TRUE)

lisa <- local_moran(w, mi4['r_poverty_rate'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)

abc = sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])})

lisa_map = mi2 %>% filter(state_name != "Alaska" & state_name != "Hawaii")
plot(st_geometry(lisa_map), 
     col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), 
     border = "grey80", lwd=0.2)
title(main = "LISA, spatial SEM residuals")
legend('bottomleft', cex=0.7, legend = lisa_labels, fill = lisa_colors)


```


### separate models (OLS)

```{r}

df_map2 = df_map %>%
  mutate(prosperity = 1*laborforce_part_rate + -1.035*poverty_rate + 0.961*highschool_attainment_rate)


ols11a = lm(data = df_map2, retention_calc ~ pct_mfg + pct_ag + pct_mine)
ols11b = lm(data = df_map2, prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop)
ols11c = lm(data = df_map2, paam ~ logpop + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + age)

ols12a = lm(data = df_map2, retention_calc ~ pct_mfg + pct_ag + pct_mine)
ols12b = lm(data = df_map2, prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop + retention_calc*pct_mfg + retention_calc*pct_ag + retention_calc*pct_mine + retention_calc*pct_fire + retention_calc*pct_edmed)
ols12c = lm(data = df_map2, paam ~ logpop + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + age)


summary(ols11a)
summary(ols11b)
summary(ols11c)
summary(ols12a)
summary(ols12b)
summary(ols12c)


```


### separate models (sp error)

```{r}

df_map2 = df_map %>%
  mutate(prosperity = 1*laborforce_part_rate + -1.035*poverty_rate + 0.961*highschool_attainment_rate)

nb <- poly2nb(df_map2, queen=TRUE)
lw <- nb2listw(nb, style="W", zero.policy=TRUE)

sem11a = errorsarlm(data = df_map2, retention_calc ~ pct_mfg + pct_ag + pct_mine,
                  lw, zero.policy = TRUE)
sem11b = errorsarlm(data = df_map2, prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop,
                  lw, zero.policy = TRUE)
sem11c = errorsarlm(data = df_map2, paam ~ logpop + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + age,
                  lw, zero.policy = TRUE)

sem12a = errorsarlm(data = df_map2, retention_calc ~ pct_mfg + pct_ag + pct_mine,
                  lw, zero.policy = TRUE)
sem12b = errorsarlm(data = df_map2, prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop + retention_calc*pct_mfg + retention_calc*pct_ag + retention_calc*pct_mine + retention_calc*pct_fire + retention_calc*pct_edmed,
                  lw, zero.policy = TRUE)
sem12c = errorsarlm(data = df_map2, paam ~ logpop + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + age,
                  lw, zero.policy = TRUE)


summary(sem11a)
summary(sem11b)
summary(sem11c)
summary(sem12a)
summary(sem12b)
summary(sem12c)


```

### with and w/o rural dummy

```{r}

df_map3 = df_map %>% mutate(metro = ifelse(metro_nonmetro == "metro", 1, 0))

model5nr <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine + metro
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop + metro + retention_calc:pct_mfg + retention_calc:pct_ag
  paam ~ logpop + metro + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + age
'

model5.fit <- sem(model5, data = df_map3) 
# summary(model5.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit1 <- cfa(model5, data=df_map3)


model5r <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine + metro
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop + metro + retention_calc:pct_mfg + retention_calc:pct_ag
  paam ~ logpop + metro + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + age
'

model5r.fit <- sem(model5r, data = df_map3) 
# summary(model5r.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit2 <- cfa(model5r, data=df_map3)

export_summs(fit1, fit2, scale = TRUE, transform.response = TRUE)


```

### with and w/o value added

```{r}

df_map3 = df_map %>% mutate(metro = ifelse(metro_nonmetro == "metro", 1, 0))

model5nr <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine + metro
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop + metro + retention_calc:pct_mfg + retention_calc:pct_ag
  paam ~ logpop + metro + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + age
'

model5.fit <- sem(model5, data = df_map3) 
summary(model5.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit1 <- cfa(model5, data=df_map3)


model5r <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine + metro + va_to_output
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + va_to_output + logpop + metro + retention_calc:pct_mfg + retention_calc:pct_ag
  paam ~ logpop + metro + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + va_to_output + age
'

model5r.fit <- sem(model5r, data = df_map3) 
summary(model5r.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit2 <- cfa(model5r, data=df_map3)


```

### with and w/o lags

```{r}

model5 <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop + retention_calc:pct_mfg + retention_calc:pct_ag
  paam ~ logpop + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + age
'

model5.fit <- sem(model5, data = df_map) 
summary(model5.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model5, data=df_map)

model6 <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop + retention_calc:pct_mfg + retention_calc:pct_ag
  paam ~ logpop + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + age + splagerr
'

model6.fit <- sem(model6, data = mi3) 
summary(model6.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model6, data=mi3)


model6.3 <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine + splagerrzz
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop + retention_calc:pct_mfg + retention_calc:pct_ag + splagerrz
  paam ~ logpop + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + age + splagerr
'

model6.3.fit <- sem(model6.3, data = ni3) 
summary(model6.3.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model6.3, data=ni3)

```

### with and w/o value added

```{r}

df_map3 = df_map %>% mutate(metro = ifelse(metro_nonmetro == "metro", 1, 0))

model5nr <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine + metro
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop + metro + retention_calc:pct_mfg + retention_calc:pct_ag
  paam ~ logpop + metro + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + age
'

model5.fit <- sem(model5, data = df_map3) 
summary(model5.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit1 <- cfa(model5, data=df_map3)


model5r <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine + metro + emp_to_output
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + emp_to_output + logpop + metro + retention_calc:pct_mfg + retention_calc:pct_ag
  paam ~ logpop + metro + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc + emp_to_output + age
'

model5r.fit <- sem(model5r, data = df_map3) 
summary(model5r.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit2 <- cfa(model5r, data=df_map3)


```

### compare latent to pre-created index

```{r}

df_map3t = df_map %>%
  mutate(pros = 1*laborforce_part_rate + -1.035*poverty_rate + 0.953*highschool_attainment_rate)

model3t <- '
  prosperity =~ laborforce_part_rate + poverty_rate + highschool_attainment_rate

  retention_calc ~ pct_mfg + pct_ag + pct_mine
  prosperity ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop
  paam ~ logpop + uninsured + prosperity + pct_mfg + pct_ag + pct_mine + retention_calc
'

model3t.fit <- sem(model3t, data = df_map3t) 
summary(model3t.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model3t, data=df_map3t)

model3t <- '
  retention_calc ~ pct_mfg + pct_ag + pct_mine
  pros ~ pct_mfg + pct_ag + pct_mine + retention_calc + logpop
  paam ~ logpop + uninsured + pros + pct_mfg + pct_ag + pct_mine + retention_calc
'

model3t.fit <- sem(model3t, data = df_map3t) 
summary(model3t.fit, rsq = TRUE, fit.measures = TRUE, standardized = TRUE) 

fit <- cfa(model3t, data=df_map3t)

```




