---
title: "Relevant preliminary results for NIFA-2024 A1661 circularity grant application"
format:
  html:
    toc: true
    toc-depth: 2
    embed-resources: true
    page-layout: full
    code-fold: true
---

# Imports

```{r preamble, include = FALSE}

# additional library list
library(logger)
library(tidyverse)
# library(correlation)
# library(modelsummary)
# library(kableExtra)
# library(broom)
# library(patchwork)
library(ggthemes)
# library(ggridges)
# library(viridis)
library(tmap)
library(tigris)
library(skimr)
# library(gtsummary)
library(RColorBrewer)

# renv::install("antonbabkin/pubdata@rpkg")

# scripts
source("projects/nifa2024circ/circularity_functions.R", local = (circularity <- new.env()))
source("R/dataprep_bea_io.R", local = (bea_io <- new.env()))
source("R/place_io.R", local = (place_io <- new.env()))
source("R/basic_utilities.R", local = (util <- new.env()))
source("R/dataprep.R", local = (dataprep <- new.env()))
source("R/geography.R", local = (geography <- new.env()))

# chunk behavior 
# knitr::opts_chunk$set(warning = FALSE, message = FALSE, render = knitr::normal_print) 

# nonscientific notation
# options(scipen=999)

# log verbosity 
log_threshold(WARN)

theme_set(theme_minimal())

# mapping modality 
tmap_mode("plot")

# data parameters

params = list(
  circularity_year = 2012,
  end_year = 2016,
  base_year = 2012,
  ilevel = "det",
  bus_data = "cbp_imp",
  trim = "^(60|66|69|78)|(999)$",
  cluster_subset = NULL,
  spatial = TRUE,
  cbsa_year = 2013, # (Delineations available for years 2003:2009, 2013, 2015, 2017, 2018, 2020)
  
  circ_factors = c("production_capacity", "trade_capacity", "retention", "production_dependency", "trade_dependency", "autonomy", "trade_balance", "trade_openness"),
  
  reg_factors = c("employment_gr", "payroll_gr", "wage_gr") 
)

```




# national I-O over time

## foreign trade

```{r}

d1 <- 1997:2021 %>%
  map(function(y) {
    pubdata::bea_io_get(glue("2022_sup_sec_{y}")) %>%
      filter(col_name %in% c("Total Commodity Output", "Imports")) %>%
      mutate(year = y, .before = 1)
  }) %>%
  bind_rows()

ggplot(d1) +
  geom_line(aes(year, value, color = col_name)) +
  facet_wrap("row_name", scales = "free_y") +
  theme(axis.text.y = element_blank(), legend.position = "none") +
  labs(title = "import")

d2 <- 1997:2021 %>%
  map(function(y) {
    pubdata::bea_io_get(glue("2022_use_sec_{y}")) %>%
      filter(col_name %in% c("Total Intermediate", "Exports of goods and services")) %>%
      mutate(year = y, .before = 1)
  }) %>%
  bind_rows()

ggplot(d2) +
  geom_line(aes(year, value, color = col_name)) +
  facet_wrap("row_name", scales = "free_y") +
  theme(axis.text.y = element_blank(), legend.position = "none") +
  labs(title = "export")


df <- bind_rows(d1, d2) %>%
  pivot_wider(id_cols = c(year, row_code, row_name), names_from = "col_name") %>%
  mutate(import = Imports / `Total Intermediate`,
         export = `Exports of goods and services` / `Total Commodity Output`)

df %>%
  select(year, row_name, import, export) %>%
  pivot_longer(c(import, export)) %>%
  ggplot() +
  geom_line(aes(year, value, color = name)) +
  facet_wrap("row_name", scale = "free_y") +
  theme(axis.text.y = element_blank())

df %>%
  filter(row_code %in% c("11", "21", "31G"))%>%
  select(year, row_name, import, export) %>%
  pivot_longer(c(import, export)) %>%
  ggplot() +
  geom_line(aes(year, value, color = name)) +
  facet_wrap("row_name") +
  theme(legend.position = "bottom")
```


## input structure


```{r}
# biggest input commodities

commodities <- pubdata::bea_io_get("2022_use_sec_1997") %>%
  filter(core_matrix) %>%
  distinct(row_name) %>%
  pull()

df <- 1997:2021 %>%
  map(function(y) {
    pubdata::bea_io_get(glue("2022_use_sec_{y}")) %>%
      filter(row_name %in% c(commodities, "Total Intermediate", "Total industry output (basic prices)"),
             col_name == "Manufacturing") %>%
      select(row_code, row_name, value) %>%
      mutate(year = y, .before = 1) 
  }) %>%
  bind_rows() %>%
  group_by(year) %>%
  mutate(tot_int = max(if_else(row_name == "Total Intermediate", value, NA), na.rm = TRUE),
         tot_out = max(if_else(row_name == "Total industry output (basic prices)", value, NA), na.rm = TRUE),
         int_sh = tot_int / tot_out,
         com_sh = value / tot_int)

d1 <- df %>%
  mutate(com_sh = round(com_sh, 4)) %>%
  pivot_wider(id_cols = c(row_code, row_name), values_from = com_sh, names_from = year) %>%
  filter(row_name %in% commodities)

df %>%
  filter(row_code %in% c("11", "21", "31G", "PROF", "FIRE", "51")) %>%
  ggplot() +
  geom_line(aes(year, com_sh, color = row_name))


df %>%
  filter(row_code %in% c("11", "21", "31G", "PROF", "FIRE", "51")) %>%
  filter(year %in% c(1997, 2012)) %>%
  arrange(row_name, year)
```




# circularity by rural-urban and data source

```{r}
df_cbsa <- geography$pubdata$get_cbsa_delin_df(params$cbsa_year) %>%
  rename_with(tolower) %>%
  mutate(place = paste0(state_code, county_code)) %>%
  select(place, metro_micro)

df <- bind_rows(
  circularity$call_extraction_table(params$base_year, bus_data = "cbp_imp", ilevel = "det", spatial = FALSE) %>%
    circularity$calculate_circularity_metrics() %>%
    mutate(bus_data = "cbp_imp", .before = 1),
  circularity$call_extraction_table(params$base_year, bus_data = "infogroup", ilevel = "det", spatial = FALSE) %>%
    circularity$calculate_circularity_metrics() %>%
    mutate(bus_data = "infogroup", .before = 1)
) %>%
  left_join(df_cbsa, "place") %>%
  mutate(rural = if_else(metro_micro == "metro", "metro", "nonmetro", missing = "nonmetro"))

df %>%
  summarize(across(production_capacity:trade_openness, \(x) round(mean(x), 3)), .by = c("bus_data", "rural")) %>%
  pivot_longer(production_capacity:trade_openness) %>%
  pivot_wider(id_cols = name, names_from = c(bus_data, rural))
  

```

# circularity by data source

```{r}
df_cbsa <- geography$pubdata$get_cbsa_delin_df(params$cbsa_year) %>%
  rename_with(tolower) %>%
  mutate(place = paste0(state_code, county_code)) %>%
  select(place, metro_micro)

df <- bind_rows(
  circularity$call_extraction_table(params$base_year, bus_data = "cbp_raw", ilevel = "det", spatial = TRUE) %>%
    circularity$calculate_circularity_metrics() %>%
    mutate(bus_data = "cbp_raw", .before = 1),
  circularity$call_extraction_table(params$base_year, bus_data = "cbp_imp", ilevel = "det", spatial = TRUE) %>%
    circularity$calculate_circularity_metrics() %>%
    mutate(bus_data = "cbp_imp", .before = 1),
  circularity$call_extraction_table(params$base_year, bus_data = "infogroup", ilevel = "det", spatial = TRUE) %>%
    circularity$calculate_circularity_metrics() %>%
    mutate(bus_data = "infogroup", .before = 1)
) %>%
  left_join(df_cbsa, "place") %>%
  mutate(rural = if_else(metro_micro == "metro", FALSE, TRUE, missing = TRUE))

df1 <- df %>%
  st_drop_geometry()

# example where ordering cbp_raw < cbp_imp < infogroup does not hold
df1 %>%
  pivot_wider(id_cols = place, names_from = bus_data, values_from = retention) %>%
  filter(str_sub(place, 1, 2) == "55", cbp_imp > infogroup)

ggplot(df) +
  geom_density(aes(retention, color = bus_data)) +
  geom_point(aes(retention, 0, color = bus_data), data = filter(df, place == "55013"))



```

## trade_balance

```{r}
df1 %>%
  pivot_wider(id_cols = place, names_from = bus_data, values_from = trade_balance) %>%
  filter(str_sub(place, 1, 2) == "55", cbp_imp > infogroup)

df1 %>%
  pivot_wider(id_cols = place, names_from = bus_data, values_from = trade_balance) %>%
  filter(str_sub(place, 1, 2) == "55", cbp_imp * infogroup < 0) %>%
  mutate(diff = abs(infogroup - cbp_imp)) %>%
  arrange(desc(diff))

for (x in names(select(df1, production_capacity:trade_openness))) {
  p <- ggplot(df1) +
    geom_density(aes(.data[[x]], color = bus_data)) +
    geom_point(aes(.data[[x]], 0, color = bus_data, shape = place), data = filter(df, place %in% c("31171", "31071")))
  print(p)
}



```




## final example: Thomas and Garfield, Nebraska

```{r}
st = "NE"
highlight_counties = c("31071", "31171")

dh <- df %>%
  filter(bus_data == "cbp_imp", place %in% highlight_counties) %>%
  select(place, geometry)

d <- df1 %>%
  filter(bus_data != "cbp_raw") %>%
  mutate(bus_data = case_match(bus_data, "cbp_imp" ~ "Imputed CBP", "infogroup" ~ "InfoGroup"))
p <- ggplot(d) +
  geom_density(aes(trade_balance, color = bus_data)) +
  geom_point(aes(trade_balance, 0, color = bus_data, shape = place), size = 3, data = filter(d, place %in% highlight_counties)) +
  labs(color = "non-farm data", shape = "county", title = "Trade balance density") +
  xlab(NULL) + ylab(NULL)

# ggsave(util$mkdir("projects/nifa2024circ/output/trade_bal_density.png"), p, bg = "white", width = 6, height = 4)
p


tmap_mode("plot")
tm <- tmap_arrange(
  df %>%
    filter(STATE == st, bus_data == "cbp_imp") %>%
    tm_shape() +
    tm_fill(
      "trade_balance",
      style = "cont",
      midpoint = 0,
      breaks = seq(-0.5, 0.5, 0.5),
      contrast = c(0, 1),
      palette = rev(brewer.pal(9, "RdBu")),
      legend.show = FALSE
    ) +
    tm_shape(dh) + tm_borders(lwd = 3) + tm_text("place", ymod = 1.5) +
    tm_layout(
      title = "Imputed CBP",
      title.position = c("right", "top"),
      frame = FALSE
    ),
  df %>%
    filter(STATE == st, bus_data == "infogroup") %>%
    tm_shape() +
    tm_fill(
      "trade_balance",
      style = "cont",
      midpoint = 0,
      breaks = seq(-0.5, 0.5, 0.5),
      contrast = c(0, 1),
      palette = rev(brewer.pal(9, "RdBu")),
      title = "Trade balance",
      legend.show = TRUE,
      legend.is.portrait = FALSE
    ) +
    tm_shape(dh) + tm_borders(lwd = 3) + tm_text("place", ymod = 1.5) +
    tm_layout(
      title = "InfoGroup",
      title.position = c("right", "top"),
      frame = FALSE
    ),
  outer.margins = 0
)

# tmap_save(tm, util$mkdir("projects/nifa2024circ/output/nebraska.png"), height = 7, width = 7)
tm
```



# output change counterfactuals

customized functions

```{r}

#' convert industry output to commodity output
output_i2c <- function(df) {
  
  #BEA supply matrix 
  smat <- bea_io$call_supply_matrix(year = year, 
                                    ilevel = ilevel, 
                                    condense = TRUE)
  cmat <- sweep(smat, 2, colSums(smat), "/")
  
  df <- df %>% 
    util$long2matrix()

  df <- cmat %*% df
  
  df %>% 
    as.data.frame.table() %>% 
    `colnames<-`(c("indcode", "place", "output"))
}

#' output, supply and demand
outsupdem <- function(output_ind,
                      output_com,
                      ilevel = c("det", "sum", "sec")) {
  
  ilevel <- match.arg(ilevel)

  
  # outputs in matrix form for multiplication
  output_ind_mat <- util$long2matrix(output_ind)
  output_com_mat <- util$long2matrix(output_com)
  
  # non-zero industries
  pos_ind_names <- rownames(output_ind_mat)[rowSums(output_ind_mat) > 0]
  zero_ind_names <- base::setdiff(rownames(output_ind_mat), pos_ind_names)
  if (length(zero_ind_names) > 0) {
    log_debug(glue("{length(zero_ind_names)} industries have zero output: {str_c(zero_ind_names, collapse = ',')}"))
  }
  
  # domestic intermediate use share of total use
  # total_use == total_supply, I-O table accounting identity
  total_use <- bea_io$call_commodity_supply(year = year, ilevel = ilevel, condense = TRUE)[, 1]
  # in the use table only add up columns with positive industry output
  dom_int_use <- bea_io$call_use_matrix(year = year, ilevel = ilevel, condense = TRUE)[, pos_ind_names] %>%
    rowSums()
  stopifnot(all(names(total_use) == names(dom_int_use)))
  dom_int_use_share <- dom_int_use / total_use
  dom_int_use_share[dom_int_use == 0 | total_use == 0] <- 0
  # tibble(indcode = names(total_use), dom_int_use, total_use, dom_int_use_share) %>% View()
  
  # county-commodity supply = commodity_output * use_share
  stopifnot(all(rownames(output_com_mat) == names(dom_int_use_share)))
  supply_mat <- sweep(output_com_mat, 1, dom_int_use_share, "*")
  
  # producer price domestic output share of total supply
  total_supply <- total_use
  # in the supply table only add up columns with positive industry output
  dom_pp_out <- bea_io$call_supply_matrix(year = year, ilevel = ilevel, condense = TRUE)[, pos_ind_names] %>%
    rowSums()
  dom_pp_out_share <- dom_pp_out / total_supply
  dom_pp_out_share[dom_pp_out == 0 | total_supply == 0] <- 0
  # tibble(indcode = names(total_supply), dom_pp_out, total_supply, dom_pp_out_share) %>% View()

  # county-commodity demand = B-mat * industry_output * dom_pp_share
  bmat <- bea_io$call_b_matrix(year = year, ilevel = ilevel, condense = TRUE)
  stopifnot(all(colnames(bmat) == rownames(output_ind_mat)))
  demand_mat <- bmat %*% output_ind_mat
  stopifnot(all(rownames(demand_mat) == names(dom_pp_out_share)))
  demand_mat <- sweep(demand_mat, 1, dom_pp_out_share, "*")
  
  # bind output, supply and demand together into single dataframe
  df_supply <- supply_mat %>%
    as_tibble(rownames = "indcode") %>%
    pivot_longer(!indcode, names_to = "place", values_to = "supply")
  df_demand <- demand_mat %>%
    as_tibble(rownames = "indcode") %>%
    pivot_longer(!indcode, names_to = "place", values_to = "demand")
  stopifnot(nrow(output_com) == nrow(df_supply))
  stopifnot(nrow(output_com) == nrow(df_demand))
  df <- inner_join(output_com, df_supply, join_by(indcode, place), relationship = "one-to-one") %>%
    inner_join(df_demand, join_by(indcode, place), relationship = "one-to-one")

  df
}

# circularity indicators
circ <- function(df_outsupdem) {
  df_outsupdem %>%
    mutate(exsup = pmax(0, supply - demand), exdem = pmax(0, demand - supply)) %>%
    summarize(across(c(output, supply, demand, exsup, exdem), sum), .by = "place") %>%
    mutate(
      production_capacity = supply / output,
      trade_capacity = exsup / output,
      retention = 1 - exsup / supply,
      production_dependency = demand / output,
      trade_dependency = exdem / output,
      autonomy = 1 - exdem / demand,
      trade_balance = (exsup - exdem) / output,
      trade_openness = (exsup + exdem) / output
    )
}



```


Compute for all counties, all industries.

```{r}
year = 2012
ilevel = "det"
bus_data = "cbp_imp"

output_ind0 <- place_io$call_output(year = year, class_system = "industry", ilevel = ilevel, bus_data = bus_data) %>%
  mutate(output_tot = sum(output), .by = "place")
output_com0 <- output_i2c(output_ind0)
osd0 <- outsupdem(output_ind0, output_com0, ilevel = ilevel)
df_circ0 <- circ(osd0)

df_allind <- list()
for (industry in unique(output_ind0$indcode)) {

# industry = "111200"

  output_ind1 <- output_ind0 %>%
    mutate(output = if_else(indcode == industry, output + 0.1 * output_tot, output))
  output_com1 <- output_i2c(output_ind1)
  osd1 <- outsupdem(output_ind1, output_com1, ilevel = ilevel)
  df_circ1 <- circ(osd1)
  
  df_circ_diff <- (select(df_circ1, !place) - select(df_circ0, !place)) %>%
    mutate(place = df_circ1$place, .before = 1)
  
  df_allind[[industry]] <- df_circ_diff
}
df_diff_allind <- bind_rows(df_allind, .id = "indcode")

df_circ0 %>% select(production_capacity:trade_openness) %>% skim()
df_diff_allind %>% filter(indcode == "1111A0") %>% select(production_capacity:trade_openness) %>% skim()

for (x in names(select(df_circ0, production_capacity:trade_openness))) {
  # df_circ_diff <- df_diff_allind %>% filter(indcode == "1111A0")
  # df_circ_diff <- df_diff_allind %>% filter(place == "55081") # Monroe
  df_circ_diff <- df_diff_allind %>% filter(place == "31171")
  qs <- quantile(df_circ_diff[[x]], c(0.01, 0.99))
  p <- df_circ_diff %>%
    filter(between(.data[[x]], qs[1], qs[2])) %>%
    ggplot() +
    geom_histogram(aes(.data[[x]]), alpha = 0.2) + 
    geom_density(aes(.data[[x]]))
  print(p)
}

```

### retention response in Garfield and Thomas

```{r}
df_diff_allind %>% 
  filter(place %in% c("31171", "31071")) %>%
  filter(between(retention, -0.1, 0.1)) %>%
  ggplot() +
  geom_density(aes(retention, color = place)) +
  theme(legend.position = "inside", legend.position.inside = c(0.9, 0.9)) +
  labs(color = "county", title = "Retention density") +
  xlab(NULL) + ylab(NULL)
```


# out-sup-dem examples

## table

```{r}
# Dairy and Cheese 
industries = c("112120", "311513")
counties = c("55117","55081")

# Animal Feed and Dairy
# industries = c("311119", "112120")
# counties = c("17001", "17027")

# Plastics and Medical Device Manufacturing
#industries = c("^3261", "339112")
#counties = c("27053","27025")


df_example = list()

for (industry in 1:2){
df_example[[industry]] <- circularity$call_extraction_table(year = params$circularity_year,
                                    bus_data = params$bus_data,
                                    ilevel = params$ilevel,
                                    cluster_subset = industries[industry],
                                    from_cache = FALSE,
                                    to_cache = FALSE,
                                    overwrite = FALSE,
                                    spatial = TRUE) |> 
  mutate(
    industry = industries[industry],
    id = paste0(NAME, " county, ", STATE, " (", place, ")"),
    locally_met = pmin(intermediate_supply, intermediate_demand)
  ) 
}


df_12 <- rbind(df_example[[1]], df_example[[2]]) |>
  filter(place %in% counties) |>
  mutate(across(where(is.numeric), round))|> 
  arrange(place, industry) |>
  st_drop_geometry()


df_12 |> 
  select(id, industry, gross_output, intermediate_supply, intermediate_demand) 

df_12 |> 
  select(id, industry, intermediate_supply, intermediate_demand, locally_met, net_supply, net_demand)

```

## map

```{r}

for(industry in 1:2){

df_example[[industry]] %>% 
  mutate(log_supdem = sign(net_supply-net_demand) * log10(1 + pmax(net_supply, net_demand))) |> 
  shift_geometry() %>% {(
      tm_shape(.) +
        tm_polygons(
          title = str_replace_all(industries[industry], "_", " ") %>% str_to_title(),
          col = "log_supdem",
          border.alpha = 0.0,
          style = "cont",
          midpoint = 0,
          breaks = seq(-10, 10, 2),
          palette = rev(brewer.pal(9, "RdBu"))) +
        group_by(., STATE_CODE) %>% summarise() %>% tm_shape() +
        tm_layout(
          legend.title.size = .8,
          legend.text.size = .5,
          legend.position = c("LEFT", "TOP"),
          frame = F,
          fontface = 2 ) +
        tm_borders(lwd = 1.5) ) %>% 
      print()
  }
} 

    
```

# circularity - growth correlations

## Data

```{r}


df_busdata<-list()

for (year in c(params$end_year, params$base_year)){
    pay <- dataprep$call_county_payroll(
      year = year, 
      bus_data = "cbp_imp")
    
    df_busdata[[paste0("",year)]] <- dataprep$call_county_employment(
      year = year, 
      bus_data = params$bus_data) |> 
      inner_join(pay) |> 
      mutate(
        wage = 1000 * payroll / employment
      )
}

df_busdata <- inner_join(df_busdata[[1]], df_busdata[[2]], by = join_by(place), suffix = c(".current", ".base")) |> 
  mutate(
    employment_gr=(employment.current - employment.base)/(.5 * employment.current + .5 * employment.base),
    payroll_gr=(payroll.current - payroll.base)/(.5 * payroll.current + .5 * payroll.base),
    wage_gr=(wage.current - wage.base)/(.5 * wage.current + .5 * wage.base),
  )

# Bring in the inputs to circularity calculations
  
df_circ <- circularity$call_extraction_table(year = params$circularity_year,
                                    bus_data = params$bus_data,
                                    ilevel = params$ilevel,
                                    cluster_subset = params$cluster_subset,
                                    from_cache = FALSE,
                                    to_cache = FALSE,
                                    overwrite = FALSE,
                                    spatial = params$spatial)

# Calculate circularity metrics

df_circ <- circularity$calculate_circularity_metrics(df_circ, cluster_subset = params$cluster_subset )

# Bring in CBSA data for metro/non-metro definitions

df_cbsa <- geography$pubdata$get_cbsa_delin_df(params$cbsa_year)%>%
  select(STATE_CODE, COUNTY_CODE, METRO_MICRO) 

df <- left_join(df_circ,df_busdata, by = join_by(place)) |> 
  left_join(df_cbsa, by = join_by(STATE_CODE, COUNTY_CODE)) |> 
  mutate(cbsa_rural_category = if_else(METRO_MICRO == "metro", FALSE, TRUE, missing = TRUE))

df_main <- df
```



## Correlation tables
```{r}

# 8 by 8 
# be sparing, limit overlap with Sara/Clayton results elsewhere
# add employment growth, payroll growth, wage growth against the 8 circularity indicators
# look for association of circularity with positive economic outcomes beyond random chance

correlations <- matrix(nrow = length(params$circ_factors) + 1, ncol = 0)
for (economic_measure in params$reg_factors) {
  temp_correlations = matrix(nrow=3, ncol=0)
  for (circularity_measure in params$circ_factors) {
    test=cor.test(x = df[[circularity_measure]], y=df[[economic_measure]])
    c_temp = round(c(test$estimate, test$p.value, nrow(df)-sum(is.na(df$economic_measure)|is.na(df$circularity_measure))), 3)
    temp_correlations = cbind(temp_correlations, c_temp)
  }
  rownames(temp_correlations) = c("correlation", "p_value","obs")
  temp_correlations <- data.frame(t(temp_correlations)) |> 
    mutate(
      sig = if_else(p_value<.01, "**", if_else(p_value<.05,"*","")),
      result = paste0(correlation, sig)
    ) |> 
    select(result, obs)
  temp_correlations <- rbind(temp_correlations, min(temp_correlations$obs)) |> 
    select(result)
  correlations <- cbind(correlations, temp_correlations)
}
rownames(correlations) = c(params$circ_factors, "obs")
colnames(correlations) <- params$reg_factors
correlations



```


## Correlation tables Rurality

```{r}

# repeat as above with rural divide 
# what are the policy implications and discrepancies?
# what indicators are relevant to the rural vs nonrural counties?

correlations <- list()

for (economic_measure in params$reg_factors) {
  correlations_measure <- matrix(nrow = (length(params$circ_factors) + 1), ncol = 0)
  for (rural in c(TRUE, FALSE)){
    df_corr <- df |> filter(cbsa_rural_category == rural)
    temp_correlations = matrix(nrow=3, ncol=0)
  for (circularity_measure in params$circ_factors) {
      test=cor.test(x = df_corr[[circularity_measure]], y=df_corr[[economic_measure]])
      c_temp = round(c(test$estimate, test$p.value, nrow(df_corr)-sum(is.na(df_corr$economic_measure)|is.na(df_corr$circularity_measure))), 3)
      temp_correlations = cbind(temp_correlations, c_temp)
    }
    rownames(temp_correlations) = c("correlation", "p_value", "obs")
    temp_correlations <- data.frame(t(temp_correlations)) |> 
      mutate(
        sig = if_else(p_value<.01, "**", if_else(p_value<.05,"*","")),
        result = paste0(correlation, sig)
      ) |> 
      select(result, obs)
    temp_correlations <- rbind(temp_correlations, min(temp_correlations$obs)) |> 
      select(result)
    rownames(temp_correlations) = c(params$circ_factors, "obs")
    correlations_measure <- cbind(correlations_measure, temp_correlations)
  }
  colnames(correlations_measure) <- c(paste0("rural =", c(TRUE, FALSE)))
  correlations[[economic_measure]] <- cbind(correlations_measure, economic_measure)
}

correlations


```




