---
title: "isolation"
format:
  html:
    date: today
    toc: true
    toc-depth: 2
    code-fold: true
    code-overflow: wrap
    embed-resources: true
    df-print: paged
---

# Header

```{r}
library(tidyverse)
library(ggridges)
library(tidycensus)
library(tigris)
library(tmap)
library(ipumsr)

source("R/basic_utilities.R", local = (util <- new.env()))
source("R/geography.R", local = (geography <- new.env()))
source("R/place_io.R", local = (place_io <- new.env()))
source("R/circularity.R", local = (circularity <- new.env()))
source("R/trade_flows_wip.R", local = (trade_flows <- new.env()))

# paths within project subfolder
ppath <- function(...) {
  file.path("projects/isolation", ...)
}

# input data files
ipath <- list(
  dist = str_glue(geography$opath$dist_mat_, from = "center", year = 2013, cbsa = FALSE),
  outsupdem = str_glue(place_io$opath$outsupdem_, year = 2012, ilevel = "det", bus_data = "cbp_imp"),
  tf = str_glue(trade_flows$opath$flows_, bus_data = "cbp_imp", ilevel = "det", year = 2012, ind_code = "all_industries"),
  tf_com = str_glue(trade_flows$opath$flows_all_, bus_data = "cbp_imp", ilevel = "det", year = 2012)
)

# output data files
opath <- list(
  
)

# pack all data files
# util$zip_pack(ppath("data/datacache_2025-05-28.zip"), files = c(ipath, opath))
# unpack
util$zip_unpack(ppath("data/datacache_2025-05-28.zip"))

```


# Data


```{r}
# county-to-county centroid distance in miles
df_dist <- local({
  # convert from matrix in meters to unitless dataframe in miles
  x <- readRDS(ipath$dist)
  x1 <- x %>%
    units::set_units("mi") %>%
    units::set_units(NULL)
  dimnames(x1) <- dimnames(x)
  x1 %>%
    as_tibble(rownames = "from") %>%
    pivot_longer(!from, names_to = "to", values_to = "distance")
})

# county-commodity output, supply and demand
df_outsupdem <- arrow::read_parquet(ipath$outsupdem) %>% 
    mutate(exsup = pmax(0, supply - demand), exdem = pmax(0, demand - supply))


# county circularity indicators, depends on outsupdem data file
df_circ <- circularity$circularity_indicators(year = 2012, bus_data = "cbp_imp")

# county-to-county trade flows across all commodities
df_tf <- readRDS(ipath$tf) %>%
  as_tibble(rownames = "from") %>%
  pivot_longer(!from, names_to = "to", values_to = "flow") %>%
  filter(flow > 0)

# county-to-county trade flows by commodity
df_tf_com <- arrow::read_parquet(ipath$tf_com)

df_dist %>% head()
df_outsupdem %>% head()
df_circ %>% head()
df_tf %>% head()
df_tf_com %>% head()

```


```{r}

census_map <- get_acs(
  geography = "county",
  variables = "B01002_001",
  year = 2019,
  survey = "acs5",
  geometry = TRUE,
  resolution = "20m"
) %>%
  shift_geometry() %>%
  dplyr::select(place="GEOID")
states  <- get_acs(
  geography = "state",
  variables = "B01002_001",
  year = 2019,
  survey = "acs5",
  geometry = TRUE,
  resolution = "20m"
) %>%
  shift_geometry() %>%
  dplyr::select(state="GEOID")

```



# Definitions of isolation

### trade-weighted distance of each county
the average distance that an import/export has to go to reach trading partner, weighted by volume ($) of trade with each of a county's partners
e.g., if Marathon trades 25% with Portage (25 miles away) and 75% of exports and imports with Brown County (150 miles away), trade-weighted distance for Marathon County is 25%*25mi + 75%*150mi = 118.75.


```{r}

flow_ex = df_tf %>% 
  rename("focal"="from", "partner"="to")

flow_im = df_tf %>% 
  rename("focal"="to", "partner"="from")

temp = df_dist %>% 
  rename("focal"="to", "partner"="from")

twd = rbind(flow_ex, flow_im) %>% 
  group_by(focal, partner) %>% 
  dplyr::summarize(flow = sum(flow, na.rm=TRUE)) %>% 
  left_join(y=temp, by=c("focal","partner")) %>% 
  group_by(focal) %>% 
  dplyr::summarize(twd = weighted.mean(x=distance, w=flow, na.rm=TRUE)) %>% 
  rename("place"="focal")


```

### trade-weighted market share
the average share of a focal county in each destination's total imports, weighted by the volume ($) of trade with each of a county's partners
e.g., if Marathon exports 25% to Portage (imports from Marathon make up 60% of Portage's total import volume) and 75% of exports and imports with Brown County (imports from Marathon make up 5% of Brown's total import volume) for Marathon County, the trade-weighted market share for Marathon County is 25%*60% + 75%*5% = 18.75%.

```{r}

temp = df_tf %>% 
  group_by(to) %>% 
  dplyr::summarize(total_imports = sum(flow, na.rm=TRUE))

mksh = df_tf %>% 
  left_join(y=temp, by="to") %>% 
  mutate(mksh = flow/total_imports) %>% 
  group_by(from) %>% 
  dplyr::summarize(mksh = weighted.mean(x=mksh, w=flow, na.rm=TRUE)) %>% 
  rename("place"="from")

```

### local share of exports
share of intermediate exports sent to destinations within n miles
```{r}

lsh = df_tf %>% 
  left_join(y=df_dist, by=c("from","to")) %>% 
  mutate(d50 = ifelse(distance < 50, 1, 0),
         d100 = ifelse(distance < 100, 1, 0),
         d200 = ifelse(distance < 200, 1, 0),
         d400 = ifelse(distance < 400, 1, 0),
         ) %>% 
  group_by(from) %>% 
  dplyr::summarize(lsh50 = weighted.mean(x=d50, w=flow, na.rm=TRUE),
                   lsh100 = weighted.mean(x=d100, w=flow, na.rm=TRUE),
                   lsh200 = weighted.mean(x=d200, w=flow, na.rm=TRUE),
                   lsh400 = weighted.mean(x=d400, w=flow, na.rm=TRUE)
                   ) %>% 
  rename("place"="from")

```

### Market power indicators

#### National market shares

Let $f(c, i, j)$ be trade flow in commodity $c$ from county $c$ to county $j$. County $i$ total supply is $s(c, i) = \sum_j f(c, i, j)$, and total demand is $d(c, i) = \sum_j f(c, j, i)$. Total national trade in commodity $c$ is $D(c) = S(c) = \sum_{ij}f(c,i,j)$.

NMS step 1: calculate:
a. county total supply
b. county total demand
c. national total commodity trade

```{r}

NMS1a = df_tf_com %>%
    rename(place = from) %>%
    summarize(NMS1a = sum(flow), .by = c(place, com_code))

NMS1b =   df_tf_com %>%
    rename(place = to) %>%
    summarize(NMS1b = sum(flow), .by = c(place, com_code))

NMS1c = df_tf_com %>%
    summarize(NMS1c = sum(flow), .by = com_code)


```


County $i$ has national supply market share of $m^s(c, i) = s(c, i) / S(c)$ and demand market share of $m^d(c, i) = d(c, i) / D(c)$. Higher market share means more bargaining power on either side of the trade.

NMS step 2: calculate:
a. national supply market share
b. national demand market share

```{r}

NMS2a = NMS1a %>% 
  left_join(y=NMS1c, by="com_code") %>% 
  mutate(NMS2a = NMS1a/NMS1c) %>% 
  dplyr::select(place, com_code, NMS2a)

NMS2b = NMS1b %>% 
  left_join(y=NMS1c, by="com_code") %>% 
  mutate(NMS2b = NMS1b/NMS1c) %>% 
  dplyr::select(place, com_code, NMS2b)

NMS2a %>% group_by(com_code) %>% skimr::skim()
NMS2b %>% group_by(com_code) %>% skimr::skim()

```


On the supply (export) side, a county $i$ is facing a set of buyers $j$, each with with their national demand share $m^d(c, j)$. Calculate exposure to buyer (demander) power as trade-weighted power of each trading partner as $p^d(c, i) = \sum_j m^d(c, j) \frac{f(c, i, j)}{s(c, i)}$. Similarly, on the demand (import) side, calculate exposure to seller (supplier) power as $p^s(c, i) = \sum_j m^s(c, j) \frac{f(c, j, i)}{d(c, i)}$.

NMS step 3: calculate:
a. exposure to buyer (demander) power
  clause 1. buyer NMS2b
  clause 2. buyer's df_tf_com flow
  clause 3. seller's NMS1a
b. exposure to seller (supplier) power
  clause 1. seller NMS2a
  clause 2. seller's df_tf_com flow
  clause 3. buyer's NMS1b

```{r}

# NMS3a = sum (demand market share of a seller's buyers *
#                 buyer's commodity flow in df_tf_com / total buyer county demand)
#        = sum (buyer NMS2b *
#                 buyer's df_tf_com flow / seller NMS1a)
#      sum ... so across each seller's buyers


NMS3a1 = NMS2b %>% 
  rename("buyer"="place", "NMS3a1"="NMS2b")
NMS3a2 = df_tf_com %>% 
  rename("buyer"="to", "NMS3a2"="flow")
NMS3a3 = NMS1a %>% 
  rename("seller"="place", "NMS3a3"="NMS1a")


NMS3a = NMS3a2 %>% 
  rename("seller"="from") %>% 
  left_join(y=NMS3a3, by=c("com_code","seller")) %>% 
  left_join(y=NMS3a1, by=c("com_code","buyer")) %>% 
  mutate(NMS3a = NMS3a1*(NMS3a2/NMS3a3)) %>% 
  group_by(seller, com_code) %>% 
  dplyr::summarize(NMS3a = sum(NMS3a, na.rm=TRUE))

#### NOTE: some of the NMS3a are above 1


# NMS3a = sum (demand market share of a buyer's sellers *
#                 seller's commodity flow in df_tf_com / total seller county supply)
#        = sum (seller NMS2a *
#                 seller's df_tf_com flow / buyer NMS1b)
#      sum ... so across each buyer's sellers



NMS3b1 = NMS2a %>% 
  rename("seller"="place", "NMS3b1"="NMS2a")
NMS3b2 = df_tf_com %>% 
  rename("seller"="from", "NMS3b2"="flow")
NMS3b3 = NMS1b %>% 
  rename("buyer"="place", "NMS3b3"="NMS1b")


NMS3b = NMS3b2 %>% 
  rename("buyer"="to") %>% 
  left_join(y=NMS3b3, by=c("com_code","buyer")) %>% 
  left_join(y=NMS3b1, by=c("com_code","seller")) %>%
  mutate(NMS3b = NMS3b1*(NMS3b2/NMS3b3)) %>% 
  mutate(across(everything(), ~ replace(., is.infinite(.), NA))) %>% 
  group_by(buyer, com_code) %>% 
  dplyr::summarize(NMS3b = sum(NMS3b, na.rm=TRUE))


```

```{r}
NMS3a %>% group_by(com_code) %>% skimr::skim()
```




Finally, calculate aggregate county indicators weighing by commodity shares: 

$$
p^s(i) = \frac{\sum_c p^s(c, i) d(c, i)}{\sum_c d(c, i)}
$$

and 

$$
p^d(i) = \frac{\sum_c p^d(c, i) s(c, i)}{\sum_c s(c, i)}
$$


NMS step 4: calculate:
a. aggregate national market shares (supplier) = sum(clause1*clause2)/sum(clause3)
  clause 1. supply NMS3a
  clause 2. demand NMS1b
  clause 3. demand NMS1b
b. aggregate national market shares (demander)
  clause 1. demand NMS3b
  clause 2. supply NMS1a
  clause 3. supply NMS1a

```{r}

NMS4a = NMS3a %>% 
  rename("place"="seller") %>% 
  left_join(y=NMS1a, by=c("place", "com_code")) %>% 
  group_by(place) %>% 
  dplyr::summarize(NMS4a = sum(NMS3a*NMS1a, na.rm = TRUE)/sum(NMS1a, na.rm = TRUE))

NMS4b = NMS3b %>% 
  rename("place"="buyer") %>% 
  left_join(y=NMS1b, by=c("place", "com_code")) %>% 
  group_by(place) %>% 
  dplyr::summarize(NMS4b = sum(NMS3b*NMS1b, na.rm = TRUE)/sum(NMS1b, na.rm = TRUE))

NMS = NMS4a %>% 
  left_join(y=NMS4b, by="place") %>% 
  rename("NMS_supply"="NMS4a", "NMS_demand"="NMS4b")

NMS %>% skimr::skim()

```





Intuitively, high $p^d(i)$ means that county $i$ is selling to trading partners with high market power and is thus in a weaker position when negotiating export contracts. High $p^s(i)$ means that county's suppliers have high market power and weaker position over import contracts. We hypothesize that facing a higher market power on either side of the trade puts a county in a disadvantaged position in the national supply chain structure and results metaphorical isolation or exclusion from trades that are more beneficial to local producers.








#### Local market shares

For every trade flow $f(c, i, j)$, calculate "balance of power" as

$$
b(c,i,j) = \frac{f(c,i,j)}{d(c,j)} - \frac{f(c,i,j)}{s(c,i)}
$$

LMS step 1: calculate:
a. commodity balance of power
  clause 1. flow in df_tf_com table
  clause 2. buyer demand NMS1b
  clause 3. seller supply NMS1a
  clause 4. clause1/clause2
  clause 5. clause1/clause3


```{r}

# clause 2
LMS1a2 = NMS1b %>% 
  rename("buyer"="place")

# clause 3
LMS1a3 = NMS1a %>% 
  rename("seller"="place")

# clause 4
LMS1a = df_tf_com %>% 
  rename("buyer"="to", "seller"="from") %>% 
  left_join(y=LMS1a2, by=c("buyer","com_code")) %>% 
  mutate(across(everything(), ~ replace(., is.infinite(.), NA))) %>% 
  mutate(LMS1a4 = flow/NMS1b) %>% 
  left_join(y=LMS1a3, by=c("seller","com_code")) %>% 
  mutate(across(everything(), ~ replace(., is.infinite(.), NA))) %>% 
  mutate(LMS1a5 = flow/NMS1a,
         LMS1a = LMS1a4 - LMS1a5)

```

```{r}
LMS1a %>% group_by(com_code) %>% skimr::skim(LMS1a)

```


For every positive trade flow, $-1 \lt b(c,i,j) \lt 1$. Negative balance means less selling power for $i$ and more buying power for $j$, and the other way around. $b \to 1$ means that the trade satisfies close to 100% of buyer's demand, but is only a small fraction of seller's supply, meaning that county $i$ has *monopoly* power over $j$. $b \to -1$ means that the trade is most of the seller's supply, while only a small fraction of buyer's demand, meaning that county $j$ has *monopsony* power over $i$.

Positive is "seller's market", and negative is "buyer's market".

Weighted over all buyers and commodities, county $i$'s supply market power is

$$
b^s(i) = \frac{\sum_{cj} b(c,i,j) f(c,i,j)}{\sum_{cj}f(c,i,j)}
$$

and demand market power is

$$
b^d(i) = \frac{\sum_{cj} -b(c,j,i) f(c,j,i)}{\sum_{cj}f(c,j,i)}
$$


```{r}

LME2a1 = LMS1a %>% 
  mutate(LME2a1 = LMS1a*flow) %>% 
  group_by(seller) %>% 
  dplyr::summarize(sLME2a1 = sum(LME2a1, na.rm=TRUE),
                   sflow = sum(flow, na.rm=TRUE)
                   ) %>% 
  mutate(LME_supply = sLME2a1/sflow) %>% 
  dplyr::select("place"=seller, LME_supply)

LME2a2 = LMS1a %>% 
  mutate(LME2a1 = -LMS1a*flow) %>% 
  group_by(buyer) %>% 
  dplyr::summarize(sLME2a1 = sum(LME2a1, na.rm=TRUE),
                   sflow = sum(flow, na.rm=TRUE)
                   ) %>% 
  mutate(LME_demand = sLME2a1/sflow) %>% 
  dplyr::select("place"=buyer, LME_demand)

LME = LME2a1 %>%
  left_join(y=LME2a2, by="place")

LME %>% skimr::skim()

```





High "balance of power" $b$ is the opposite to "exposure to high power" $p$, with analogous hypotheses regarding county's standing in national supply chains and implications for growth and prosperity.







### trade capacity
The importance of intermediate exports relative to the size of local economy
i.e., intermediate exports/total output

```{r}

tc = df_circ %>% 
  dplyr::select(place, trade_capacity)

```


## combine
```{r}

isolation = census_map %>%
  left_join(y=tc, by="place") %>%
  left_join(y=lsh, by="place") %>%
  left_join(y=mksh, by="place") %>%
  left_join(y=twd, by="place") %>%
  left_join(y=NMS, by="place") %>%
  mutate(logtwd = log(twd))

```


# descriptives

## supply and demand map

```{r}
com = "334413"
x <- df_outsupdem %>%
  filter(com_code == com) %>%
  mutate(netsup = supply - demand,
         log_netsup = if_else(netsup > 0, log10(netsup), -log10(-netsup)))


isolation %>%
  left_join(x, "place") %>%
  filter(is.finite(log_netsup)) %>%
  tm_shape() +
  tm_polygons(
    title = com,
    col = "log_netsup",
    border.alpha = 0.0,
    style = "cont",
    midpoint = 0)

# exposure to buyers market power
NMS3a %>%
  filter(com_code == com) %>%
  ungroup() %>%
  skimr::skim(NMS3a)

# exposure to sellers market power
NMS3b %>%
  filter(com_code == com) %>%
  ungroup() %>%
  skimr::skim(NMS3b)

```



## univariate

```{r}

isolation %>%
  st_drop_geometry() %>% 
  pivot_longer(cols = !c(place), names_to = "var", values_to = "val") %>% 
  group_by(var) %>%
  summarise(
    count = n(),
    mean = mean(val, na.rm = TRUE),
    sd = sd(val, na.rm = TRUE),
    median = median(val, na.rm = TRUE),
    p25 = quantile(val, 0.25, na.rm = TRUE),
    p75 = quantile(val, 0.75, na.rm = TRUE),
    min = min(val, na.rm = TRUE),
    max = max(val, na.rm = TRUE)
  )

```


```{r}

ggplot(isolation, aes(x = twd)) +
  geom_density(fill = "#6FA8DC", color = "black", alpha = 1.3) +
  theme_minimal() +
  labs(
    title = "Density Plot of Trade-Weighted Distance",
    x = "twd",
    y = "Density"
  )
ggplot(isolation, aes(x = logtwd)) +
  geom_density(fill = "#6FA8DC", color = "black", alpha = 1.3) +
  theme_minimal() +
  labs(
    title = "Density Plot of Trade-Weighted Distance (log)",
    x = "twd",
    y = "Density"
  )
ggplot(isolation, aes(x = mksh)) +
  geom_density(fill = "#6FA8DC", color = "black", alpha = 1.3) +
  theme_minimal() +
  labs(
    title = "Density Plot of Market Share",
    x = "mksh",
    y = "Density"
  )

ggplot(isolation, aes(x = trade_capacity)) +
  geom_density(fill = "#6FA8DC", color = "black", alpha = 1.3) +
  theme_minimal() +
  labs(
    title = "Density Plot of Trade Capacity",
    x = "trade_capacity",
    y = "Density"
  )

temp <- isolation %>%
  pivot_longer(cols = c(lsh50, lsh100, lsh200, lsh400),
               names_to = "Distance",
               values_to = "Value")
temp$Distance <- factor(temp$Distance, levels = c("lsh400","lsh200","lsh100","lsh50"))


ggplot(temp, aes(x = Value, y = Distance, fill = Distance)) +
  geom_density_ridges(scale = 1.2, alpha = 0.8, color = "white") +
  scale_fill_viridis_d(option = "D", end = 0.8) +
  theme_minimal() +
  labs(title = "Share of intermediate exports sent within __ miles",
       subtitle = "Distribution of US counties",
       x = "Value",
       y = "Distance") +
  theme(legend.position = "none")


```


```{r}

tmap_mode("view")
isolation %>%
  tm_shape() + 
  tm_polygons(col = "twd", border.alpha = 0.0, style = "cont", 
              palette = c("white","#20124d")) +
  tm_layout(title = "Average trade-weighted distance", title.size = 2) +
  tm_shape(states) + 
  tm_borders(lwd=0.6)

mx = median(isolation$logtwd, na.rm=TRUE)
isolation %>%
  tm_shape() + 
  tm_polygons(col = "logtwd", midpoint = mx, border.alpha = 0.0, style = "cont", 
              palette = c("white","#20124d")) +
  tm_layout(title = "Average trade-weighted distance (log)", title.size = 2) +
  tm_shape(states) + 
  tm_borders(lwd=0.6)


# mx = median(isolation$mksh, na.rm=TRUE)
isolation %>%
  tm_shape() + 
  tm_polygons(col = "mksh", border.alpha = 0.0, style = "cont", 
              palette = c("white","#20124d")) +
  tm_layout(title = "Trade-weighted market share", title.size = 2) +
  tm_shape(states) + 
  tm_borders(lwd=0.6)

mx = median(isolation$lsh200, na.rm=TRUE)
isolation %>%
  tm_shape() + 
  tm_polygons(col = "lsh200", midpoint = mx, border.alpha = 0.0, style = "cont", 
              palette = c("#6FA8DC","white","#20124d")) +
  tm_layout(title = "Local share of exports, 200 miles", title.size = 2) +
  tm_shape(states) + 
  tm_borders(lwd=0.6)


mx = median(isolation$trade_capacity, na.rm=TRUE)
isolation %>%
  tm_shape() + 
  tm_polygons(col = "trade_capacity", midpoint = mx, border.alpha = 0.0, style = "cont", 
              palette = c("#6FA8DC","white","#20124d")) +
  tm_layout(title = "Trade capacity", title.size = 2) +
  tm_shape(states) + 
  tm_borders(lwd=0.6)

```

```{r}
tmap_mode("plot")


isolation %>%
  tm_shape() + 
  tm_polygons(col = "NMS_supply", border.alpha = 0.0, style = "quantile", 
              palette = c("white","#20124d")) +
  tm_shape(states) + 
  tm_borders(lwd=0.6)


isolation %>%
  tm_shape() + 
  tm_polygons(col = "NMS_demand", border.alpha = 0.0, style = "quantile", 
              palette = c("white","#20124d")) +
  tm_shape(states) + 
  tm_borders(lwd=0.6)

```



## bivariate
```{r}
cor.test(x=isolation$logtwd, y=isolation$mksh)
# cor.test(x=isolation$logtwd, y=isolation$lsh100)
cor.test(x=isolation$logtwd, y=isolation$lsh200)
# cor.test(x=isolation$logtwd, y=isolation$lsh400)
cor.test(x=isolation$logtwd, y=isolation$trade_capacity)

# cor.test(x=isolation$mksh, y=isolation$lsh100)
cor.test(x=isolation$mksh, y=isolation$lsh200)
# cor.test(x=isolation$mksh, y=isolation$lsh400)
cor.test(x=isolation$mksh, y=isolation$trade_capacity)

# cor.test(x=isolation$trade_capacity, y=isolation$lsh100)
cor.test(x=isolation$trade_capacity, y=isolation$lsh200)
# cor.test(x=isolation$trade_capacity, y=isolation$lsh400)


```

### quadrants

```{r}
iso_quads <- function(data, econ, geo) {
  # Convert string column names to symbols
  econ_col <- sym(econ)
  geo_col  <- sym(geo)
  
  data2 <- data %>%
    mutate(
      md_econ = median(!!econ_col, na.rm = TRUE),
      md_geo  = median(!!geo_col, na.rm = TRUE),
      quad_econ = ifelse(!!econ_col >= md_econ, "high", "low"),
      quad_geo = ifelse(!!geo_col >= md_geo, "high", "low"),
      quad_combo = case_when(
        quad_econ == "high" & quad_geo == "high" ~ "High Econ/High Geo",
        quad_econ == "high" & quad_geo == "low"  ~ "High Econ/Low Geo",
        quad_econ == "low" & quad_geo == "high"  ~ "Low Econ/High Geo",
        quad_econ == "low" & quad_geo == "low"   ~ "Low Econ/Low Geo",
        TRUE ~ NA_character_
      )
    )

  quad_colors <- c(
    "Low Econ/Low Geo"   = "#FFEEAD",
    "High Econ/Low Geo"  = "#52BF90",
    "Low Econ/High Geo"  = "#6FA8DC",
    "High Econ/High Geo" = "#20124d"
  )

  # Map
  tm_shape(data2) + 
    tm_polygons(
      col = "quad_combo",
      border.alpha = 0.0,
      style = "cat",
      palette = quad_colors
    ) +
    tm_layout(
      title = "Geographic and Economic Isolation",
      title.size = 2
    ) +
    tm_shape(states) + 
    tm_borders(lwd = 0.6)
}

```

Below, you are able to input variables in the economic isolation and geographic isolation categories. Listing:
**economic**
--> market share (mksh)
--> trade capacity (trade_capacity)
**geographic**
--> trade-weighted distance (twd, logtwd)
--> share of exports within (lsh50, lsh100, lsh200, lsh400)

```{r}
iso_quads(data = isolation, econ="mksh", geo="logtwd")

```



# extra materials (temp)

```{r}

ddi <- read_ipums_ddi("data/ipums/usa_00037.xml")
pums_clean <- read_ipums_micro(ddi)

```


```{r}
xwalk = read.csv("data/ipums/county_puma22.csv") %>%
  filter(state != "State code") %>%
  mutate(PUMA = str_c(state, puma22),
         FIPS = county, pumapop = as.numeric(pop20)) %>%
  dplyr::select(PUMA, FIPS, pumapop, afact)
```


```{r}

spm = pums_clean %>% 
  drop_na(SPMTHRESH) %>% 
  filter(SPMTHRESH != 999999) %>% 
  mutate(spm100 = ifelse(ADJGINC>1*SPMTHRESH, 0, 1),
         spm150 = ifelse(ADJGINC>1.5*SPMTHRESH, 0, 1),
         spm200 = ifelse(ADJGINC>2*SPMTHRESH, 0, 1),
         PUMA = str_c(sprintf("%02d", STATEFIP),"",sprintf("%05d", PUMA))
         ) %>% 
  dplyr::select(HHWT, PUMA, SPMPOV, SPMTHRESH, spm100, spm150, spm200) %>% 
  distinct() %>% 
  group_by(PUMA) %>% 
  dplyr::summarize(spm100 = weighted.mean(x=spm100, w=HHWT, na.rm=TRUE),
                   spm150 = weighted.mean(x=spm150, w=HHWT, na.rm=TRUE),
                   spm200 = weighted.mean(x=spm200, w=HHWT, na.rm=TRUE)
                   )

spm = xwalk %>%
  left_join(y=spm, by="PUMA") %>%
  group_by(FIPS) %>%
  dplyr::summarize(spm100 = weighted.mean(x=spm100, w=pumapop, na.rm=TRUE),
                   spm150 = weighted.mean(x=spm150, w=pumapop, na.rm=TRUE),
                   spm200 = weighted.mean(x=spm200, w=pumapop, na.rm=TRUE)
                   ) %>% 
  rename("place"="FIPS")

opm <- get_acs(
  geography = "puma",
  variables = c("S1702_C01_001E","S1702_C01_045E"),
  year = 2023,
  survey = "acs1"
) %>% 
  dplyr::select("PUMA"=GEOID, variable, estimate) %>% 
  pivot_wider(names_from = variable, values_from = estimate) %>% 
  mutate(opm150 = S1702_C01_045/S1702_C01_001) %>% 
  dplyr::select(PUMA, opm150)

opm = xwalk %>%
  left_join(y=opm, by="PUMA") %>%
  group_by(FIPS) %>%
  dplyr::summarize(opm150 = weighted.mean(x=opm150, w=pumapop, na.rm=TRUE)
                   ) %>% 
  rename("place"="FIPS")

pov = opm %>% 
  left_join(y=spm, by="place") %>%
  mutate(across(c(opm150, spm150), ~ (. - mean(., na.rm = TRUE)) / sd(., na.rm = TRUE), .names = "z_{.col}")) %>% 
  mutate(diff = z_spm150-z_opm150) %>% 
  mutate(state = substr(place, 1, 2)) %>% 
  filter(state != "72")


pov2 = census_map %>%
  left_join(y=pov, by="place")

```


```{r}
pop_clean = read.csv("data/RRG_data/cc-est2015-alldata.csv")

pop = pop_clean %>%
  mutate(FIPS = str_c(sprintf("%02d", STATE),"",sprintf("%03d", COUNTY)),
         pop_black = BA_MALE + BA_FEMALE, pop_asian = AA_MALE + AA_FEMALE, pop_ind = IA_MALE + IA_FEMALE, pop_hisp = H_MALE + H_FEMALE, pop = TOT_POP) %>%
  filter(YEAR == 5 & AGEGRP == 0) %>%
  dplyr::select(FIPS, pop, pop_black, pop_asian, pop_hisp, pop_ind) %>%
  mutate(tot = pop_black + pop_asian + pop_ind + pop_hisp, pct_black = pop_black/pop, pct_asian = pop_asian/pop, pct_ind = pop_ind/pop, pct_hisp = pop_hisp/pop, pct_nhw = (pop-tot)/pop) %>% 
  mutate(pct_nhw = ifelse(pct_nhw < 0, 0, pct_nhw)) %>% 
  dplyr::select("place"=FIPS, pct_nhw, pct_black, pct_hisp, pct_asian, pct_ind, pop)
```

```{r}

extra = pov2 %>% 
  left_join(y=pop, by="place") %>% 
  mutate(logpop = log(pop))

```


```{r}

tmap_mode("view")
mx = median(extra$opm150, na.rm=TRUE)
extra %>%
  tm_shape() + 
  tm_polygons(col = "opm150", midpoint = mx, border.alpha = 0.0, style = "cont", 
              palette = c("#6FA8DC","white","#20124d")) +
  tm_layout(title = "OPM150", title.size = 2) +
  tm_shape(states) + 
  tm_borders(lwd=0.6)

tmap_mode("view")
mx = median(extra$spm150, na.rm=TRUE)
extra %>%
  tm_shape() + 
  tm_polygons(col = "spm150", midpoint = mx, border.alpha = 0.0, style = "cont", 
              palette = c("#6FA8DC","white","#20124d")) +
  tm_layout(title = "SPM150", title.size = 2) +
  tm_shape(states) + 
  tm_borders(lwd=0.6)

tmap_mode("view")
mx = median(extra$diff, na.rm=TRUE)
extra %>%
  tm_shape() + 
  tm_polygons(col = "diff", midpoint = 0, border.alpha = 0.0, style = "cont", 
              palette = c("#6FA8DC","white","#20124d")) +
  tm_layout(title = "diff", title.size = 2) +
  tm_shape(states) + 
  tm_borders(lwd=0.6)

```



```{r}

summary(lm(data=extra, diff ~ pct_nhw + logpop))

cor.test(x=extra$pct_nhw, y=extra$logpop)

```



