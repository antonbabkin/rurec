---
title: "paa regress"
format:
  html:
    self-contained: true
    page-layout: full
    code-fold: true
    code-tools: true
    code_download: yes
    latex_engine: pdflatex
params:
  year: 2012
  year_range: !expr c(2012, 2017) # or c(2012, 2015, 2017) or c(2010:2020)
  show_temporal_density: TRUE
  show_descriptive_density: TRUE
  show_descriptive_density_rural: TRUE
  show_descriptive_maps: TRUE
  interactive_maps: FALSE
  show_corr: FALSE
  show_test_regression: FALSE
  show_lm_regression: TRUE
  show_lm_cluster_regression: TRUE
  reg_factors: !expr c("entry_rate", "exit_rate", "establishments_gr", "wage", "wage_gr", "jobs_gr", "payroll_gr", "unemp_rate", "laborforce_part_rate", "employment_gr", "poverty_rate", "income_rate", "poverty_rate_gr", "income_rate_gr", "population_gr",  "ypll75", "highschool_attainment_rate", "net_migration_rate") 
  reg_factor_funs: !expr c("call_establishments", "call_wage", "call_jobs", "call_payroll", "call_employment", "call_poverty_rate", "call_income_rate", "call_population")
  example_coef_index:  2
---


```{r notes, include = FALSE}

# TODO: (time-series, repeat cross-section)
# TODO: map all "sinks" unfiltered by algorithm
# TODO: regress unfiltered "sinks" and "sources"
# TODO: regress change over time data 
# TODO: add spatial regressions
# TODO: Diff in diff
# TODO: share weighted distance

```

```{r preamble, include = FALSE}

# additional library list
library(logger)
library(tidyverse)

library(moments)
library(PerformanceAnalytics)
library(correlation)

library(estimatr)
library(margins)


# scripts
source("projects/eca_paa/dataprep.R", local = (dp <- new.env()))

# chunk behavior 
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 

# nonscientific notation
options(scipen=999)

# log output 
log_threshold(DEBUG)

# initialize parameters
params

```

```{r zip pack, include = FALSE}

# uncomment and pack/unpack as necessary
# dp$zip_pack("tmp/eca_paa_data_v240324.zip", dp$opath)
# dp$zip_unpack("tmp/eca_paa_data_v240324.zip", overwrite = TRUE)

```

::: panel-tabset 

# data

```{r data cashe, include = FALSE}

# uncomment as necessary
# dp$create_complete_cache()

```

```{r dataframe }

df <- dp$call_proj_df(params$year) %>% 
  mutate(eca_center_distance = dp$meters2miles(eca_center_distance)/100) %>% 
  mutate(wage = wage/1000) %>% 
  mutate(income_rate = income_rate/1000) %>% 
  mutate(ypll75 = ypll75/100000) %>% 
  mutate(eca_cluster_category = ifelse(eca_cluster_category == "Cluster Source", "Source", "Destination"))
  
df$metro_micro_destination <- df$metro_micro_sink
  df$metro_micro_destination[df$metro_micro_destination == "Sink and Metro "] <-  "Destination and Metro"
    df$metro_micro_destination[df$metro_micro_destination == "Sink and Micro"] <-  "Destination and Micro"
      df$metro_micro_destination[df$metro_micro_destination == "Sink only"] <-  "Destination Only"

#   df$metro_micro_sink[df$metro_micro_sink == "Sink and Metro "] <-  "Destination and Metro"
#     df$metro_micro_sink[df$metro_micro_sink == "Sink and Micro"] <-  "Destination and Micro"
#       df$metro_micro_sink[df$metro_micro_sink == "Sink only"] <-  "Destination Only"
# names(df)[names(df)=="metro_micro_sink"] <- "metro_micro_destination"

```

```{r dataframe with growth}

x <- dp$temporal_permutations(params$year_range)
tmp <- df$place %>% as.data.frame() %>% `colnames<-`(c("place")) 
for (y in 1:nrow(x)){
  paste(x[y,1], x[y,2]) %>% print()
  for (i in params$reg_factor_funs){
     tmp <- dp$growth_rate(x[y,1], x[y,2], dp[[i]]) %>% 
       mutate(grow_rate = replace(grow_rate, which(abs(grow_rate) == 200), NA)) %>% 
       rename_at('grow_rate', ~paste0(substring(i, 6), "_gr")) %>% 
       left_join(tmp, ., by = "place")
  }
}


df <- left_join(df, tmp, by = "place")
```

::: panel-tabset 
## numeric variables

```{r numeric vars}

  df %>% 
    st_drop_geometry() %>% 
    select(where(is.numeric)) %>% 
    names() 

```

## spatio-temporal
```{r spatio-temporal dataframe }
if (params$show_temporal_density) {
  tmp <- dp$call_temporal_range_df(params$year_range)
  for (i in str_remove_all(params$reg_factors, '(_gr)$')){
    p <- dp$viz$absorption_density_plot(tmp, i, "id_year", trans = "log", colorbreaks = NULL) %>%
    print(p)
  }
}

```

## growth
```{r growth rates}

# dp$growth_rate(start_year = 2010, end_year = 2015, function_name = dp$call_county_population,  bus_data = "census")
# dp$growth_rate(x[y,1], x[y,2], dp[[i]]) %>% head() %>% print()

if (FALSE){
  x <- dp$temporal_permutations(params$year_range)
  tmp <- df$place %>% as.data.frame() %>% `colnames<-`(c("place")) 
  for (y in 1:nrow(x)){
    paste(x[y,1], x[y,2]) %>% print()
    for (i in params$reg_factor_funs){
      dp$growth_rate(x[y,1], x[y,2], dp[[i]]) %>% head() %>% print()
    }
  }
}

```

:::

# summation

::: panel-tabset 

## descriptive stats

```{r summary}

df %>% 
  st_drop_geometry() %>% 
  select(where(is.numeric)) %>% 
  summary()

```

## contingency table

```{r contingency table}

# alpha == source
# beta == sink

table(df$cbsa_rural_category, df$eca_cluster_category)

table(df$CENTRAL_OUTLYING, df$eca_cluster_category)

```

## change over time

```{r}
ihs_trans <- function(){trans_new("ihs", function(x){asinh(x)}, function(x){sinh(x)} )}

if (FALSE) { 
  tmp <- dp$growth_rate(start_year = 2012, end_year = 2017, function_name = dp$call_county_output,  bus_data = "infogroup") %>% {left_join(df_space, .,  by = "place") } %>%
    na.omit() 
  
  tmp %>% 
    {.[!grepl("^(60|66|69|72|78)|(999)$", .$place), ]} %>% 
    {dp$viz$diverge_choro_map(., "grow_rate", caption = "Output Growth rate 2012-2017", interactive = T)}
  
  tmp %>% 
    {.[!grepl("^(60|66|69|72|78)|(999)$", .$place), ]} %>% 
    {.$grow_rate} %>% 
    summary()
    
  # dp$call_production(2012, bus_data = "infogroup") %>% head()
  # dp$call_production(2017, bus_data = "infogroup") %>% head()
}

```

```{r}

if (FALSE) { 
tmp <- dp$growth_rate(start_year = 2012, end_year = 2017, function_name = dp$call_population,  bus_data = "tidy_acs") %>% {left_join(df_space, .,  by = "place") } %>%
  na.omit() 

tmp %>% 
  {.[!grepl("^(60|66|69|72|78)|(999)$", .$place), ]} %>% 
  {dp$viz$diverge_choro_map(., "grow_rate", caption = "Population Growth rate 2012-2017", interactive = T)}

tmp %>% 
  {.[!grepl("^(60|66|69|72|78)|(999)$", .$place), ]} %>% 
  {.$grow_rate} %>% 
  summary()
}

```



```{r}

if (FALSE) { 
  tmp <- dp$growth_rate(start_year = 2012, end_year = 2017, function_name = dp$call_establishments,  bus_data = "infogroup") %>% {left_join(df_space, .,  by = "place") } %>%
    na.omit() 
  
  tmp %>% 
    {.[!grepl("^(60|66|69|72|78)|(999)$", .$place), ]} %>% 
    {dp$viz$diverge_choro_map(., "grow_rate", caption = "Establishment Growth rate 2012-2017", interactive = T)}
  
  tmp %>% 
    {.[!grepl("^(60|66|69|72|78)|(999)$", .$place), ]} %>% 
    {.$grow_rate} %>% 
    summary()
  }

```




## density plots


::: panel-tabset 

### descriptive 


```{r density}
#| warning: false
if (params$show_descriptive_density) {
  df %>%
    {for(i in names(dp$strip_dataframe(.))){
      dp$viz$density_dist_plot(., i) %>%
        print(.)
    }
  }
}

```

### cluster category

```{r density cluster group}
#| warning: false

if (params$show_descriptive_density) {
  df %>%
    {for(i in names(dp$strip_dataframe(.))){
      dp$viz$density_dist_plot(., i, "eca_cluster_category") %>%
        print(.)
    }
  }
}
```


### cbsa category 

```{r density cbsa group}
#| warning: false
if (params$show_descriptive_density) { 
  df %>%
    {for(i in names(dp$strip_dataframe(.))){
      dp$viz$density_dist_plot(., i, "cbsa_rural_category") %>% 
        print(.)
    }
  }
}

```


### more cbsa category 

```{r density cbsa more group}
#| warning: false
if (params$show_descriptive_density) { 
  df %>%
    {for(i in names(dp$strip_dataframe(.))){
      dp$viz$density_dist_plot(., i, "CENTRAL_OUTLYING") %>% 
        print(.)
    }
  }
}

```


### eca and cbsa category 

```{r density eca cbsa xtab}
#| warning: false
if (params$show_descriptive_density) { 
  df %>%
    {for(i in names(dp$strip_dataframe(.))){
      dp$viz$density_dist_plot(., i, "eca_cbsa_xtab") %>% 
        print(.)
    }
  }
}

```


### eca and more cbsa category 

```{r density eca cbsa more xtab}
#| warning: false
if (params$show_descriptive_density) { 
  df %>%
    {for(i in names(dp$strip_dataframe(.))){
      dp$viz$density_dist_plot(., i, "eca_central_out_xtab") %>% 
        print(.)
    }
  }
}

```

### rural only

```{r density rural}
#| warning: false
if (params$show_descriptive_density_rural) { 
  df %>% 
    {.[.$cbsa_rural_category == "rural", ]} %>% 
    dp$strip_dataframe() %>% 
    {for(i in names(.)){
      dp$viz$density_dist_plot(., i) %>% 
        print(.)
    }
  }
}

``` 

### rural cluster

```{r density rural cluster}
#| warning: false
if (params$show_descriptive_density_rural) { 
  df %>%
    {.[.$cbsa_rural_category == "rural", ]} %>% 
    {for(i in names(dp$strip_dataframe(.))){
      dp$viz$density_dist_plot(., i, "eca_cluster_category") %>% 
        print(.)
    }
  }
}

``` 


### rural scatter

```{r scatter rural }
#| warning: false
if (FALSE) { 
  df %>%
  {.[.$cbsa_rural_category == "rural", ]} %>%
  {ggplot(., aes(y = .[["ypll75"]], x = .[["cluster_members_count"]])  ) +
    geom_point(aes(color = .[["eca_cluster_category"]], size = .[["population"]]), alpha = 1/2) +
    stat_smooth(method = "lm") }


  df %>%
  {.[.$cbsa_rural_category == "rural", ]} %>%
  {ggplot(., aes(y = .[["ypll75"]], x = .[["max_trade_share"]])  ) +
    geom_point(aes(color = .[["eca_cluster_category"]], size = .[["population"]]), alpha = 1/2) +
    stat_smooth(method = "lm") }


  df %>%
  {.[.$cbsa_rural_category == "rural", ]} %>%
  {ggplot(., aes(y = .[["ypll75"]], x = .[["max_trade_share"]])  ) +
    geom_point(aes(color = .[["eca_membership"]], size = .[["population"]]), alpha = 1/2) +
    stat_smooth(method = "lm") +
      theme(legend.position = "none")}
}


``` 

:::
:::

# maps

::: panel-tabset 

## cbsa by eca

```{r cbsa by eca}
if (params$show_descriptive_maps) { 
  tmp <- scale_fill_discrete
  scale_fill_discrete <- function(...) scale_fill_manual(values = c("#DC267F", "#FE6100", "#785EF0"), na.value ="#E0DEDD")
  p <- dp$viz$cat_choro_map(df, "cbsa_by_eca", legend = T, interactive = params$interactive_maps)
    print(p)
  scale_fill_discrete <- tmp
}

```

## sink filter

```{r sink filter}
if (params$show_descriptive_maps) { 
  sum(df$sink_filter == "sink/source")
  tmp <- scale_fill_discrete
  scale_fill_discrete <- function(...) scale_fill_manual(values = c("#DDCC77", "#CC6677", "#88CCEE"), na.value ="#E0DEDD")
  p <- dp$viz$cat_choro_map(df, "sink_filter", legend = T, interactive = params$interactive_maps)
    print(p)
  scale_fill_discrete <- tmp
}

```

## rural division

```{r}

# if (params$show_descriptive_maps) { 
#   dp$viz$nominal_choro_map(df, "laborforce_part_rate", interactive = params$interactive_map)
# }

if (params$show_descriptive_maps) { 
  df %>% 
    mutate(labor_force_participation = laborforce_part_rate/100) %>% 
  {dp$viz$normal_choro_map(., "labor_force_participation", interactive = params$interactive_map)}
}

if (params$show_descriptive_maps) { 
  df %>% 
    mutate(labor_force_participation = laborforce_part_rate/100) %>% 
    mutate(labor_force_participation = ifelse(cbsa_rural_category == "rural", NA, labor_force_participation)) %>% 
  {dp$viz$normal_choro_map(., "labor_force_participation", interactive = params$interactive_map)}
}

if (params$show_descriptive_maps) { 
  df %>% 
    mutate(labor_force_participation = laborforce_part_rate/100) %>% 
    mutate(labor_force_participation = ifelse(cbsa_rural_category != "rural", NA, labor_force_participation)) %>% 
  {dp$viz$normal_choro_map(., "labor_force_participation", interactive = params$interactive_map)}
}

```


```{r}

if (FALSE) { 
  if (params$show_descriptive_maps) {
    for (i in "population" ){
     p <- df %>% 
       {mutate(tmp = ifelse(.[["cbsa_rural_category"]]  != "rural", NA, .[[i]]))} %>% 
       {dp$viz$nominal_choro_map(., deparse(substitute(tmp)), interactive = params$interactive_map)}
     print(p)
    }
  }
}
```




## descriptive

::: panel-tabset 

### output
  
```{r}

if (params$show_descriptive_maps) { 
  df %>% 
    mutate(eca_center_distance = replace(eca_center_distance, which(eca_center_distance == 0), NA)) %>% 
  dp$viz$nominal_choro_map(., "eca_center_distance", interactive = params$interactive_map)
}

```

```{r}

if (params$show_descriptive_maps) { 
  dp$viz$nominal_choro_map(df, "entry_rate", interactive = params$interactive_map)
}

```

### migration
  
```{r}
ihs_trans <- function(){trans_new("ihs", function(x){asinh(x)}, function(x){sinh(x)} )}
if (params$show_descriptive_maps) { 
  dp$viz$diverge_choro_map(df, "net_migration_rate", interactive = params$interactive_map)
}

```

### eca
```{r maps eca}

if (params$show_descriptive_maps) {
  dp$viz$cat_choro_map(df, "eca_membership", interactive = params$interactive_map)
}

# if (params$show_descriptive_maps) { 
#   tmp <- scale_fill_discrete
#   scale_fill_discrete <- function(...) scale_fill_manual(values = c("#DC267F", "#FE6100", "#785EF0"), na.value ="#E0DEDD")
#   p <- dp$viz$cat_choro_map(df, "CBSA_CODE", legend = T, interactive = params$interactive_maps)
#     print(p)
#   scale_fill_discrete <- tmp
# }

```

### cbsa
```{r maps cbsa}

if (params$show_descriptive_maps) {
  dp$viz$cat_choro_map(df, "CBSA_CODE", interactive = params$interactive_map)
}

```

### eca x cbsa
```{r maps eca x cbsa}
if (params$show_descriptive_maps) {
  tmp <- scale_fill_discrete
  # scale_fill_discrete <- function(...) scale_fill_brewer(... , palette = "Set3")
  scale_fill_discrete <- function(...) scale_fill_manual(values = c("#8dd3c7", "#ffffb3", "#bebada", "#fb8072"), na.value ="#E0DEDD")
  p <- dp$viz$cat_choro_map(df, "eca_cbsa_xtab", interactive = params$interactive_map, legend = T)
    print(p)
  scale_fill_discrete <- tmp
}


# if (params$show_descriptive_maps) {
#   dp$viz$cat_choro_map(df, "eca_cbsa_xtab", interactive = T, legend = T)
# }
```

### eca x cbsa central
```{r}

if (params$show_descriptive_maps) {
  tmp <- scale_fill_discrete
  # scale_fill_discrete <- function(...) scale_fill_brewer(... , palette = "Set3")
  scale_fill_discrete <- function(...) scale_fill_manual(values = c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c"), na.value ="#E0DEDD")
  p <- dp$viz$cat_choro_map(df, "eca_central_out_xtab", interactive = params$interactive_map, legend = T)
    print(p)
  scale_fill_discrete <- tmp
}


```

### eca x cbsa central
```{r}

if (params$show_descriptive_maps) {
  tmp <- scale_fill_discrete
  # scale_fill_discrete <- function(...) scale_fill_manual(values = c("#1f78b4", "#a6cee3", "#33a02c", "#b2df8a", "#ff7f00"), na.value ="#E0DEDD")
    scale_fill_discrete <- function(...) scale_fill_manual(values = c("Metro only" = "#1f78b4", 
                                                                      "Micro only" = "#a6cee3", 
                                                                      "Destination and Metro" = "#33a02c", 
                                                                      "Destination and Micro" = "#b2df8a", 
                                                                      "Destination Only" = "#ff7f00"), na.value ="#E0DEDD")
  p <- dp$viz$cat_choro_map(df2, "metro_micro_destination", interactive = params$interactive_maps, legend = T)
    print(p)
  scale_fill_discrete <- tmp
}


```



:::

:::



# correlation

```{r cor}
#| warning: false

if (params$show_corr) { 
  df %>% 
    st_drop_geometry() %>% 
    select(where(is.numeric)) %>% 
    na.omit() %>%
    cor()
}

```

```{r corr}
#| warning: false
if (params$show_corr) { 
  df %>% 
    st_drop_geometry() %>% 
    {.[10:30]} %>%
    correlation()
}

```

```{r corr more}
#| warning: false
if (params$show_corr) { 
  df %>% 
    st_drop_geometry() %>% 
    select(where(is.numeric)) %>% 
    na.omit() %>% 
    {.[is.finite(rowSums(.)), ]} %>% 
  chart.Correlation(., histogram = F)
}

```


# regression

::: panel-tabset 
## data manipulation

```{r sink data manip}

for (i in params$reg_factors ){
  if (!paste0("sink_value_", i) %in% names(df)){
    df <- df[df$place == df$eca_membership , c("place", i)] %>% 
      st_drop_geometry() %>% 
      `colnames<-`(c("eca_membership", paste0("sink_value_", i))) %>% 
      {left_join(df, ., by = "eca_membership")}
  }
}

```


```{r central data manip}

for (i in params$reg_factors ){
  if (!paste0("central_value_", i) %in% names(df)){
    df <- df %>% 
      st_drop_geometry() %>% 
      {.[.$CENTRAL_OUTLYING == "central", ]} %>% 
      {aggregate(.[[i]], list(.$CBSA_CODE), FUN = mean)} %>% 
      `colnames<-`(c("CBSA_CODE", paste0("central_value_", i) )) %>% 
      left_join(df, ., by = "CBSA_CODE")
  }
}

```


## specification 1

::: panel-tabset 
### exploration
```{r specification test 1}
#| warning: false

# alpha == source
# beta == sink

# source = b0 + b1_sink + e

if (params$show_test_regression) {
  
  y <- params$reg_factors[params$example_coef_index]
  x <- paste0("sink_value_", y)
  print(y)
  lm_robust(get(y) ~  get(x), data = df) %>% summary()
  lm_robust(get(y) ~  get(x), data = df[df$cluster_members_count > 1, ]) %>% summary()
  lm_robust(get(y) ~  get(x), data = df[df$eca_cluster_category != "Cluster Sink", ]) %>% summary()
  lm_robust(get(y) ~  get(x), data = df[df$eca_cluster_category != "Cluster Sink", ], cluster = eca_membership) %>% summary()
}

```


```{r plot test 1}

if (params$show_test_regression) {
  plot(get(y)  ~  get(x), data = df, ylab = y, xlab = x)
  plot(lm(get(y)  ~  get(x), data = df))
  
  plot(get(y)  ~  get(x), data = df[df$eca_cluster_category != "Cluster Sink", ],  ylab = y, xlab = x)
  plot(lm(get(y)  ~  get(x), data = df[df$eca_cluster_category != "Cluster Sink", ]))
}
```



```{r more plot test 1}

if (params$show_test_regression) {
  ggplot(data = df[df$eca_cluster_category != "Cluster Sink", ], aes(x = get(x), y = get(y))) +
    geom_point() +
    stat_smooth(method = "lm") + 
    labs(x = x, y = y)
  
  ggplot(data = df[df$eca_cluster_category != "Cluster Sink", ], aes(x = log(get(x)), y = log(get(y)))) +
    geom_point() +
    stat_smooth(method = "lm") + 
    labs(x = paste("ln", x), y = paste("ln", y))
}
```

### lm 
::: panel-tabset 
```{r reg 1, results='asis'}
#| warning: false

# alpha == source
# beta == sink

# source = b0 + b1_sink + e

if (params$show_lm_regression) {
  specif <- list()
  for (i in params$reg_factors ){
    specif[[i]] <- df %>% 
      {.[.$eca_cluster_category != "Cluster Sink", ]} %>% 
      {lm_robust(.[[i]] ~  .[[paste0("sink_value_", i)]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- paste0("source_", i)
    specif[[i]]$term[2] <- paste0("sink_", i)
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}


```

:::

### lm clustered errors
::: panel-tabset 
```{r reg 1 cluster, results='asis'}

# source = b0 + b1_sink + e

if (params$show_lm_cluster_regression) {
  specif <- list()
  for (i in params$reg_factors){
     specif[[i]] <- df[df$eca_cluster_category != "Cluster Sink", ] %>% 
       {lm_robust(.[[i]] ~  .[[paste0("sink_value_", i)]], cluster = .[["eca_membership"]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- paste0("source_", i)
    specif[[i]]$term[2] <- paste0("sink_", i)
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}

```
::: 

### lm cluster and share
::: panel-tabset 

```{r reg 1 cluster and share, results='asis'}

# source = b0 + b1_sink + b2_trade_max + b3_sink*trade_max + e

if (params$show_lm_cluster_regression) {
  specif <- list()
  for (i in params$reg_factors){
     specif[[i]] <- df[df$eca_cluster_category != "Cluster Sink", ] %>% 
       {lm_robust(.[[i]] ~  .[[paste0("sink_value_", i)]]*.[["max_trade_share"]], cluster = .[["eca_membership"]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- paste0("source_", i)
    specif[[i]]$term[2] <- paste0("sink_", i)
    specif[[i]]$term[3] <- "max_trade_share"
    specif[[i]]$term[4] <- paste0("sink_", i, " X ", "max_trade_share")
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}

```
:::  
### lm cluster and rural
::: panel-tabset 
```{r reg 1 cluster and rural, results='asis'}

# source = b0 + b1_sink + b2_rural_dummy + b3_sink*rural_dummy + e

if (params$show_lm_cluster_regression) {
  contrasts(factor(df$cbsa_rural_category))
  specif <- list()
  for (i in params$reg_factors){
     specif[[i]] <- df[df$eca_cluster_category != "Cluster Sink", ] %>% 
       {lm_robust(.[[i]] ~  .[[paste0("sink_value_", i)]]*.[["cbsa_rural_category"]], cluster = .[["eca_membership"]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- paste0("source_", i)
    specif[[i]]$term[2] <- paste0("sink_", i)
    specif[[i]]$term[3] <- "rural_dummy"
    specif[[i]]$term[4] <- paste0("sink_", i, " X ", "rural_dummy")
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}

```
:::
::: 

## specification 2
::: panel-tabset 
### exploration

```{r specification test 2}
#| warning: false

# alpha == source
# beta == sink

# outcome = b0 + b1_sink_dummy + e

if (params$show_test_regression) {
  y <- params$reg_factors[params$example_coef_index]
  # r default calc as "is alpha"
  contrasts(factor(df$eca_cluster_category))
  lm_robust(log(get(y)) ~ eca_cluster_category, data = df) %>% summary()
   df %>% 
     mutate(eca_cluster_category = relevel(factor(eca_cluster_category), ref = "Cluster Source")) %>% 
     {contrasts(.$eca_cluster_category)}
   df %>% 
     mutate(eca_cluster_category = relevel(factor(eca_cluster_category), ref = "Cluster Source")) %>% 
     {lm_robust(log(get(y)) ~ eca_cluster_category, data = .)} %>% summary()

}

```

```{r plot test 2}

if (params$show_test_regression) {
  plot(get(y)  ~  factor(eca_cluster_category), data = df, ylab = y)
  plot(lm(get(y)  ~  factor(eca_cluster_category), data = df))
  
  ggplot(data = df, aes(x = factor(eca_cluster_category), y = get(y))) +
    geom_point() +
    stat_smooth(method = "lm") + 
    labs(y = y)
}
```


### lm
::: panel-tabset 
```{r reg 2, results='asis'}
#| warning: false

# alpha == source
# beta == sink

# outcome = b0 + b1_sink_dummy + e

if (params$show_lm_regression) {
  contrasts(relevel(factor(df$eca_cluster_category), ref = "Cluster Source"))
  specif <- list()
  for (i in params$reg_factors){
     specif[[i]] <- df %>%
       mutate(eca_cluster_category = relevel(factor(eca_cluster_category), ref = "Cluster Source")) %>%
       {lm_robust(.[[i]] ~ .$eca_cluster_category)} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- i
    specif[[i]]$term[2] <- "sink_dummy"
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}

```
:::

### lm clustered errors
::: panel-tabset 
```{r reg 2 cluster, results='asis'}

# outcome = b0 + b1_sink_dummy + e
if (params$show_lm_cluster_regression) {
  contrasts(relevel(factor(df$eca_cluster_category), ref = "Cluster Source"))
  specif <- list()
  for (i in params$reg_factors){
     specif[[i]] <- df %>%
       mutate(eca_cluster_category = relevel(factor(eca_cluster_category), ref = "Cluster Source")) %>%
       {lm_robust(.[[i]] ~ .$eca_cluster_category, cluster = .[["eca_membership"]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- i
    specif[[i]]$term[2] <- "sink_dummy"
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}

```
:::

### lm cluster and rural
::: panel-tabset 
```{r reg 2 cluster and rural, results='asis'}

# outcome = b0 + b1_sink_dummy + b2_rural_dummy + b3_sink_dummy*rural_dummy + e

if (params$show_lm_cluster_regression) {
  contrasts(relevel(factor(df$eca_cluster_category), ref = "Cluster Source"))
  contrasts(factor(df$cbsa_rural_category))
  specif <- list()
  for (i in params$reg_factors){
     specif[[i]] <- df %>%
       mutate(eca_cluster_category = relevel(factor(eca_cluster_category), ref = "Cluster Source")) %>%
       {lm_robust(.[[i]] ~ .$eca_cluster_category*.[["cbsa_rural_category"]], cluster = .[["eca_membership"]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- i
    specif[[i]]$term[2] <- "sink_dummy"
    specif[[i]]$term[3] <- "rural_dummy"
    specif[[i]]$term[4] <- paste0("sink_dummy X rural_dummy")
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}

```
:::

::: 
## specification 3
::: panel-tabset 
### exploration

```{r specification test 3}

# alpha == source
# beta == sink

# source = b0 + b1_sink + b2_central + e

if (params$show_test_regression) {
  y <- params$reg_factors[params$example_coef_index]
  x1 <- paste0("sink_value_", y)
  x2 <- paste0("central_value_", y)
  
  print(y)
  lm(get(y) ~  get(x1) + get(x2), data = df[df$eca_central_out_xtab == "Outlying Source", ] ) %>% summary()
  lm_robust(get(y) ~  get(x1) + get(x2), data = df[df$eca_central_out_xtab == "Outlying Source", ], cluster = eca_membership) %>% summary()
}

```


```{r plot test 3}

if (params$show_test_regression) {
  plot(get(y) ~  get(x1) + get(x2), data = df[df$eca_central_out_xtab == "Outlying Source", ], ylab = y, xlab = x)
  plot(lm(get(y) ~  get(x1) + get(x2), data = df[df$eca_central_out_xtab == "Outlying Source", ]))
}
```

```{r more plot test 3}

if (params$show_test_regression) {
  ggplot(data = df[df$eca_central_out_xtab == "Outlying Source", ] , aes(x = get(x2), y = get(y))) +
    geom_point() +
    stat_smooth(method = "lm") +
    labs(x = x2, y = y)
  
  ggplot(data = df[df$eca_central_out_xtab == "Outlying Source", ] , aes(x = log(get(x2)), y = log(get(y)))) +
    geom_point() +
    stat_smooth(method = "lm") +
    labs(x = paste("ln", x2), y = paste("ln", y))
}

```


### lm
::: panel-tabset 
```{r reg 3, results='asis'}
#| warning: false

# alpha == source
# beta == sink

# source = b0 + b1_sink + b2_central + e

if (params$show_lm_regression) {
  specif <- list()
  for (i in params$reg_factors ){
    specif[[i]] <- df %>% 
      {.[.$eca_central_out_xtab == "Outlying Source" & df$cbsa_of_eca != df$CBSA_CODE, ] } %>% 
      {lm_robust(.[[i]] ~  .[[paste0("sink_value_", i)]] + .[[paste0("central_value_", i)]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- paste0("source_", i)
    specif[[i]]$term[2] <- paste0("sink_", i)
    specif[[i]]$term[3] <- paste0("central_", i)
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}
    

```
::: 

### lm clustered errors
::: panel-tabset 
```{r reg 3 cluster, results='asis'}

# TODO: think about clustering over .[["eca_membership"]] and .[["CBSA_CODE"]] ?

# source = b0 + b1_sink + b2_central + e

if (params$show_lm_cluster_regression) {
  specif <- list()
  for (i in params$reg_factors){
     specif[[i]] <- df[df$eca_central_out_xtab == "Outlying Source" & df$cbsa_of_eca != df$CBSA_CODE, ] %>% 
       {lm_robust(.[[i]] ~  .[[paste0("sink_value_", i)]] + .[[paste0("central_value_", i)]], cluster = .[["eca_membership"]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- paste0("source_", i)
    specif[[i]]$term[2] <- paste0("sink_", i)
    specif[[i]]$term[3] <- paste0("central_", i)
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}

```
::: 

### lm cluster and share
::: panel-tabset 
```{r reg 3 cluster and share, results='asis'}

# source = b0 + b1_sink + b2_trade_max + b3_central + b4_sink*trade_max + e

if (params$show_lm_cluster_regression) {
  specif <- list()
  for (i in params$reg_factors){
     specif[[i]] <- df[df$eca_central_out_xtab == "Outlying Source" & df$cbsa_of_eca != df$CBSA_CODE, ] %>% 
       {lm_robust(.[[i]] ~  .[[paste0("sink_value_", i)]]*.[["max_trade_share"]] + .[[paste0("central_value_", i)]] + .[["max_trade_share"]], cluster = .[["eca_membership"]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- paste0("source_", i)
    specif[[i]]$term[2] <- paste0("sink_", i)
    specif[[i]]$term[3] <- "max_trade_share"
    specif[[i]]$term[4] <- paste0("central_", i)
    specif[[i]]$term[5] <- paste0("sink_", i, " X ", "max_trade_share")
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}

```
::: 

::: 
## specification 4

::: panel-tabset 
### exploration

```{r specification test 4}
#| warning: false

# outlying = b0 + b1_central + e

if (params$show_test_regression) {
  y <- params$reg_factors[params$example_coef_index]
  x <- paste0("central_value_", y)
  
  print(y)
  lm_robust(get(y) ~  get(x), data = df) %>% summary()
  lm_robust(get(y) ~  get(x), data = df[df$cbsa_members_count > 1, ]) %>% summary()
  lm_robust(get(y) ~  get(x), data = df[df$CENTRAL_OUTLYING != "central", ]) %>% summary()
  lm_robust(get(y) ~  get(x), data = df[df$CENTRAL_OUTLYING != "central", ], cluster = CBSA_CODE) %>% summary()
}

```


### lm
::: panel-tabset 
```{r reg 4, results='asis'}
#| warning: false

# outlying = b0 + b1_central + e

if (params$show_lm_regression) {
  specif <- list()
  for (i in params$reg_factors ){
    specif[[i]] <- df %>% 
      {.[.$CENTRAL_OUTLYING != "central", ]} %>% 
      {lm_robust(.[[i]] ~  .[[paste0("central_value_", i)]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- paste0("outlying_", i)
    specif[[i]]$term[2] <- paste0("central_", i)
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}

```
::: 

### lm clustered errors
::: panel-tabset 
```{r reg 4 cluster, results='asis'}

# outlying = b0 + b1_central + e

if (params$show_lm_cluster_regression) {
  specif <- list()
  for (i in params$reg_factors ){
    specif[[i]] <- df %>% 
      {.[.$CENTRAL_OUTLYING != "central", ]} %>% 
      {lm_robust(.[[i]] ~  .[[paste0("central_value_", i)]], cluster = .[["CBSA_CODE"]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- paste0("outlying_", i)
    specif[[i]]$term[2] <- paste0("central_", i)
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}

```
:::
::: 

## specification 5
::: panel-tabset 

### lm clustered errors

```{r}
if(FALSE){
  tmp <- df %>% 
  mutate(eca_membership = ifelse(cbsa_rural_category == "rural", eca_membership, "NA")) %>% 
  arrange(eca_membership)
dp$viz$cat_choro_map(tmp, "eca_membership", interactive = T)
}

if(FALSE){

d_unrest <- dp$call_dist_mat(params$year) %>% 
  drop_units() %>% 
  as.data.frame.table() %>% 
  `colnames<-`(c("rows", "cols", "distance")) %>% 
  mutate(sample = c("All county pairs")) %>% 
  {.[.$rows %in% df[df$cbsa_rural_category == "rural", ]$place, ]} %>% 
  {.[.$distance != 0, ]} %>% 
  mutate(distance = dp$meters2miles(distance)/100)

d_rest <- dp$call_dist_mat(params$year) %>% 
  drop_units() %>% 
  as.data.frame.table() %>% 
  `colnames<-`(c("rows", "cols", "distance")) %>% 
  mutate(sample = c("restricted")) %>% 
  {.[.$rows %in% df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink", ]$place, ]} %>% 
  {.[.$cols %in% df[df$eca_cluster_category == "Cluster Sink", ]$place, ]} %>% 
  {.[.$distance != 0, ]} %>% 
  mutate(distance = dp$meters2miles(distance)/100)

d_model <- df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink", ] %>% 
  st_drop_geometry() %>% 
  {.[c("place", "eca_membership", "eca_center_distance")]} %>%
  `colnames<-`(c("rows", "cols", "distance")) %>%  
  mutate(sample = c("ECA source-destination"))


dft <- rbind(test, d_rest, d_model)
dft <- rbind(d_unrest, d_model)

dp$viz$density_dist_plot(dft, "distance", "sample")
dft[dft$distance > 0, ] %>% dp$viz$density_dist_plot(., "distance", "sample") + scale_x_log10()

}


```

::: panel-tabset 
```{r specification test 5}
#| warning: false

# variation over rural places only 
# source = b0 + b1_sink + e

if (params$show_lm_cluster_regression) {
  contrasts(factor(df$cbsa_rural_category))
  specif <- list()
  for (i in params$reg_factors){
     specif[[i]] <- df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink", ] %>% 
       {lm_robust(.[[i]] ~  .[[paste0("sink_value_", i)]], cluster = .[["eca_membership"]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- paste0("source_", i)
    specif[[i]]$term[2] <- paste0("sink_", i)
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}

if (FALSE){
  # log-log 
  if (params$show_lm_cluster_regression) {
  contrasts(factor(df$cbsa_rural_category))
  specif <- list()
  cl <- c("gross_output", "population", "employment", "jobs", "payroll", "establishments")
  for (i in cl){
     specif[[i]] <- df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink" & df[[i]] > 0 & !is.na(df[[i]]), ] %>%
       {lm_robust(log(.[[i]]) ~  log(.[[paste0("sink_value_", i)]]), cluster = .[["eca_membership"]])} %>%
      dp$round_stats()
    specif[[i]]$outcome <- paste0("source_", i)
    specif[[i]]$term[2] <- paste0("sink_", i)
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}
}
```





```{r}
if (params$show_lm_cluster_regression) {
  contrasts(factor(df$cbsa_rural_category))
  specif <- list()
  for (i in params$reg_factors){
     specif[[i]] <- df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink", ] %>% 
       {lm_robust(.[[i]] ~  .[["sink_value_jobs_gr"]], cluster = .[["eca_membership"]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- paste0("source_", i)
    specif[[i]]$term[2] <- "sink_value_job_gr"
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}
```

```{r}
if (params$show_lm_cluster_regression) {
  contrasts(factor(df$cbsa_rural_category))
  specif <- list()
  for (i in params$reg_factors){
     specif[[i]] <- df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink", ] %>% 
       {lm_robust(.[[i]] ~  .[[paste0("sink_value_", i)]] + .[["sink_value_jobs_gr"]], cluster = .[["eca_membership"]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- paste0("source_", i)
    specif[[i]]$term[2] <- paste0("sink_", i)
    specif[[i]]$term[3] <- "sink_value_job_gr"
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}

```

```{r}

# source = b0 + b1_sink + b2_trade_max + b3_sink*trade_max + e

if (params$show_lm_cluster_regression) {
  specif <- list()
  for (i in params$reg_factors){
     specif[[i]] <- df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink", ] %>% 
       {lm_robust(.[[i]] ~  .[[paste0("sink_value_", i)]]*.[["max_trade_share"]], cluster = .[["eca_membership"]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- paste0("source_", i)
    specif[[i]]$term[2] <- paste0("sink_", i)
    specif[[i]]$term[3] <- "max_trade_share"
    specif[[i]]$term[4] <- paste0("sink_", i, " X ", "max_trade_share")
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}

```

```{r}

# source = b0 + b1_sink + b2_eca_distance + b3_sink*eca_distance + e

if (params$show_lm_cluster_regression) {
  specif <- list()
  for (i in params$reg_factors){
     specif[[i]] <- df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink", ] %>% 
       {lm_robust(.[[i]] ~  .[[paste0("sink_value_", i)]]*.[["eca_center_distance"]], cluster = .[["eca_membership"]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- paste0("source_", i)
    specif[[i]]$term[2] <- paste0("sink_", i)
    specif[[i]]$term[3] <- "eca_distance"
    specif[[i]]$term[4] <- paste0("sink_", i, " X ", "eca_distance")
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}

```

:::

### lm clustered errors pop weighted
::: panel-tabset 
```{r specification test 5 weighted}
#| warning: false

# variation over rural places only population weighted
# source = b0 + b1_sink + e

if (params$show_lm_cluster_regression) {
    # population weights
  contrasts(factor(df$cbsa_rural_category))
  specif <- list()
  for (i in params$reg_factors){
     specif[[i]] <- df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink", ] %>% 
       {lm_robust(.[[i]] ~  .[[paste0("sink_value_", i)]], cluster = .[["eca_membership"]], weight = .[["population"]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- paste0("source_", i)
    specif[[i]]$term[2] <- paste0("sink_", i)
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}

```
:::

### lm clustered errors distance control
::: panel-tabset 
```{r}
#| warning: false

# variation over rural places only distance controlled
# source = b0 + b1_sink + b2_dist2sink + e

library(sandwich)

library(sjPlot)
# library(sjmisc)

library(modelsummary)

if (params$show_lm_cluster_regression) {
  specif <- list()
  df_mod <- list()
  tbm <- list()
  mvc <- list()
  for (i in params$reg_factors){
    y <- i
    x1 <- paste0("sink_value_", i)
    x2 <- "eca_center_distance"
    clust <- "eca_membership"
    df_reg <- df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink", ] %>% 
      st_drop_geometry()
        
    df_mod[[i]] <- df_reg %>% 
      select(y, x1, x2, clust) %>% 
      na.omit() 
    
    fm <- as.formula(paste(i, "~", x1, "*", x2))
    
    specif[[i]] <- lm(fm, data = df_reg)
    
    # tbm[[i]] <- tab_model(specif[[i]], show.se = TRUE, vcov.fun = "CL", vcov.args = list(type = "HC2", cluster = df_mod[[clust]]))
    
    mvc[[i]] <- vcovCL(x = specif[[i]], type = "HC2", cluster = df_mod[[i]][["eca_membership"]])

  }
}
msummary(specif)
msummary(specif[[1]], vcov = vcovCL(x = specif[[1]], type = "HC2", cluster = df_tmp$eca_membership), stars = TRUE)
msummary(specif, vcov = mvc, stars = TRUE)
specif[1:7] %>% 
  `names<-`(c("Entry Rate", "Exit Rate", "Establishment Growth", "Wage", "Wage Growth", "Job Growth", "Payroll Growth")) %>%  
  {msummary(., 
            vcov = mvc[1:7], 
            statistic = c("conf.int", "{std.error}", "{p.value}"), 
            estimate = "{estimate}{stars}", 
            coef_map = c("(Intercept)" = "(Intercept)",
                         "destination_value" = "Destination Value",
                         "eca_distance" = "Distance", 
                         "destination_value:eca_distance" = "Destination x Distance") )}

tab_model(specif[[1]], vcov.fun = "HC3", show.se = TRUE)



# df_tmp <- df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink", ] %>% st_drop_geometry() %>% select(entry_rate, sink_value_entry_rate, eca_center_distance, eca_membership) %>% 
# na.omit()
# 
# df_tmp <- df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink", ] %>% st_drop_geometry() 
# reg <- lm(jobs_gr ~ sink_value_jobs_gr * eca_center_distance, data = df_tmp)
# cplot(reg, "eca_center_distance")
# 
# plot_model(reg, type = "pred", terms = c("eca_center_distance", "sink_value_jobs_gr"))
# plot_model(reg, type = "int")
# plot_model(reg, type = "pred", terms = c("sink_value_jobs_gr", "eca_center_distance [1, 5]"))



plot_model(specif[[1]], type = "pred", terms = c("eca_center_distance"))
plot_model(specif[[1]], type = "pred", terms = c("eca_center_distance"), vcov.fun = "CL", vcov.args = list(type = "HC2", cluster = df_mod[[1]]$eca_membership))

plot_model(model = specif[[1]], 
           type = "pred", 
           terms = c("sink_value_entry_rate", "eca_center_distance [1, 5]"), 
           vcov.fun = "CL", 
           vcov.args = list(type = "HC2", 
                            cluster = df_mod[[1]]$eca_membership))

  for (i in params$reg_factors){
    plot_model(model = specif[[i]], 
               type = "pred", 
               terms = c(paste0("sink_value_", i), "eca_center_distance [1, 5]"), 
               vcov.fun = "CL", 
               vcov.args = list(type = "HC2", 
                                cluster = df_mod[[i]]$eca_membership)) %>% print()
  }
  
  
tab_model(specif[[1]], vcov.fun = "CL", vcov.args = list(type = "HC2", cluster = df_mod[[1]]$eca_membership), show.se = TRUE)

plot_model(reg, type = "int",  mdrt.values = "minmax") + 
  theme_minimal() + 
  labs(x = underscores2title(test$labels$x), 
       y = underscores2title(test$labels$y), 
       colour = underscores2title(test$labels$colour), 
       title = "Predicted Values")

```




```{r}
#| warning: false

library(sandwich)
library(sjPlot)
library(modelsummary)
library(patchwork)

if (params$show_lm_cluster_regression) {
  specif <- list()
  df_mod <- list()
  mvc <- list()
  for (i in params$reg_factors){
    y <- i
    x1 <- paste0("sink_value_", i)
    x2 <- "eca_center_distance"
    clust <- "eca_membership"
    df_reg <- df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink", ] %>% 
      st_drop_geometry()
        
    df_mod[[i]] <- df_reg %>% 
      select(y, x1, x2, clust) %>% 
      na.omit() %>% 
      rename(destination_value = x1) %>%
      rename(eca_distance = x2)

    fm <- as.formula(paste(i, "~", "destination_value", "*", "eca_distance"))
    
    specif[[i]] <- lm(fm, data = df_mod[[i]])

    mvc[[i]] <- vcovCL(x = specif[[i]], type = "HC2", cluster = df_mod[[i]][["eca_membership"]])

  }
}


coef_names <- c(
  "Entry Rate",
  "Exit Rate", 
  "Establishment Growth",
  "Wage", 
  "Wage Growth", 
  "Job Growth", 
  "Payroll Growth", 
  "Unemployment Rate", 
  "Laborforce Rate", 
  "Employment Growth", 
  "Poverty Rate", 
  "Income Rate", 
  "Poverty Growth", 
  "Income Growth", 
  "Population Growth", 
  "YPLL75", 
  "Highschool Graduation Rate", 
  "Net Migration Rate")

ssf <- 1:7
specif[ssf] %>% 
  `names<-`(coef_names[ssf]) %>%  
  {msummary(., 
            vcov = mvc[ssf], 
            statistic = c("conf.int", "{std.error}", "{p.value}"), 
            estimate = "{estimate}{stars}", 
            coef_map = c("(Intercept)" = "(Intercept)",
                         "destination_value" = "Destination Value",
                         "eca_distance" = "Distance", 
                         "destination_value:eca_distance" = "Destination x Distance") )}
ssf <- 8:14
specif[ssf] %>% 
  `names<-`(coef_names[ssf]) %>%  
  {msummary(., 
            vcov = mvc[ssf], 
            statistic = c("conf.int", "{std.error}", "{p.value}"), 
            estimate = "{estimate}{stars}", 
            coef_map = c("(Intercept)" = "(Intercept)",
                         "destination_value" = "Destination Value",
                         "eca_distance" = "Distance", 
                         "destination_value:eca_distance" = "Destination x Distance") )}


ssf <- 15:18
specif[ssf] %>% 
  `names<-`(coef_names[ssf]) %>%  
  {msummary(., 
            vcov = mvc[ssf], 
            statistic = c("conf.int", "{std.error}", "{p.value}"), 
            estimate = "{estimate}{stars}", 
            coef_map = c("(Intercept)" = "(Intercept)",
                         "destination_value" = "Destination Value",
                         "eca_distance" = "Distance", 
                         "destination_value:eca_distance" = "Destination x Distance") )}


for(i in 1:length(coef_names)){
  pm <- plot_model(model = specif[[i]], 
                    type = "pred", 
                    terms = c("destination_value", "eca_distance [1, 5]"), 
                    vcov.fun = "CL", 
                    vcov.args = list(type = "HC2", 
                                    cluster = df_mod[[i]]$eca_membership)) 
    p <- pm + 
      theme_minimal() +
      theme(legend.justification = c(1,0), 
            legend.position = c(1,0), 
            legend.background = element_rect(fill = "white", linewidth = 0.1)) +
      labs(x = "Destination Value", 
           y = coef_names[i], 
           colour = "Distance (miles)", 
           title = element_blank()) +
      scale_colour_discrete(labels = c("100", "500")) + 
      guides(color = guide_legend(override.aes = list(fill = NA)))
    
    denx <- ggplot(df_mod[[i]], aes(get(pm$labels$x))) + 
      geom_histogram(color = "grey", fill = "white", bins = 50) + 
      theme_void()
    
    deny <- ggplot(df_mod[[i]], aes(get(pm$labels$y))) + 
      geom_histogram(color = "grey", fill = "white", bins = 50) + 
      theme_void() + 
      coord_flip()

  dp <- denx + plot_spacer() + p + deny + 
      plot_layout(
        ncol = 2, 
        nrow = 2, 
        widths = c(4, 1),
        heights = c(1, 4) ) 

  print(dp)
  ggsave(glue("/Users/austinsandler/Downloads/{names(specif)[[i]]}.png"), bg = "white")
  
}

for(i in 1:length(coef_names)){
  pm <- plot_model(model = specif[[i]], 
                    type = "pred", 
                    terms = c("eca_distance"), 
                    vcov.fun = "CL", 
                    vcov.args = list(type = "HC2", 
                                    cluster = df_mod[[i]]$eca_membership)) 
    p <- pm + 
      theme_minimal() +
      theme(legend.justification = c(1,0), 
            legend.position = c(1,0), 
            legend.background = element_rect(fill = "white", linewidth = 0.1)) +
      labs(x = "Distance (100's of miles)", 
           y = coef_names[i], 
           colour = "Distance (miles)", 
           title = element_blank()) +
      scale_colour_discrete(labels = c("100", "500")) + 
      guides(color = guide_legend(override.aes = list(fill = NA)))
    
    denx <- ggplot(df_mod[[i]], aes(get(pm$labels$x))) + 
      geom_histogram(color = "grey", fill = "white", bins = 50) + 
      theme_void()
    
    deny <- ggplot(df_mod[[i]], aes(get(pm$labels$y))) + 
      geom_histogram(color = "grey", fill = "white", bins = 50) + 
      theme_void() + 
      coord_flip()

  dp <- denx + plot_spacer() + p + deny + 
      plot_layout(
        ncol = 2, 
        nrow = 2, 
        widths = c(4, 1),
        heights = c(1, 4) ) 

  print(dp)
  # ggsave(glue("/Users/austinsandler/Downloads/{names(specif)[[i]]}.png"), bg = "white")
}


  
for(i in 1:length(coef_names)){
  pm <- plot_model(model = specif[[i]], 
                    type = "pred", 
                    terms = c("eca_distance", "destination_value"), 
                    vcov.fun = "CL", 
                    vcov.args = list(type = "HC2", 
                                    cluster = df_mod[[i]]$eca_membership)) 
    p <- pm + 
      theme_minimal() +
      theme(legend.justification = c(1,0), 
            legend.position = c(1,0), 
            legend.background = element_rect(fill = "white", linewidth = 0.1)) +
      labs(x = "Distance (100's of miles)", 
           y = coef_names[i], 
           colour = "Distance (miles)", 
           title = element_blank()) +
      guides(color = guide_legend(override.aes = list(fill = NA)))
    
    denx <- ggplot(df_mod[[i]], aes(get(pm$labels$x))) + 
      geom_histogram(color = "grey", fill = "white", bins = 50) + 
      theme_void()
    
    deny <- ggplot(df_mod[[i]], aes(get(pm$labels$y))) + 
      geom_histogram(color = "grey", fill = "white", bins = 50) + 
      theme_void() + 
      coord_flip()

  dp <- denx + plot_spacer() + p + deny + 
      plot_layout(
        ncol = 2, 
        nrow = 2, 
        widths = c(4, 1),
        heights = c(1, 4) ) 

  print(dp)
  # ggsave(glue("/Users/austinsandler/Downloads/{names(specif)[[i]]}.png"), bg = "white")
}



# margins(specif[[i]])
# margins(specif[[i]], at = list(eca_distance = fivenum(df_mod[[i]]$eca_distance)))
# cplot(specif[[i]], "eca_distance", what = "effect")


for(i in 1:length(coef_names)){

  me <- margins_summary(model = specif[[i]], 
                        variables = "destination_value", 
                        at = list(eca_distance = fivenum(df_mod[[i]]$eca_distance)), 
                        vcov = mvc[[i]])
  p <- ggplot(me, aes(x = eca_distance, y = AME, ymin = lower, ymax = upper)) +
    geom_ribbon(fill = "#332288", alpha = .2) +
    geom_line(color = "#332288") +
    geom_hline(yintercept = 0) +
    theme_minimal() +
    labs(x = "Distance (miles)",
         y = glue(coef_names[i], ": Average Marginal Effect")) +
    scale_x_continuous(labels = label_comma(scale = 100)) +
    scale_y_continuous(limits = c(-3.2, 2))
    
    denx <- ggplot(df_mod[[i]], aes(eca_distance)) + 
      geom_histogram(color = "grey", fill = "white", bins = 50) + 
      theme_void()
    

  dp <- denx + plot_spacer() + p + 
      plot_layout(
        ncol = 2, 
        nrow = 2, 
        widths = c(4, 1),
        heights = c(1, 4) ) 
  
  print(dp)
  ggsave(glue("/Users/austinsandler/Downloads/AME_{names(specif)[[i]]}.png"), bg = "white")
}



```




```{r specification test 5 distance}
#| warning: false

# variation over rural places only distance controlled
# source = b0 + b1_sink + b2_dist2sink + e

df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink", ]$eca_center_distance %>% summary()

if (params$show_lm_cluster_regression) {
  specif <- list()
  for (i in params$reg_factors){
     specif[[i]] <- df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink", ] %>% 
       {lm_robust(.[[i]] ~  .[[paste0("sink_value_", i)]] + .[["eca_center_distance"]], cluster = .[["eca_membership"]])} %>% 
      dp$round_stats()
    specif[[i]]$outcome <- paste0("source_", i)
    specif[[i]]$term[2] <- paste0("sink_", i)
    specif[[i]]$term[3] <- "distance"
    cat('####', i, ' \n')
    paste(i, "F df =", specif[[i]]$fstatistic[3]) %>% print()
    specif[[i]] %>% tidy(conf.int = T) %>% knitr::kable() %>% print()
    cat('  \n')
  }
}

```



:::

### lm plot
::: panel-tabset 

```{r specification test 5 plot}
#| warning: false

# variation over rural places only 
# source = b0 + b1_sink + e

for (i in params$reg_factors){
  y <- i
  x <- paste0("sink_value_", y)
  p <- ggplot(data = df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink", ], aes(x = get(x), y = get(y))) +
    geom_point() +
    stat_smooth(method = "lm") +
    labs(x = x, y = y)
  print(p)
}

```
::: 

### lm plot log
::: panel-tabset 
```{r specification test 5 plot log}
#| warning: false

# variation over rural places only 
# source = b0 + b1_sink + e

for (i in params$reg_factors){
  y <- i
  x <- paste0("sink_value_", y)
  p <- ggplot(data = df[df$cbsa_rural_category == "rural" & df$eca_cluster_category != "Cluster Sink", ], aes(x = log(get(x)), y = log(get(y)))) +
    geom_point() +
    stat_smooth(method = "lm") + 
    labs(x = paste("ln", x), y = paste("ln", y))
  print(p)
}

```
::: 

:::


```{r share distance}
#| warning: false


# g(i) = b0 + b1*r(i) + b(2)*d(i) + e(i)

tf <- dp$call_trade_flows("all_industries")
M <- sweep(tf, 1, rowSums(tf), "/")
M[is.na(M)] <- 0

D_inv <- dp$call_dist_mat(year = params$year) %>%
  drop_units() %>%
  {1/(.)}
  diag(D_inv) <- 0
  D_inv <- sweep(D_inv, 1, rowSums(D_inv), "/")
    diag(D_inv) <- 0
    
D_sqr <- dp$call_dist_mat(year = params$year) %>%
  drop_units() %>%
  {1/(.^2)}
  diag(D_sqr) <- 0
  D_sqr <- sweep(D_sqr, 1, rowSums(D_sqr), "/")
    diag(D_sqr) <- 0

D_qnn <- dp$call_bprox_mat(year = params$year)
diag(D_qnn) <- 0 
D_qnn <- sweep(D_qnn, 1, rowSums(D_qnn), "/")
    diag(D_qnn) <- 0 

  
  # X <-  intersect(m_names, d_names) %>% {M[., .]-D[., .]}

m_names <- row.names(M)
d_names <- row.names(D_inv)

g <- df[match(intersect(m_names, d_names), df$place), ,drop=F] %>% 
  {.[[params$reg_factors[7]]]} %>% 
  as.matrix() %>% 
  `colnames<-`(c("growth_rate"))  %>% 
  `rownames<-`(df$place) %>% 
  na.omit()

r <- intersect(m_names, d_names) %>% intersect(., rownames(g)) %>% {M[., .] %*% g}
d_inv <- intersect(m_names, d_names) %>% intersect(., rownames(g)) %>% {D_inv[., .] %*% g}
d_sqr <- intersect(m_names, d_names) %>% intersect(., rownames(g)) %>% {D_sqr[., .] %*% g}
d_qnn <- intersect(m_names, d_names) %>% intersect(., rownames(g)) %>% {D_qnn[., .] %*% g}

# x <- intersect(m_names, d_names) %>% intersect(., rownames(g)) %>% {X[., .] %*% g}
# df_grd <- data.frame(g,  r,  d, x) %>% 
#    `colnames<-`(c("growth_rate", "trade_weighted_growth", "neighbor_growth_rate", "weights_rates"))

df_grd <- data.frame(g,  r,  d_inv, d_sqr, d_qnn) %>% 
   `colnames<-`(c("growth_rate", "trade_weighted_growth", "inv_neighbor_growth_rate", "sqr_neighbor_growth_rate", "qnn_neighbor_growth_rate"))

# df_grd <- df_grd %>% mutate_all(~(scale(.) %>% as.vector))

reg1 <- lm_robust(growth_rate ~ trade_weighted_growth + inv_neighbor_growth_rate, data = df_grd) 
reg2 <- lm_robust(growth_rate ~ trade_weighted_growth + sqr_neighbor_growth_rate, data = df_grd) 
reg3 <- lm_robust(growth_rate ~ trade_weighted_growth + qnn_neighbor_growth_rate, data = df_grd) 

lm(growth_rate ~ trade_weighted_growth + inv_neighbor_growth_rate, data = na.omit(df_grd))  %>% AIC()
lm(growth_rate ~ trade_weighted_growth + sqr_neighbor_growth_rate, data = na.omit(df_grd))  %>% AIC()
lm(growth_rate ~ trade_weighted_growth + qnn_neighbor_growth_rate, data = na.omit(df_grd))  %>% AIC()

lm(growth_rate ~ trade_weighted_growth + inv_neighbor_growth_rate, data = na.omit(df_grd))  %>% BIC()
lm(growth_rate ~ trade_weighted_growth + sqr_neighbor_growth_rate, data = na.omit(df_grd))  %>% BIC()
lm(growth_rate ~ trade_weighted_growth + qnn_neighbor_growth_rate, data = na.omit(df_grd))  %>% BIC()

lm(growth_rate ~ trade_weighted_growth + inv_neighbor_growth_rate, data = na.omit(df_grd)) %>% summary()
lm(growth_rate ~ trade_weighted_growth + sqr_neighbor_growth_rate, data = na.omit(df_grd)) %>% summary()
lm(growth_rate ~ trade_weighted_growth + qnn_neighbor_growth_rate, data = na.omit(df_grd)) %>% summary()


# reg <- lm_robust(growth_rate ~ trade_weighted_growth + neighbor_growth_rate, data = df_grd)  
# reg <- lm_robust(growth_rate ~ weights_rates, data = df_grd)  

summary(df_grd)
df_grd %>% na.omit() %>% cor()
summary(reg)
vcov(reg)
margins(reg) %>% summary()

cplot(reg, "trade_weighted_growth")
# ggplot(cplot(reg, "trade_weighted_growth", draw = FALSE), aes(x = xvals)) + 
#   geom_line(aes(y = yvals)) +
#   geom_line(aes(y = upper), linetype = 2) +
#   geom_line(aes(y = lower), linetype = 2) +
#   geom_hline(yintercept = 0) +
#   xlab("trade_weighted_growth") + ylab("Predicted Value")

cplot(reg, "neighbor_growth_rate")
# ggplot(cplot(reg, "neighbor_growth_rate", draw = FALSE), aes(x = xvals)) + 
#   geom_line(aes(y = yvals)) +
#   geom_line(aes(y = upper), linetype = 2) +
#   geom_line(aes(y = lower), linetype = 2) +
#   geom_hline(yintercept = 0) +
#   xlab("neighbor_growth_rate") + ylab("Predicted Value")

plot(lm(growth_rate  ~  neighbor_growth_rate, data = df_grd))

ggplot(data = df_grd, aes(x = trade_weighted_growth, y = growth_rate)) +
  geom_point() +
  stat_smooth(method = "lm") 

ggplot(data = df_grd, aes(x = neighbor_growth_rate, y = growth_rate)) +
  geom_point() +
  stat_smooth(method = "lm") 





# grep("_gr$", params$reg_factors, value = T)


```



### randomized placebo

```{r dataframe }


# In this robustness check, we randomize assignment of ECAs

df_eca_random = df %>%
  filter(eca_cluster_category == "Cluster Source")

temp_eca_membership = df_eca_random$eca_membership

# every time this is run, it will re-randomize the assignment, so I crudely commented the following line after running initial randomization:
random_eca = sample(temp_eca_membership) 

df_eca_random = cbind(df_eca_random, random_eca)

```




:::
:::
::: 













