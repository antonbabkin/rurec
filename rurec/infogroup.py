# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/nbs/infogroup.ipynb (unless otherwise specified).

__all__ = ['validate_raw_strings', 'convert_dtypes', 'validate_raw_numbers', 'get_df']

# Cell
import json
import gzip
import shutil

import numpy as np
import pandas as pd
import fastparquet
from IPython import display

from rurec import resources
from .resources import Resource
from rurec import util

# Cell
def validate_raw_strings(df):
    """Validate values in raw InfoGroup data according to string constraints.
    Return list of dicts of invalid values.
    """

    constraints = {
        'STATE': {'cats': ['AK','AL','AR','AZ','CA','CO','CT','DC','DE','FL','GA','HI','IA',
                           'ID','IL','IN','KS','KY','LA','MA','MD','ME','MI','MN','MO','MS',
                           'MT','NC','ND','NE','NH','NJ','NM','NV','NY','OH','OK','OR','PA',
                           'PR','RI','SC','SD','TN','TX','UT','VA','VI','VT','WA','WI','WV','WY']},
        'ZIP': {'number': True, 'nchar': 5},
        'ZIP4': {'number': True, 'nchar': 4},
        'COUNTY_CODE': {'number': True, 'nchar': 3},
        'AREA_CODE': {'number': True, 'nchar': 3},
        'ID_CODE': {'cats': ['1', '2']},
        'SIC': {'number': True, 'nchar': 6},
        'SIC0': {'number': True, 'nchar': 6},
        'SIC1': {'number': True, 'nchar': 6},
        'SIC2': {'number': True, 'nchar': 6},
        'SIC3': {'number': True, 'nchar': 6},
        'SIC4': {'number': True, 'nchar': 6},
        'NAICS': {'number': True, 'nchar': 8},
        'YEAR': {'notna': True, 'number': True},
        'YP_CODE': {'number': True, 'nchar': 5},
        'EMPLOYEES': {'number': True},
        'SALES': {'number': True},
        'PARENT_EMPLOYEES': {'number': True},
        'PARENT_SALES': {'number': True},
        'EMPLOYEES_CODE': {'cats': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K']},
        'SALES_CODE': {'cats': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K']},
        'PARENT_EMPLOYEES_CODE': {'cats': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K']},
        'PARENT_SALES_CODE': {'cats': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K']},
        'BUSINESS_STATUS': {'cats': ['1', '2', '3', '9']},
        'YEAR_EST': {'number': True},
        'OFFICE_SIZE_CODE': {'cats': ['A', 'B', 'C', 'D', 'E', 'F']},
        'HOLDING_STATUS': {'cats': ['0', '1', '2']},
        'ABI': {'unique': True, 'notna': True, 'number': True, 'nchar': 9},
        'SUBSIDIARY_NUMBER': {'number': True, 'nchar': 9},
        'PARENT_NUMBER': {'number': True, 'nchar': 9},
        'SITE_NUMBER': {'number': True, 'nchar': 9},
        'ADDRESS_TYPE': {'cats': ['F', 'G', 'H', 'M', 'P', 'R', 'S', 'N']},
        'POPULATION_CODE': {'cats': ['1', '5', '6', '7', '8', '9']},
        'CENSUS_TRACT': {'number': True, 'nchar': 6},
        'CENSUS_BLOCK': {'number': True, 'nchar': 1},
        'LATITUDE': {'number': True},
        'LONGITUDE': {'number': True},
        'MATCH_CODE': {'cats': ['0', '2', '4', 'P', 'X']},
        'CBSA_CODE': {'number': True, 'nchar': 5},
        'CBSA_LEVEL': {'cats': ['1', '2']},
        'CSA_CODE': {'number': True, 'nchar': 3},
        'FIPS_CODE': {'number': True, 'nchar': 5}
    }
    return util.validate_values(df, constraints)


def convert_dtypes(df):
    """Inplace convert string columns to appropriate types."""

    for col in ['YEAR', 'EMPLOYEES', 'SALES', 'PARENT_EMPLOYEES', 'PARENT_SALES', 'YEAR_EST', 'LATITUDE', 'LONGITUDE']:
        df[col] = pd.to_numeric(df[col])

    cat_cols = {
        'STATE': ['AK','AL','AR','AZ','CA','CO','CT','DC','DE','FL','GA','HI','IA',
                   'ID','IL','IN','KS','KY','LA','MA','MD','ME','MI','MN','MO','MS',
                   'MT','NC','ND','NE','NH','NJ','NM','NV','NY','OH','OK','OR','PA',
                   'PR','RI','SC','SD','TN','TX','UT','VA','VI','VT','WA','WI','WV','WY'],
        'ID_CODE': ['1', '2'],
        'EMPLOYEES_CODE': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K'],
        'SALES_CODE': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K'],
        'PARENT_EMPLOYEES_CODE': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K'],
        'PARENT_SALES_CODE': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K'],
        'BUSINESS_STATUS': ['1', '2', '3', '9'],
        'OFFICE_SIZE_CODE': ['A', 'B', 'C', 'D', 'E', 'F'],
        'HOLDING_STATUS': ['0', '1', '2'],
        'ADDRESS_TYPE': ['F', 'G', 'H', 'M', 'P', 'R', 'S', 'N'],
        'POPULATION_CODE': ['1', '5', '6', '7', '8', '9'],
        'MATCH_CODE': ['0', '2', '4', 'P', 'X'],
        'CBSA_LEVEL': ['1', '2']
    }

    for col, cats in cat_cols.items():
        df[col] = pd.Categorical(df[col], categories=cats)


def validate_raw_numbers(df):
    """Validate values in raw InfoGroup data according to numerical constraints.
    Return list of dicts of invalid values.
    """

    constraints = {
        'YEAR': {'eq': year},
        'EMPLOYEES': {'ge': 0},
        'SALES': {'ge': 0},
        'PARENT_EMPLOYEES': {'ge': 0},
        'PARENT_SALES': {'ge': 0},
        'YEAR_EST': {'ge': 1500, 'le': year},
        'LATITUDE': {'ge': 0, 'le': 90},
        'LONGITUDE': {'ge': -180, 'le': 0}
    }
    return util.validate_values(df, constraints)

# Cell
def get_df(year, cols=None):
    """Return one year of InfoGroup data with appropriate data types.
    Subset of columns can be loaded by passing list to `cols`.
    """
    res = resources.get(f'infogroup/pq/{year}')
    return pd.read_parquet(res.path, 'fastparquet', columns=cols)